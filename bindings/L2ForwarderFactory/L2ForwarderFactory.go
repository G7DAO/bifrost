// This file was generated by seer: https://github.com/G7DAO/seer.
// seer version: 0.1.3
// seer command: seer evm generate --package L2ForwarderFactory --cli --struct L2ForwarderFactory
// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package L2ForwarderFactory

import (
	"errors"
	"math/big"
	"strings"

	"context"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"

	// Reference imports to suppress errors if they are not otherwise used.
	"encoding/hex"
	"encoding/json"
	"fmt"
	"os"
	"time"

	"github.com/ethereum/go-ethereum/accounts/keystore"
	"github.com/ethereum/go-ethereum/ethclient"
	"github.com/spf13/cobra"
	"golang.org/x/term"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// IL2ForwarderL2ForwarderParams is an auto generated low-level Go binding around an user-defined struct.
type IL2ForwarderL2ForwarderParams struct {
	Owner             common.Address
	L2Token           common.Address
	L3FeeTokenL2Addr  common.Address
	RouterOrInbox     common.Address
	To                common.Address
	GasLimit          *big.Int
	GasPriceBid       *big.Int
	MaxSubmissionCost *big.Int
	L3CallData        []byte
}

// L2ForwarderFactoryMetaData contains all meta data concerning the L2ForwarderFactory contract.
var L2ForwarderFactoryMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_impl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aliasedL1Teleporter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"OnlyL1Teleporter\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"l2Forwarder\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l3FeeTokenL2Addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"routerOrInbox\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasPriceBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSubmissionCost\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"l3CallData\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"structIL2Forwarder.L2ForwarderParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"CalledL2Forwarder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"l2Forwarder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"routerOrInbox\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"CreatedL2Forwarder\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"aliasedL1Teleporter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l3FeeTokenL2Addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"routerOrInbox\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasPriceBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSubmissionCost\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"l3CallData\",\"type\":\"bytes\"}],\"internalType\":\"structIL2Forwarder.L2ForwarderParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"callForwarder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"routerOrInbox\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"createL2Forwarder\",\"outputs\":[{\"internalType\":\"contractIL2Forwarder\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"routerOrInbox\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"l2ForwarderAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2ForwarderFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2ForwarderImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60e060405234801561001057600080fd5b50604051610b01380380610b0183398101604081905261002f91610066565b306080526001600160a01b0391821660a0521660c052610099565b80516001600160a01b038116811461006157600080fd5b919050565b6000806040838503121561007957600080fd5b6100828361004a565b91506100906020840161004a565b90509250929050565b60805160a05160c051610a1e6100e36000396000818161010e0152610302015260008181610142015281816101de01526104bf01526000818160c501526104830152610a1e6000f3fe6080604052600436106100655760003560e01c8063e261911b11610043578063e261911b146100fc578063ec7d4abd14610130578063fbabf0841461016457600080fd5b806302e8e7831461006a578063377f017a146100b35780635b65a6a4146100e7575b600080fd5b34801561007657600080fd5b5061008a610085366004610662565b610184565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b3480156100bf57600080fd5b5061008a7f000000000000000000000000000000000000000000000000000000000000000081565b6100fa6100f53660046107a9565b6102ea565b005b34801561010857600080fd5b5061008a7f000000000000000000000000000000000000000000000000000000000000000081565b34801561013c57600080fd5b5061008a7f000000000000000000000000000000000000000000000000000000000000000081565b34801561017057600080fd5b5061008a61017f366004610662565b610432565b6040805173ffffffffffffffffffffffffffffffffffffffff8086166020808401919091528186168385015290841660608084019190915283518084039091018152608090920190925280519101206000908190610203907f000000000000000000000000000000000000000000000000000000000000000090610523565b6040517fc4d66de800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87811660048301529192509082169063c4d66de890602401600060405180830381600087803b15801561027057600080fd5b505af1158015610284573d6000803e3d6000fd5b50506040805173ffffffffffffffffffffffffffffffffffffffff88811682528781166020830152808a169450851692507f99f6b41137c463e01337801d2b5ee9d1b5d057e4266739a17a3d50d2149ef9be910160405180910390a390505b9392505050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610359576040517fbf801ce900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006103728260000151836060015184608001516105f1565b90508073ffffffffffffffffffffffffffffffffffffffff1663cc617cd434846040518363ffffffff1660e01b81526004016103ae91906108f2565b6000604051808303818588803b1580156103c757600080fd5b505af11580156103db573d6000803e3d6000fd5b50505050508073ffffffffffffffffffffffffffffffffffffffff167fe7574670f76df54487060ea7a633529efd85f268c9bdf4b3142153c2330577128360405161042691906108f2565b60405180910390a25050565b6040805173ffffffffffffffffffffffffffffffffffffffff8581166020808401919091528582168385015290841660608084019190915283518084039091018152608083019384905280519101207f000000000000000000000000000000000000000000000000000000000000000060b88301526f5af43d82803e903d91602b57fd5bf3ff60a48301527f00000000000000000000000000000000000000000000000000000000000000006094830152733d602d80600a3d3981f3363d3d373d3d3d363d7390925260d88101919091526037608c82012060f8820152605560c3909101206000905b949350505050565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008360601b60e81c176000526e5af43d82803e903d91602b57fd5bf38360781b1760205281603760096000f5905073ffffffffffffffffffffffffffffffffffffffff81166105eb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f455243313136373a2063726561746532206661696c6564000000000000000000604482015260640160405180910390fd5b92915050565b6000806105ff858585610432565b905073ffffffffffffffffffffffffffffffffffffffff81163b156106255790506102e3565b610630858585610184565b95945050505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461065d57600080fd5b919050565b60008060006060848603121561067757600080fd5b61068084610639565b925061068e60208501610639565b915061069c60408501610639565b90509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610120810167ffffffffffffffff811182821017156106f8576106f86106a5565b60405290565b600082601f83011261070f57600080fd5b813567ffffffffffffffff8082111561072a5761072a6106a5565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908282118183101715610770576107706106a5565b8160405283815286602085880101111561078957600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000602082840312156107bb57600080fd5b813567ffffffffffffffff808211156107d357600080fd5b9083019061012082860312156107e857600080fd5b6107f06106d4565b6107f983610639565b815261080760208401610639565b602082015261081860408401610639565b604082015261082960608401610639565b606082015261083a60808401610639565b608082015260a083013560a082015260c083013560c082015260e083013560e0820152610100808401358381111561087157600080fd5b61087d888287016106fe565b918301919091525095945050505050565b6000815180845260005b818110156108b457602081850181015186830182015201610898565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b6020815261091960208201835173ffffffffffffffffffffffffffffffffffffffff169052565b60006020830151610942604084018273ffffffffffffffffffffffffffffffffffffffff169052565b50604083015173ffffffffffffffffffffffffffffffffffffffff8116606084015250606083015173ffffffffffffffffffffffffffffffffffffffff8116608084015250608083015173ffffffffffffffffffffffffffffffffffffffff811660a08401525060a083015160c083015260c083015160e083015260e083015161010081818501528085015191505061012080818501525061051b61014084018261088e56fea2646970667358221220ad0c58a910e71e1087a175dd2573e033f6996c3fd70caf754bbe437cb6835ce964736f6c63430008170033",
}

// L2ForwarderFactoryABI is the input ABI used to generate the binding from.
// Deprecated: Use L2ForwarderFactoryMetaData.ABI instead.
var L2ForwarderFactoryABI = L2ForwarderFactoryMetaData.ABI

// L2ForwarderFactoryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use L2ForwarderFactoryMetaData.Bin instead.
var L2ForwarderFactoryBin = L2ForwarderFactoryMetaData.Bin

// DeployL2ForwarderFactory deploys a new Ethereum contract, binding an instance of L2ForwarderFactory to it.
func DeployL2ForwarderFactory(auth *bind.TransactOpts, backend bind.ContractBackend, _impl common.Address, _aliasedL1Teleporter common.Address) (common.Address, *types.Transaction, *L2ForwarderFactory, error) {
	parsed, err := L2ForwarderFactoryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(L2ForwarderFactoryBin), backend, _impl, _aliasedL1Teleporter)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &L2ForwarderFactory{L2ForwarderFactoryCaller: L2ForwarderFactoryCaller{contract: contract}, L2ForwarderFactoryTransactor: L2ForwarderFactoryTransactor{contract: contract}, L2ForwarderFactoryFilterer: L2ForwarderFactoryFilterer{contract: contract}}, nil
}

// L2ForwarderFactory is an auto generated Go binding around an Ethereum contract.
type L2ForwarderFactory struct {
	L2ForwarderFactoryCaller     // Read-only binding to the contract
	L2ForwarderFactoryTransactor // Write-only binding to the contract
	L2ForwarderFactoryFilterer   // Log filterer for contract events
}

// L2ForwarderFactoryCaller is an auto generated read-only Go binding around an Ethereum contract.
type L2ForwarderFactoryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// L2ForwarderFactoryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type L2ForwarderFactoryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// L2ForwarderFactoryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type L2ForwarderFactoryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// L2ForwarderFactorySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type L2ForwarderFactorySession struct {
	Contract     *L2ForwarderFactory // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// L2ForwarderFactoryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type L2ForwarderFactoryCallerSession struct {
	Contract *L2ForwarderFactoryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// L2ForwarderFactoryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type L2ForwarderFactoryTransactorSession struct {
	Contract     *L2ForwarderFactoryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// L2ForwarderFactoryRaw is an auto generated low-level Go binding around an Ethereum contract.
type L2ForwarderFactoryRaw struct {
	Contract *L2ForwarderFactory // Generic contract binding to access the raw methods on
}

// L2ForwarderFactoryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type L2ForwarderFactoryCallerRaw struct {
	Contract *L2ForwarderFactoryCaller // Generic read-only contract binding to access the raw methods on
}

// L2ForwarderFactoryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type L2ForwarderFactoryTransactorRaw struct {
	Contract *L2ForwarderFactoryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewL2ForwarderFactory creates a new instance of L2ForwarderFactory, bound to a specific deployed contract.
func NewL2ForwarderFactory(address common.Address, backend bind.ContractBackend) (*L2ForwarderFactory, error) {
	contract, err := bindL2ForwarderFactory(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &L2ForwarderFactory{L2ForwarderFactoryCaller: L2ForwarderFactoryCaller{contract: contract}, L2ForwarderFactoryTransactor: L2ForwarderFactoryTransactor{contract: contract}, L2ForwarderFactoryFilterer: L2ForwarderFactoryFilterer{contract: contract}}, nil
}

// NewL2ForwarderFactoryCaller creates a new read-only instance of L2ForwarderFactory, bound to a specific deployed contract.
func NewL2ForwarderFactoryCaller(address common.Address, caller bind.ContractCaller) (*L2ForwarderFactoryCaller, error) {
	contract, err := bindL2ForwarderFactory(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &L2ForwarderFactoryCaller{contract: contract}, nil
}

// NewL2ForwarderFactoryTransactor creates a new write-only instance of L2ForwarderFactory, bound to a specific deployed contract.
func NewL2ForwarderFactoryTransactor(address common.Address, transactor bind.ContractTransactor) (*L2ForwarderFactoryTransactor, error) {
	contract, err := bindL2ForwarderFactory(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &L2ForwarderFactoryTransactor{contract: contract}, nil
}

// NewL2ForwarderFactoryFilterer creates a new log filterer instance of L2ForwarderFactory, bound to a specific deployed contract.
func NewL2ForwarderFactoryFilterer(address common.Address, filterer bind.ContractFilterer) (*L2ForwarderFactoryFilterer, error) {
	contract, err := bindL2ForwarderFactory(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &L2ForwarderFactoryFilterer{contract: contract}, nil
}

// bindL2ForwarderFactory binds a generic wrapper to an already deployed contract.
func bindL2ForwarderFactory(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := L2ForwarderFactoryMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_L2ForwarderFactory *L2ForwarderFactoryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _L2ForwarderFactory.Contract.L2ForwarderFactoryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_L2ForwarderFactory *L2ForwarderFactoryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _L2ForwarderFactory.Contract.L2ForwarderFactoryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_L2ForwarderFactory *L2ForwarderFactoryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _L2ForwarderFactory.Contract.L2ForwarderFactoryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_L2ForwarderFactory *L2ForwarderFactoryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _L2ForwarderFactory.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_L2ForwarderFactory *L2ForwarderFactoryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _L2ForwarderFactory.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_L2ForwarderFactory *L2ForwarderFactoryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _L2ForwarderFactory.Contract.contract.Transact(opts, method, params...)
}

// AliasedL1Teleporter is a free data retrieval call binding the contract method 0xe261911b.
//
// Solidity: function aliasedL1Teleporter() view returns(address)
func (_L2ForwarderFactory *L2ForwarderFactoryCaller) AliasedL1Teleporter(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _L2ForwarderFactory.contract.Call(opts, &out, "aliasedL1Teleporter")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AliasedL1Teleporter is a free data retrieval call binding the contract method 0xe261911b.
//
// Solidity: function aliasedL1Teleporter() view returns(address)
func (_L2ForwarderFactory *L2ForwarderFactorySession) AliasedL1Teleporter() (common.Address, error) {
	return _L2ForwarderFactory.Contract.AliasedL1Teleporter(&_L2ForwarderFactory.CallOpts)
}

// AliasedL1Teleporter is a free data retrieval call binding the contract method 0xe261911b.
//
// Solidity: function aliasedL1Teleporter() view returns(address)
func (_L2ForwarderFactory *L2ForwarderFactoryCallerSession) AliasedL1Teleporter() (common.Address, error) {
	return _L2ForwarderFactory.Contract.AliasedL1Teleporter(&_L2ForwarderFactory.CallOpts)
}

// L2ForwarderAddress is a free data retrieval call binding the contract method 0xfbabf084.
//
// Solidity: function l2ForwarderAddress(address owner, address routerOrInbox, address to) view returns(address)
func (_L2ForwarderFactory *L2ForwarderFactoryCaller) L2ForwarderAddress(opts *bind.CallOpts, owner common.Address, routerOrInbox common.Address, to common.Address) (common.Address, error) {
	var out []interface{}
	err := _L2ForwarderFactory.contract.Call(opts, &out, "l2ForwarderAddress", owner, routerOrInbox, to)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// L2ForwarderAddress is a free data retrieval call binding the contract method 0xfbabf084.
//
// Solidity: function l2ForwarderAddress(address owner, address routerOrInbox, address to) view returns(address)
func (_L2ForwarderFactory *L2ForwarderFactorySession) L2ForwarderAddress(owner common.Address, routerOrInbox common.Address, to common.Address) (common.Address, error) {
	return _L2ForwarderFactory.Contract.L2ForwarderAddress(&_L2ForwarderFactory.CallOpts, owner, routerOrInbox, to)
}

// L2ForwarderAddress is a free data retrieval call binding the contract method 0xfbabf084.
//
// Solidity: function l2ForwarderAddress(address owner, address routerOrInbox, address to) view returns(address)
func (_L2ForwarderFactory *L2ForwarderFactoryCallerSession) L2ForwarderAddress(owner common.Address, routerOrInbox common.Address, to common.Address) (common.Address, error) {
	return _L2ForwarderFactory.Contract.L2ForwarderAddress(&_L2ForwarderFactory.CallOpts, owner, routerOrInbox, to)
}

// L2ForwarderFactory is a free data retrieval call binding the contract method 0x377f017a.
//
// Solidity: function l2ForwarderFactory() view returns(address)
func (_L2ForwarderFactory *L2ForwarderFactoryCaller) L2ForwarderFactory(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _L2ForwarderFactory.contract.Call(opts, &out, "l2ForwarderFactory")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// L2ForwarderFactory is a free data retrieval call binding the contract method 0x377f017a.
//
// Solidity: function l2ForwarderFactory() view returns(address)
func (_L2ForwarderFactory *L2ForwarderFactorySession) L2ForwarderFactory() (common.Address, error) {
	return _L2ForwarderFactory.Contract.L2ForwarderFactory(&_L2ForwarderFactory.CallOpts)
}

// L2ForwarderFactory is a free data retrieval call binding the contract method 0x377f017a.
//
// Solidity: function l2ForwarderFactory() view returns(address)
func (_L2ForwarderFactory *L2ForwarderFactoryCallerSession) L2ForwarderFactory() (common.Address, error) {
	return _L2ForwarderFactory.Contract.L2ForwarderFactory(&_L2ForwarderFactory.CallOpts)
}

// L2ForwarderImplementation is a free data retrieval call binding the contract method 0xec7d4abd.
//
// Solidity: function l2ForwarderImplementation() view returns(address)
func (_L2ForwarderFactory *L2ForwarderFactoryCaller) L2ForwarderImplementation(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _L2ForwarderFactory.contract.Call(opts, &out, "l2ForwarderImplementation")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// L2ForwarderImplementation is a free data retrieval call binding the contract method 0xec7d4abd.
//
// Solidity: function l2ForwarderImplementation() view returns(address)
func (_L2ForwarderFactory *L2ForwarderFactorySession) L2ForwarderImplementation() (common.Address, error) {
	return _L2ForwarderFactory.Contract.L2ForwarderImplementation(&_L2ForwarderFactory.CallOpts)
}

// L2ForwarderImplementation is a free data retrieval call binding the contract method 0xec7d4abd.
//
// Solidity: function l2ForwarderImplementation() view returns(address)
func (_L2ForwarderFactory *L2ForwarderFactoryCallerSession) L2ForwarderImplementation() (common.Address, error) {
	return _L2ForwarderFactory.Contract.L2ForwarderImplementation(&_L2ForwarderFactory.CallOpts)
}

// CallForwarder is a paid mutator transaction binding the contract method 0x5b65a6a4.
//
// Solidity: function callForwarder((address,address,address,address,address,uint256,uint256,uint256,bytes) params) payable returns()
func (_L2ForwarderFactory *L2ForwarderFactoryTransactor) CallForwarder(opts *bind.TransactOpts, params IL2ForwarderL2ForwarderParams) (*types.Transaction, error) {
	return _L2ForwarderFactory.contract.Transact(opts, "callForwarder", params)
}

// CallForwarder is a paid mutator transaction binding the contract method 0x5b65a6a4.
//
// Solidity: function callForwarder((address,address,address,address,address,uint256,uint256,uint256,bytes) params) payable returns()
func (_L2ForwarderFactory *L2ForwarderFactorySession) CallForwarder(params IL2ForwarderL2ForwarderParams) (*types.Transaction, error) {
	return _L2ForwarderFactory.Contract.CallForwarder(&_L2ForwarderFactory.TransactOpts, params)
}

// CallForwarder is a paid mutator transaction binding the contract method 0x5b65a6a4.
//
// Solidity: function callForwarder((address,address,address,address,address,uint256,uint256,uint256,bytes) params) payable returns()
func (_L2ForwarderFactory *L2ForwarderFactoryTransactorSession) CallForwarder(params IL2ForwarderL2ForwarderParams) (*types.Transaction, error) {
	return _L2ForwarderFactory.Contract.CallForwarder(&_L2ForwarderFactory.TransactOpts, params)
}

// CreateL2Forwarder is a paid mutator transaction binding the contract method 0x02e8e783.
//
// Solidity: function createL2Forwarder(address owner, address routerOrInbox, address to) returns(address)
func (_L2ForwarderFactory *L2ForwarderFactoryTransactor) CreateL2Forwarder(opts *bind.TransactOpts, owner common.Address, routerOrInbox common.Address, to common.Address) (*types.Transaction, error) {
	return _L2ForwarderFactory.contract.Transact(opts, "createL2Forwarder", owner, routerOrInbox, to)
}

// CreateL2Forwarder is a paid mutator transaction binding the contract method 0x02e8e783.
//
// Solidity: function createL2Forwarder(address owner, address routerOrInbox, address to) returns(address)
func (_L2ForwarderFactory *L2ForwarderFactorySession) CreateL2Forwarder(owner common.Address, routerOrInbox common.Address, to common.Address) (*types.Transaction, error) {
	return _L2ForwarderFactory.Contract.CreateL2Forwarder(&_L2ForwarderFactory.TransactOpts, owner, routerOrInbox, to)
}

// CreateL2Forwarder is a paid mutator transaction binding the contract method 0x02e8e783.
//
// Solidity: function createL2Forwarder(address owner, address routerOrInbox, address to) returns(address)
func (_L2ForwarderFactory *L2ForwarderFactoryTransactorSession) CreateL2Forwarder(owner common.Address, routerOrInbox common.Address, to common.Address) (*types.Transaction, error) {
	return _L2ForwarderFactory.Contract.CreateL2Forwarder(&_L2ForwarderFactory.TransactOpts, owner, routerOrInbox, to)
}

// L2ForwarderFactoryCalledL2ForwarderIterator is returned from FilterCalledL2Forwarder and is used to iterate over the raw logs and unpacked data for CalledL2Forwarder events raised by the L2ForwarderFactory contract.
type L2ForwarderFactoryCalledL2ForwarderIterator struct {
	Event *L2ForwarderFactoryCalledL2Forwarder // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L2ForwarderFactoryCalledL2ForwarderIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L2ForwarderFactoryCalledL2Forwarder)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L2ForwarderFactoryCalledL2Forwarder)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L2ForwarderFactoryCalledL2ForwarderIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L2ForwarderFactoryCalledL2ForwarderIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L2ForwarderFactoryCalledL2Forwarder represents a CalledL2Forwarder event raised by the L2ForwarderFactory contract.
type L2ForwarderFactoryCalledL2Forwarder struct {
	L2Forwarder common.Address
	Params      IL2ForwarderL2ForwarderParams
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterCalledL2Forwarder is a free log retrieval operation binding the contract event 0xe7574670f76df54487060ea7a633529efd85f268c9bdf4b3142153c233057712.
//
// Solidity: event CalledL2Forwarder(address indexed l2Forwarder, (address,address,address,address,address,uint256,uint256,uint256,bytes) params)
func (_L2ForwarderFactory *L2ForwarderFactoryFilterer) FilterCalledL2Forwarder(opts *bind.FilterOpts, l2Forwarder []common.Address) (*L2ForwarderFactoryCalledL2ForwarderIterator, error) {

	var l2ForwarderRule []interface{}
	for _, l2ForwarderItem := range l2Forwarder {
		l2ForwarderRule = append(l2ForwarderRule, l2ForwarderItem)
	}

	logs, sub, err := _L2ForwarderFactory.contract.FilterLogs(opts, "CalledL2Forwarder", l2ForwarderRule)
	if err != nil {
		return nil, err
	}
	return &L2ForwarderFactoryCalledL2ForwarderIterator{contract: _L2ForwarderFactory.contract, event: "CalledL2Forwarder", logs: logs, sub: sub}, nil
}

// WatchCalledL2Forwarder is a free log subscription operation binding the contract event 0xe7574670f76df54487060ea7a633529efd85f268c9bdf4b3142153c233057712.
//
// Solidity: event CalledL2Forwarder(address indexed l2Forwarder, (address,address,address,address,address,uint256,uint256,uint256,bytes) params)
func (_L2ForwarderFactory *L2ForwarderFactoryFilterer) WatchCalledL2Forwarder(opts *bind.WatchOpts, sink chan<- *L2ForwarderFactoryCalledL2Forwarder, l2Forwarder []common.Address) (event.Subscription, error) {

	var l2ForwarderRule []interface{}
	for _, l2ForwarderItem := range l2Forwarder {
		l2ForwarderRule = append(l2ForwarderRule, l2ForwarderItem)
	}

	logs, sub, err := _L2ForwarderFactory.contract.WatchLogs(opts, "CalledL2Forwarder", l2ForwarderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L2ForwarderFactoryCalledL2Forwarder)
				if err := _L2ForwarderFactory.contract.UnpackLog(event, "CalledL2Forwarder", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCalledL2Forwarder is a log parse operation binding the contract event 0xe7574670f76df54487060ea7a633529efd85f268c9bdf4b3142153c233057712.
//
// Solidity: event CalledL2Forwarder(address indexed l2Forwarder, (address,address,address,address,address,uint256,uint256,uint256,bytes) params)
func (_L2ForwarderFactory *L2ForwarderFactoryFilterer) ParseCalledL2Forwarder(log types.Log) (*L2ForwarderFactoryCalledL2Forwarder, error) {
	event := new(L2ForwarderFactoryCalledL2Forwarder)
	if err := _L2ForwarderFactory.contract.UnpackLog(event, "CalledL2Forwarder", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L2ForwarderFactoryCreatedL2ForwarderIterator is returned from FilterCreatedL2Forwarder and is used to iterate over the raw logs and unpacked data for CreatedL2Forwarder events raised by the L2ForwarderFactory contract.
type L2ForwarderFactoryCreatedL2ForwarderIterator struct {
	Event *L2ForwarderFactoryCreatedL2Forwarder // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L2ForwarderFactoryCreatedL2ForwarderIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L2ForwarderFactoryCreatedL2Forwarder)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L2ForwarderFactoryCreatedL2Forwarder)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L2ForwarderFactoryCreatedL2ForwarderIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L2ForwarderFactoryCreatedL2ForwarderIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L2ForwarderFactoryCreatedL2Forwarder represents a CreatedL2Forwarder event raised by the L2ForwarderFactory contract.
type L2ForwarderFactoryCreatedL2Forwarder struct {
	L2Forwarder   common.Address
	Owner         common.Address
	RouterOrInbox common.Address
	To            common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCreatedL2Forwarder is a free log retrieval operation binding the contract event 0x99f6b41137c463e01337801d2b5ee9d1b5d057e4266739a17a3d50d2149ef9be.
//
// Solidity: event CreatedL2Forwarder(address indexed l2Forwarder, address indexed owner, address routerOrInbox, address to)
func (_L2ForwarderFactory *L2ForwarderFactoryFilterer) FilterCreatedL2Forwarder(opts *bind.FilterOpts, l2Forwarder []common.Address, owner []common.Address) (*L2ForwarderFactoryCreatedL2ForwarderIterator, error) {

	var l2ForwarderRule []interface{}
	for _, l2ForwarderItem := range l2Forwarder {
		l2ForwarderRule = append(l2ForwarderRule, l2ForwarderItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _L2ForwarderFactory.contract.FilterLogs(opts, "CreatedL2Forwarder", l2ForwarderRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return &L2ForwarderFactoryCreatedL2ForwarderIterator{contract: _L2ForwarderFactory.contract, event: "CreatedL2Forwarder", logs: logs, sub: sub}, nil
}

// WatchCreatedL2Forwarder is a free log subscription operation binding the contract event 0x99f6b41137c463e01337801d2b5ee9d1b5d057e4266739a17a3d50d2149ef9be.
//
// Solidity: event CreatedL2Forwarder(address indexed l2Forwarder, address indexed owner, address routerOrInbox, address to)
func (_L2ForwarderFactory *L2ForwarderFactoryFilterer) WatchCreatedL2Forwarder(opts *bind.WatchOpts, sink chan<- *L2ForwarderFactoryCreatedL2Forwarder, l2Forwarder []common.Address, owner []common.Address) (event.Subscription, error) {

	var l2ForwarderRule []interface{}
	for _, l2ForwarderItem := range l2Forwarder {
		l2ForwarderRule = append(l2ForwarderRule, l2ForwarderItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _L2ForwarderFactory.contract.WatchLogs(opts, "CreatedL2Forwarder", l2ForwarderRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L2ForwarderFactoryCreatedL2Forwarder)
				if err := _L2ForwarderFactory.contract.UnpackLog(event, "CreatedL2Forwarder", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreatedL2Forwarder is a log parse operation binding the contract event 0x99f6b41137c463e01337801d2b5ee9d1b5d057e4266739a17a3d50d2149ef9be.
//
// Solidity: event CreatedL2Forwarder(address indexed l2Forwarder, address indexed owner, address routerOrInbox, address to)
func (_L2ForwarderFactory *L2ForwarderFactoryFilterer) ParseCreatedL2Forwarder(log types.Log) (*L2ForwarderFactoryCreatedL2Forwarder, error) {
	event := new(L2ForwarderFactoryCreatedL2Forwarder)
	if err := _L2ForwarderFactory.contract.UnpackLog(event, "CreatedL2Forwarder", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

func CreateL2ForwarderFactoryDeploymentCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc string
	var gasLimit uint64
	var simulate bool
	var timeout uint

	var impl common.Address
	var implRaw string
	var aliasedL1Teleporter common.Address
	var aliasedL1TeleporterRaw string

	cmd := &cobra.Command{
		Use:   "deploy",
		Short: "Deploy a new L2ForwarderFactory contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified (this should be a path to an Ethereum account keystore file)")
			}

			if implRaw == "" {
				return fmt.Errorf("--impl argument not specified")
			} else if !common.IsHexAddress(implRaw) {
				return fmt.Errorf("--impl argument is not a valid Ethereum address")
			}
			impl = common.HexToAddress(implRaw)

			if aliasedL1TeleporterRaw == "" {
				return fmt.Errorf("--aliased-l-1-teleporter argument not specified")
			} else if !common.IsHexAddress(aliasedL1TeleporterRaw) {
				return fmt.Errorf("--aliased-l-1-teleporter argument is not a valid Ethereum address")
			}
			aliasedL1Teleporter = common.HexToAddress(aliasedL1TeleporterRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			address, deploymentTransaction, _, deploymentErr := DeployL2ForwarderFactory(
				transactionOpts,
				client,
				impl,
				aliasedL1Teleporter,
			)
			if deploymentErr != nil {
				return deploymentErr
			}

			cmd.Printf("Transaction hash: %s\nContract address: %s\n", deploymentTransaction.Hash().Hex(), address.Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					Data: deploymentTransaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := deploymentTransaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")

	cmd.Flags().StringVar(&implRaw, "impl", "", "impl argument")
	cmd.Flags().StringVar(&aliasedL1TeleporterRaw, "aliased-l-1-teleporter", "", "aliased-l-1-teleporter argument")

	return cmd
}

func CreateAliasedL1TeleporterCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 common.Address

	cmd := &cobra.Command{
		Use:   "aliased-l-1-teleporter",
		Short: "Call the AliasedL1Teleporter view method on a L2ForwarderFactory contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewL2ForwarderFactory(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := L2ForwarderFactoryCallerSession{
				Contract: &contract.L2ForwarderFactoryCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.AliasedL1Teleporter()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.Hex())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}
func CreateL2ForwarderAddressCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var owner common.Address
	var ownerRaw string
	var routerOrInbox common.Address
	var routerOrInboxRaw string
	var to0 common.Address
	var to0Raw string

	var capture0 common.Address

	cmd := &cobra.Command{
		Use:   "l-2-forwarder-address",
		Short: "Call the L2ForwarderAddress view method on a L2ForwarderFactory contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if ownerRaw == "" {
				return fmt.Errorf("--owner argument not specified")
			} else if !common.IsHexAddress(ownerRaw) {
				return fmt.Errorf("--owner argument is not a valid Ethereum address")
			}
			owner = common.HexToAddress(ownerRaw)

			if routerOrInboxRaw == "" {
				return fmt.Errorf("--router-or-inbox argument not specified")
			} else if !common.IsHexAddress(routerOrInboxRaw) {
				return fmt.Errorf("--router-or-inbox argument is not a valid Ethereum address")
			}
			routerOrInbox = common.HexToAddress(routerOrInboxRaw)

			if to0Raw == "" {
				return fmt.Errorf("--to-0 argument not specified")
			} else if !common.IsHexAddress(to0Raw) {
				return fmt.Errorf("--to-0 argument is not a valid Ethereum address")
			}
			to0 = common.HexToAddress(to0Raw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewL2ForwarderFactory(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := L2ForwarderFactoryCallerSession{
				Contract: &contract.L2ForwarderFactoryCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.L2ForwarderAddress(
				owner,
				routerOrInbox,
				to0,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.Hex())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&ownerRaw, "owner", "", "owner argument")
	cmd.Flags().StringVar(&routerOrInboxRaw, "router-or-inbox", "", "router-or-inbox argument")
	cmd.Flags().StringVar(&to0Raw, "to-0", "", "to-0 argument")

	return cmd
}
func CreateL2ForwarderFactoryCommand2() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 common.Address

	cmd := &cobra.Command{
		Use:   "l-2-forwarder-factory",
		Short: "Call the L2ForwarderFactory view method on a L2ForwarderFactory contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewL2ForwarderFactory(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := L2ForwarderFactoryCallerSession{
				Contract: &contract.L2ForwarderFactoryCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.L2ForwarderFactory()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.Hex())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}
func CreateL2ForwarderImplementationCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 common.Address

	cmd := &cobra.Command{
		Use:   "l-2-forwarder-implementation",
		Short: "Call the L2ForwarderImplementation view method on a L2ForwarderFactory contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewL2ForwarderFactory(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := L2ForwarderFactoryCallerSession{
				Contract: &contract.L2ForwarderFactoryCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.L2ForwarderImplementation()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.Hex())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}

func CreateCallForwarderCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var params IL2ForwarderL2ForwarderParams
	var paramsRaw string

	cmd := &cobra.Command{
		Use:   "call-forwarder",
		Short: "Execute the CallForwarder method on a L2ForwarderFactory contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if paramsRaw == "" {
				return fmt.Errorf("--params argument not specified")
			} else if strings.HasPrefix(paramsRaw, "@") {
				filename := strings.TrimPrefix(paramsRaw, "@")
				contents, readErr := os.ReadFile(filename)
				if readErr != nil {
					return readErr
				}
				unmarshalErr := json.Unmarshal(contents, &params)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			} else {
				unmarshalErr := json.Unmarshal([]byte(paramsRaw), &params)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewL2ForwarderFactory(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := L2ForwarderFactoryTransactorSession{
				Contract:     &contract.L2ForwarderFactoryTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.CallForwarder(
				params,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&paramsRaw, "params", "", "params argument")

	return cmd
}
func CreateCreateL2ForwarderCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var owner common.Address
	var ownerRaw string
	var routerOrInbox common.Address
	var routerOrInboxRaw string
	var to0 common.Address
	var to0Raw string

	cmd := &cobra.Command{
		Use:   "create-l-2-forwarder",
		Short: "Execute the CreateL2Forwarder method on a L2ForwarderFactory contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if ownerRaw == "" {
				return fmt.Errorf("--owner argument not specified")
			} else if !common.IsHexAddress(ownerRaw) {
				return fmt.Errorf("--owner argument is not a valid Ethereum address")
			}
			owner = common.HexToAddress(ownerRaw)

			if routerOrInboxRaw == "" {
				return fmt.Errorf("--router-or-inbox argument not specified")
			} else if !common.IsHexAddress(routerOrInboxRaw) {
				return fmt.Errorf("--router-or-inbox argument is not a valid Ethereum address")
			}
			routerOrInbox = common.HexToAddress(routerOrInboxRaw)

			if to0Raw == "" {
				return fmt.Errorf("--to-0 argument not specified")
			} else if !common.IsHexAddress(to0Raw) {
				return fmt.Errorf("--to-0 argument is not a valid Ethereum address")
			}
			to0 = common.HexToAddress(to0Raw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewL2ForwarderFactory(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := L2ForwarderFactoryTransactorSession{
				Contract:     &contract.L2ForwarderFactoryTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.CreateL2Forwarder(
				owner,
				routerOrInbox,
				to0,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&ownerRaw, "owner", "", "owner argument")
	cmd.Flags().StringVar(&routerOrInboxRaw, "router-or-inbox", "", "router-or-inbox argument")
	cmd.Flags().StringVar(&to0Raw, "to-0", "", "to-0 argument")

	return cmd
}

var ErrNoRPCURL error = errors.New("no RPC URL provided -- please pass an RPC URL from the command line or set the L_2_FORWARDER_FACTORY_RPC_URL environment variable")

// Generates an Ethereum client to the JSONRPC API at the given URL. If rpcURL is empty, then it
// attempts to read the RPC URL from the L_2_FORWARDER_FACTORY_RPC_URL environment variable. If that is empty,
// too, then it returns an error.
func NewClient(rpcURL string) (*ethclient.Client, error) {
	if rpcURL == "" {
		rpcURL = os.Getenv("L_2_FORWARDER_FACTORY_RPC_URL")
	}

	if rpcURL == "" {
		return nil, ErrNoRPCURL
	}

	client, err := ethclient.Dial(rpcURL)
	return client, err
}

// Creates a new context to be used when interacting with the chain client.
func NewChainContext(timeout uint) (context.Context, context.CancelFunc) {
	baseCtx := context.Background()
	parsedTimeout := time.Duration(timeout) * time.Second
	ctx, cancel := context.WithTimeout(baseCtx, parsedTimeout)
	return ctx, cancel
}

// Unlocks a key from a keystore (byte contents of a keystore file) with the given password.
func UnlockKeystore(keystoreData []byte, password string) (*keystore.Key, error) {
	key, err := keystore.DecryptKey(keystoreData, password)
	return key, err
}

// Loads a key from file, prompting the user for the password if it is not provided as a function argument.
func KeyFromFile(keystoreFile string, password string) (*keystore.Key, error) {
	var emptyKey *keystore.Key
	keystoreContent, readErr := os.ReadFile(keystoreFile)
	if readErr != nil {
		return emptyKey, readErr
	}

	// If password is "", prompt user for password.
	if password == "" {
		fmt.Printf("Please provide a password for keystore (%s): ", keystoreFile)
		passwordRaw, inputErr := term.ReadPassword(int(os.Stdin.Fd()))
		if inputErr != nil {
			return emptyKey, fmt.Errorf("error reading password: %s", inputErr.Error())
		}
		fmt.Print("\n")
		password = string(passwordRaw)
	}

	key, err := UnlockKeystore(keystoreContent, password)
	return key, err
}

// This method is used to set the parameters on a view call from command line arguments (represented mostly as
// strings).
func SetCallParametersFromArgs(opts *bind.CallOpts, pending bool, fromAddress, blockNumber string) {
	if pending {
		opts.Pending = true
	}

	if fromAddress != "" {
		opts.From = common.HexToAddress(fromAddress)
	}

	if blockNumber != "" {
		opts.BlockNumber = new(big.Int)
		opts.BlockNumber.SetString(blockNumber, 0)
	}
}

// This method is used to set the parameters on a transaction from command line arguments (represented mostly as
// strings).
func SetTransactionParametersFromArgs(opts *bind.TransactOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas string, gasLimit uint64, noSend bool) {
	if nonce != "" {
		opts.Nonce = new(big.Int)
		opts.Nonce.SetString(nonce, 0)
	}

	if value != "" {
		opts.Value = new(big.Int)
		opts.Value.SetString(value, 0)
	}

	if gasPrice != "" {
		opts.GasPrice = new(big.Int)
		opts.GasPrice.SetString(gasPrice, 0)
	}

	if maxFeePerGas != "" {
		opts.GasFeeCap = new(big.Int)
		opts.GasFeeCap.SetString(maxFeePerGas, 0)
	}

	if maxPriorityFeePerGas != "" {
		opts.GasTipCap = new(big.Int)
		opts.GasTipCap.SetString(maxPriorityFeePerGas, 0)
	}

	if gasLimit != 0 {
		opts.GasLimit = gasLimit
	}

	opts.NoSend = noSend
}

func CreateL2ForwarderFactoryCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "l-2-forwarder-factory",
		Short: "Interact with the L2ForwarderFactory contract",
		Run: func(cmd *cobra.Command, args []string) {
			cmd.Help()
		},
	}

	cmd.SetOut(os.Stdout)

	DeployGroup := &cobra.Group{
		ID: "deploy", Title: "Commands which deploy contracts",
	}
	cmd.AddGroup(DeployGroup)
	ViewGroup := &cobra.Group{
		ID: "view", Title: "Commands which view contract state",
	}
	TransactGroup := &cobra.Group{
		ID: "transact", Title: "Commands which submit transactions",
	}
	cmd.AddGroup(ViewGroup, TransactGroup)

	cmdDeployL2ForwarderFactory := CreateL2ForwarderFactoryDeploymentCommand()
	cmdDeployL2ForwarderFactory.GroupID = DeployGroup.ID
	cmd.AddCommand(cmdDeployL2ForwarderFactory)

	cmdViewAliasedL1Teleporter := CreateAliasedL1TeleporterCommand()
	cmdViewAliasedL1Teleporter.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewAliasedL1Teleporter)
	cmdViewL2ForwarderAddress := CreateL2ForwarderAddressCommand()
	cmdViewL2ForwarderAddress.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewL2ForwarderAddress)
	cmdViewL2ForwarderFactory := CreateL2ForwarderFactoryCommand()
	cmdViewL2ForwarderFactory.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewL2ForwarderFactory)
	cmdViewL2ForwarderImplementation := CreateL2ForwarderImplementationCommand()
	cmdViewL2ForwarderImplementation.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewL2ForwarderImplementation)

	cmdTransactCallForwarder := CreateCallForwarderCommand()
	cmdTransactCallForwarder.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactCallForwarder)
	cmdTransactCreateL2Forwarder := CreateCreateL2ForwarderCommand()
	cmdTransactCreateL2Forwarder.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactCreateL2Forwarder)

	return cmd
}

