// This file was generated by seer: https://github.com/G7DAO/seer.
// seer version: 0.1.3
// seer command: seer evm generate --package ArbitrumL1OrbitCustomGateway --cli --struct L1OrbitCustomGateway
// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ArbitrumL1OrbitCustomGateway

import (
	"errors"
	"math/big"
	"strings"

	"context"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"

	// Reference imports to suppress errors if they are not otherwise used.
	"encoding/hex"
	"encoding/json"
	"fmt"
	"os"
	"time"

	"github.com/ethereum/go-ethereum/accounts/keystore"
	"github.com/ethereum/go-ethereum/ethclient"
	"github.com/spf13/cobra"
	"golang.org/x/term"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// L1OrbitCustomGatewayMetaData contains all meta data concerning the L1OrbitCustomGateway contract.
var L1OrbitCustomGatewayMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_sequenceNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"DepositInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"l1Address\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"l2Address\",\"type\":\"address\"}],\"name\":\"TokenSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_seqNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"TxToL2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"exitNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"newData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"madeExternalCall\",\"type\":\"bool\"}],\"name\":\"WithdrawRedirected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_exitNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawalFinalized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l1ERC20\",\"type\":\"address\"}],\"name\":\"calculateL2TokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counterpartGateway\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_exitNum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_initialDestination\",\"type\":\"address\"}],\"name\":\"encodeWithdrawal\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"finalizeInboundTransfer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"forceRegisterTokenToL2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_l1Addresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_l2Addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_maxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasPriceBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSubmissionCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeAmount\",\"type\":\"uint256\"}],\"name\":\"forceRegisterTokenToL2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_exitNum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_initialDestination\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_initialData\",\"type\":\"bytes\"}],\"name\":\"getExternalCall\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"getOutboundCalldata\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"outboundCalldata\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inbox\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1Counterpart\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l1Router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_inbox\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"l1ToL2Token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasPriceBid\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"outboundTransfer\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"res\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_refundTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasPriceBid\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"outboundTransferCustomRefund\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"res\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postUpgradeInit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"redirectedExits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExit\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_newTo\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_newData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2Address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasPriceBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSubmissionCost\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_creditBackAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feeAmount\",\"type\":\"uint256\"}],\"name\":\"registerTokenToL2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2Address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasPriceBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSubmissionCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeAmount\",\"type\":\"uint256\"}],\"name\":\"registerTokenToL2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"registerTokenToL2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"registerTokenToL2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_exitNum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_initialDestination\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newDestination\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_newData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferExitAndCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "",
}

// L1OrbitCustomGatewayABI is the input ABI used to generate the binding from.
// Deprecated: Use L1OrbitCustomGatewayMetaData.ABI instead.
var L1OrbitCustomGatewayABI = L1OrbitCustomGatewayMetaData.ABI

// L1OrbitCustomGatewayBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use L1OrbitCustomGatewayMetaData.Bin instead.
var L1OrbitCustomGatewayBin = L1OrbitCustomGatewayMetaData.Bin

// DeployL1OrbitCustomGateway deploys a new Ethereum contract, binding an instance of L1OrbitCustomGateway to it.
func DeployL1OrbitCustomGateway(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *L1OrbitCustomGateway, error) {
	parsed, err := L1OrbitCustomGatewayMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(L1OrbitCustomGatewayBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &L1OrbitCustomGateway{L1OrbitCustomGatewayCaller: L1OrbitCustomGatewayCaller{contract: contract}, L1OrbitCustomGatewayTransactor: L1OrbitCustomGatewayTransactor{contract: contract}, L1OrbitCustomGatewayFilterer: L1OrbitCustomGatewayFilterer{contract: contract}}, nil
}

// L1OrbitCustomGateway is an auto generated Go binding around an Ethereum contract.
type L1OrbitCustomGateway struct {
	L1OrbitCustomGatewayCaller     // Read-only binding to the contract
	L1OrbitCustomGatewayTransactor // Write-only binding to the contract
	L1OrbitCustomGatewayFilterer   // Log filterer for contract events
}

// L1OrbitCustomGatewayCaller is an auto generated read-only Go binding around an Ethereum contract.
type L1OrbitCustomGatewayCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// L1OrbitCustomGatewayTransactor is an auto generated write-only Go binding around an Ethereum contract.
type L1OrbitCustomGatewayTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// L1OrbitCustomGatewayFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type L1OrbitCustomGatewayFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// L1OrbitCustomGatewaySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type L1OrbitCustomGatewaySession struct {
	Contract     *L1OrbitCustomGateway // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// L1OrbitCustomGatewayCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type L1OrbitCustomGatewayCallerSession struct {
	Contract *L1OrbitCustomGatewayCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// L1OrbitCustomGatewayTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type L1OrbitCustomGatewayTransactorSession struct {
	Contract     *L1OrbitCustomGatewayTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// L1OrbitCustomGatewayRaw is an auto generated low-level Go binding around an Ethereum contract.
type L1OrbitCustomGatewayRaw struct {
	Contract *L1OrbitCustomGateway // Generic contract binding to access the raw methods on
}

// L1OrbitCustomGatewayCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type L1OrbitCustomGatewayCallerRaw struct {
	Contract *L1OrbitCustomGatewayCaller // Generic read-only contract binding to access the raw methods on
}

// L1OrbitCustomGatewayTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type L1OrbitCustomGatewayTransactorRaw struct {
	Contract *L1OrbitCustomGatewayTransactor // Generic write-only contract binding to access the raw methods on
}

// NewL1OrbitCustomGateway creates a new instance of L1OrbitCustomGateway, bound to a specific deployed contract.
func NewL1OrbitCustomGateway(address common.Address, backend bind.ContractBackend) (*L1OrbitCustomGateway, error) {
	contract, err := bindL1OrbitCustomGateway(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &L1OrbitCustomGateway{L1OrbitCustomGatewayCaller: L1OrbitCustomGatewayCaller{contract: contract}, L1OrbitCustomGatewayTransactor: L1OrbitCustomGatewayTransactor{contract: contract}, L1OrbitCustomGatewayFilterer: L1OrbitCustomGatewayFilterer{contract: contract}}, nil
}

// NewL1OrbitCustomGatewayCaller creates a new read-only instance of L1OrbitCustomGateway, bound to a specific deployed contract.
func NewL1OrbitCustomGatewayCaller(address common.Address, caller bind.ContractCaller) (*L1OrbitCustomGatewayCaller, error) {
	contract, err := bindL1OrbitCustomGateway(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &L1OrbitCustomGatewayCaller{contract: contract}, nil
}

// NewL1OrbitCustomGatewayTransactor creates a new write-only instance of L1OrbitCustomGateway, bound to a specific deployed contract.
func NewL1OrbitCustomGatewayTransactor(address common.Address, transactor bind.ContractTransactor) (*L1OrbitCustomGatewayTransactor, error) {
	contract, err := bindL1OrbitCustomGateway(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &L1OrbitCustomGatewayTransactor{contract: contract}, nil
}

// NewL1OrbitCustomGatewayFilterer creates a new log filterer instance of L1OrbitCustomGateway, bound to a specific deployed contract.
func NewL1OrbitCustomGatewayFilterer(address common.Address, filterer bind.ContractFilterer) (*L1OrbitCustomGatewayFilterer, error) {
	contract, err := bindL1OrbitCustomGateway(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &L1OrbitCustomGatewayFilterer{contract: contract}, nil
}

// bindL1OrbitCustomGateway binds a generic wrapper to an already deployed contract.
func bindL1OrbitCustomGateway(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := L1OrbitCustomGatewayMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _L1OrbitCustomGateway.Contract.L1OrbitCustomGatewayCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _L1OrbitCustomGateway.Contract.L1OrbitCustomGatewayTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _L1OrbitCustomGateway.Contract.L1OrbitCustomGatewayTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _L1OrbitCustomGateway.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _L1OrbitCustomGateway.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _L1OrbitCustomGateway.Contract.contract.Transact(opts, method, params...)
}

// CalculateL2TokenAddress is a free data retrieval call binding the contract method 0xa7e28d48.
//
// Solidity: function calculateL2TokenAddress(address l1ERC20) view returns(address)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayCaller) CalculateL2TokenAddress(opts *bind.CallOpts, l1ERC20 common.Address) (common.Address, error) {
	var out []interface{}
	err := _L1OrbitCustomGateway.contract.Call(opts, &out, "calculateL2TokenAddress", l1ERC20)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// CalculateL2TokenAddress is a free data retrieval call binding the contract method 0xa7e28d48.
//
// Solidity: function calculateL2TokenAddress(address l1ERC20) view returns(address)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewaySession) CalculateL2TokenAddress(l1ERC20 common.Address) (common.Address, error) {
	return _L1OrbitCustomGateway.Contract.CalculateL2TokenAddress(&_L1OrbitCustomGateway.CallOpts, l1ERC20)
}

// CalculateL2TokenAddress is a free data retrieval call binding the contract method 0xa7e28d48.
//
// Solidity: function calculateL2TokenAddress(address l1ERC20) view returns(address)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayCallerSession) CalculateL2TokenAddress(l1ERC20 common.Address) (common.Address, error) {
	return _L1OrbitCustomGateway.Contract.CalculateL2TokenAddress(&_L1OrbitCustomGateway.CallOpts, l1ERC20)
}

// CounterpartGateway is a free data retrieval call binding the contract method 0x2db09c1c.
//
// Solidity: function counterpartGateway() view returns(address)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayCaller) CounterpartGateway(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _L1OrbitCustomGateway.contract.Call(opts, &out, "counterpartGateway")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// CounterpartGateway is a free data retrieval call binding the contract method 0x2db09c1c.
//
// Solidity: function counterpartGateway() view returns(address)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewaySession) CounterpartGateway() (common.Address, error) {
	return _L1OrbitCustomGateway.Contract.CounterpartGateway(&_L1OrbitCustomGateway.CallOpts)
}

// CounterpartGateway is a free data retrieval call binding the contract method 0x2db09c1c.
//
// Solidity: function counterpartGateway() view returns(address)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayCallerSession) CounterpartGateway() (common.Address, error) {
	return _L1OrbitCustomGateway.Contract.CounterpartGateway(&_L1OrbitCustomGateway.CallOpts)
}

// EncodeWithdrawal is a free data retrieval call binding the contract method 0x020a6058.
//
// Solidity: function encodeWithdrawal(uint256 _exitNum, address _initialDestination) pure returns(bytes32)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayCaller) EncodeWithdrawal(opts *bind.CallOpts, _exitNum *big.Int, _initialDestination common.Address) ([32]byte, error) {
	var out []interface{}
	err := _L1OrbitCustomGateway.contract.Call(opts, &out, "encodeWithdrawal", _exitNum, _initialDestination)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// EncodeWithdrawal is a free data retrieval call binding the contract method 0x020a6058.
//
// Solidity: function encodeWithdrawal(uint256 _exitNum, address _initialDestination) pure returns(bytes32)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewaySession) EncodeWithdrawal(_exitNum *big.Int, _initialDestination common.Address) ([32]byte, error) {
	return _L1OrbitCustomGateway.Contract.EncodeWithdrawal(&_L1OrbitCustomGateway.CallOpts, _exitNum, _initialDestination)
}

// EncodeWithdrawal is a free data retrieval call binding the contract method 0x020a6058.
//
// Solidity: function encodeWithdrawal(uint256 _exitNum, address _initialDestination) pure returns(bytes32)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayCallerSession) EncodeWithdrawal(_exitNum *big.Int, _initialDestination common.Address) ([32]byte, error) {
	return _L1OrbitCustomGateway.Contract.EncodeWithdrawal(&_L1OrbitCustomGateway.CallOpts, _exitNum, _initialDestination)
}

// GetExternalCall is a free data retrieval call binding the contract method 0xf68a9082.
//
// Solidity: function getExternalCall(uint256 _exitNum, address _initialDestination, bytes _initialData) view returns(address target, bytes data)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayCaller) GetExternalCall(opts *bind.CallOpts, _exitNum *big.Int, _initialDestination common.Address, _initialData []byte) (struct {
	Target common.Address
	Data   []byte
}, error) {
	var out []interface{}
	err := _L1OrbitCustomGateway.contract.Call(opts, &out, "getExternalCall", _exitNum, _initialDestination, _initialData)

	outstruct := new(struct {
		Target common.Address
		Data   []byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Target = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.Data = *abi.ConvertType(out[1], new([]byte)).(*[]byte)

	return *outstruct, err

}

// GetExternalCall is a free data retrieval call binding the contract method 0xf68a9082.
//
// Solidity: function getExternalCall(uint256 _exitNum, address _initialDestination, bytes _initialData) view returns(address target, bytes data)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewaySession) GetExternalCall(_exitNum *big.Int, _initialDestination common.Address, _initialData []byte) (struct {
	Target common.Address
	Data   []byte
}, error) {
	return _L1OrbitCustomGateway.Contract.GetExternalCall(&_L1OrbitCustomGateway.CallOpts, _exitNum, _initialDestination, _initialData)
}

// GetExternalCall is a free data retrieval call binding the contract method 0xf68a9082.
//
// Solidity: function getExternalCall(uint256 _exitNum, address _initialDestination, bytes _initialData) view returns(address target, bytes data)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayCallerSession) GetExternalCall(_exitNum *big.Int, _initialDestination common.Address, _initialData []byte) (struct {
	Target common.Address
	Data   []byte
}, error) {
	return _L1OrbitCustomGateway.Contract.GetExternalCall(&_L1OrbitCustomGateway.CallOpts, _exitNum, _initialDestination, _initialData)
}

// GetOutboundCalldata is a free data retrieval call binding the contract method 0xa0c76a96.
//
// Solidity: function getOutboundCalldata(address _l1Token, address _from, address _to, uint256 _amount, bytes _data) view returns(bytes outboundCalldata)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayCaller) GetOutboundCalldata(opts *bind.CallOpts, _l1Token common.Address, _from common.Address, _to common.Address, _amount *big.Int, _data []byte) ([]byte, error) {
	var out []interface{}
	err := _L1OrbitCustomGateway.contract.Call(opts, &out, "getOutboundCalldata", _l1Token, _from, _to, _amount, _data)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GetOutboundCalldata is a free data retrieval call binding the contract method 0xa0c76a96.
//
// Solidity: function getOutboundCalldata(address _l1Token, address _from, address _to, uint256 _amount, bytes _data) view returns(bytes outboundCalldata)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewaySession) GetOutboundCalldata(_l1Token common.Address, _from common.Address, _to common.Address, _amount *big.Int, _data []byte) ([]byte, error) {
	return _L1OrbitCustomGateway.Contract.GetOutboundCalldata(&_L1OrbitCustomGateway.CallOpts, _l1Token, _from, _to, _amount, _data)
}

// GetOutboundCalldata is a free data retrieval call binding the contract method 0xa0c76a96.
//
// Solidity: function getOutboundCalldata(address _l1Token, address _from, address _to, uint256 _amount, bytes _data) view returns(bytes outboundCalldata)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayCallerSession) GetOutboundCalldata(_l1Token common.Address, _from common.Address, _to common.Address, _amount *big.Int, _data []byte) ([]byte, error) {
	return _L1OrbitCustomGateway.Contract.GetOutboundCalldata(&_L1OrbitCustomGateway.CallOpts, _l1Token, _from, _to, _amount, _data)
}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayCaller) Inbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _L1OrbitCustomGateway.contract.Call(opts, &out, "inbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewaySession) Inbox() (common.Address, error) {
	return _L1OrbitCustomGateway.Contract.Inbox(&_L1OrbitCustomGateway.CallOpts)
}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayCallerSession) Inbox() (common.Address, error) {
	return _L1OrbitCustomGateway.Contract.Inbox(&_L1OrbitCustomGateway.CallOpts)
}

// L1ToL2Token is a free data retrieval call binding the contract method 0x8a2dc014.
//
// Solidity: function l1ToL2Token(address ) view returns(address)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayCaller) L1ToL2Token(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var out []interface{}
	err := _L1OrbitCustomGateway.contract.Call(opts, &out, "l1ToL2Token", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// L1ToL2Token is a free data retrieval call binding the contract method 0x8a2dc014.
//
// Solidity: function l1ToL2Token(address ) view returns(address)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewaySession) L1ToL2Token(arg0 common.Address) (common.Address, error) {
	return _L1OrbitCustomGateway.Contract.L1ToL2Token(&_L1OrbitCustomGateway.CallOpts, arg0)
}

// L1ToL2Token is a free data retrieval call binding the contract method 0x8a2dc014.
//
// Solidity: function l1ToL2Token(address ) view returns(address)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayCallerSession) L1ToL2Token(arg0 common.Address) (common.Address, error) {
	return _L1OrbitCustomGateway.Contract.L1ToL2Token(&_L1OrbitCustomGateway.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _L1OrbitCustomGateway.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewaySession) Owner() (common.Address, error) {
	return _L1OrbitCustomGateway.Contract.Owner(&_L1OrbitCustomGateway.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayCallerSession) Owner() (common.Address, error) {
	return _L1OrbitCustomGateway.Contract.Owner(&_L1OrbitCustomGateway.CallOpts)
}

// RedirectedExits is a free data retrieval call binding the contract method 0xbcf2e6eb.
//
// Solidity: function redirectedExits(bytes32 ) view returns(bool isExit, address _newTo, bytes _newData)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayCaller) RedirectedExits(opts *bind.CallOpts, arg0 [32]byte) (struct {
	IsExit  bool
	NewTo   common.Address
	NewData []byte
}, error) {
	var out []interface{}
	err := _L1OrbitCustomGateway.contract.Call(opts, &out, "redirectedExits", arg0)

	outstruct := new(struct {
		IsExit  bool
		NewTo   common.Address
		NewData []byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.IsExit = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.NewTo = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.NewData = *abi.ConvertType(out[2], new([]byte)).(*[]byte)

	return *outstruct, err

}

// RedirectedExits is a free data retrieval call binding the contract method 0xbcf2e6eb.
//
// Solidity: function redirectedExits(bytes32 ) view returns(bool isExit, address _newTo, bytes _newData)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewaySession) RedirectedExits(arg0 [32]byte) (struct {
	IsExit  bool
	NewTo   common.Address
	NewData []byte
}, error) {
	return _L1OrbitCustomGateway.Contract.RedirectedExits(&_L1OrbitCustomGateway.CallOpts, arg0)
}

// RedirectedExits is a free data retrieval call binding the contract method 0xbcf2e6eb.
//
// Solidity: function redirectedExits(bytes32 ) view returns(bool isExit, address _newTo, bytes _newData)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayCallerSession) RedirectedExits(arg0 [32]byte) (struct {
	IsExit  bool
	NewTo   common.Address
	NewData []byte
}, error) {
	return _L1OrbitCustomGateway.Contract.RedirectedExits(&_L1OrbitCustomGateway.CallOpts, arg0)
}

// Router is a free data retrieval call binding the contract method 0xf887ea40.
//
// Solidity: function router() view returns(address)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayCaller) Router(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _L1OrbitCustomGateway.contract.Call(opts, &out, "router")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Router is a free data retrieval call binding the contract method 0xf887ea40.
//
// Solidity: function router() view returns(address)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewaySession) Router() (common.Address, error) {
	return _L1OrbitCustomGateway.Contract.Router(&_L1OrbitCustomGateway.CallOpts)
}

// Router is a free data retrieval call binding the contract method 0xf887ea40.
//
// Solidity: function router() view returns(address)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayCallerSession) Router() (common.Address, error) {
	return _L1OrbitCustomGateway.Contract.Router(&_L1OrbitCustomGateway.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _L1OrbitCustomGateway.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewaySession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _L1OrbitCustomGateway.Contract.SupportsInterface(&_L1OrbitCustomGateway.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _L1OrbitCustomGateway.Contract.SupportsInterface(&_L1OrbitCustomGateway.CallOpts, interfaceId)
}

// Whitelist is a free data retrieval call binding the contract method 0x93e59dc1.
//
// Solidity: function whitelist() view returns(address)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayCaller) Whitelist(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _L1OrbitCustomGateway.contract.Call(opts, &out, "whitelist")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Whitelist is a free data retrieval call binding the contract method 0x93e59dc1.
//
// Solidity: function whitelist() view returns(address)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewaySession) Whitelist() (common.Address, error) {
	return _L1OrbitCustomGateway.Contract.Whitelist(&_L1OrbitCustomGateway.CallOpts)
}

// Whitelist is a free data retrieval call binding the contract method 0x93e59dc1.
//
// Solidity: function whitelist() view returns(address)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayCallerSession) Whitelist() (common.Address, error) {
	return _L1OrbitCustomGateway.Contract.Whitelist(&_L1OrbitCustomGateway.CallOpts)
}

// FinalizeInboundTransfer is a paid mutator transaction binding the contract method 0x2e567b36.
//
// Solidity: function finalizeInboundTransfer(address _token, address _from, address _to, uint256 _amount, bytes _data) payable returns()
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayTransactor) FinalizeInboundTransfer(opts *bind.TransactOpts, _token common.Address, _from common.Address, _to common.Address, _amount *big.Int, _data []byte) (*types.Transaction, error) {
	return _L1OrbitCustomGateway.contract.Transact(opts, "finalizeInboundTransfer", _token, _from, _to, _amount, _data)
}

// FinalizeInboundTransfer is a paid mutator transaction binding the contract method 0x2e567b36.
//
// Solidity: function finalizeInboundTransfer(address _token, address _from, address _to, uint256 _amount, bytes _data) payable returns()
func (_L1OrbitCustomGateway *L1OrbitCustomGatewaySession) FinalizeInboundTransfer(_token common.Address, _from common.Address, _to common.Address, _amount *big.Int, _data []byte) (*types.Transaction, error) {
	return _L1OrbitCustomGateway.Contract.FinalizeInboundTransfer(&_L1OrbitCustomGateway.TransactOpts, _token, _from, _to, _amount, _data)
}

// FinalizeInboundTransfer is a paid mutator transaction binding the contract method 0x2e567b36.
//
// Solidity: function finalizeInboundTransfer(address _token, address _from, address _to, uint256 _amount, bytes _data) payable returns()
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayTransactorSession) FinalizeInboundTransfer(_token common.Address, _from common.Address, _to common.Address, _amount *big.Int, _data []byte) (*types.Transaction, error) {
	return _L1OrbitCustomGateway.Contract.FinalizeInboundTransfer(&_L1OrbitCustomGateway.TransactOpts, _token, _from, _to, _amount, _data)
}

// ForceRegisterTokenToL2 is a paid mutator transaction binding the contract method 0x1d3a689f.
//
// Solidity: function forceRegisterTokenToL2(address[] , address[] , uint256 , uint256 , uint256 ) payable returns(uint256)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayTransactor) ForceRegisterTokenToL2(opts *bind.TransactOpts, arg0 []common.Address, arg1 []common.Address, arg2 *big.Int, arg3 *big.Int, arg4 *big.Int) (*types.Transaction, error) {
	return _L1OrbitCustomGateway.contract.Transact(opts, "forceRegisterTokenToL2", arg0, arg1, arg2, arg3, arg4)
}

// ForceRegisterTokenToL2 is a paid mutator transaction binding the contract method 0x1d3a689f.
//
// Solidity: function forceRegisterTokenToL2(address[] , address[] , uint256 , uint256 , uint256 ) payable returns(uint256)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewaySession) ForceRegisterTokenToL2(arg0 []common.Address, arg1 []common.Address, arg2 *big.Int, arg3 *big.Int, arg4 *big.Int) (*types.Transaction, error) {
	return _L1OrbitCustomGateway.Contract.ForceRegisterTokenToL2(&_L1OrbitCustomGateway.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// ForceRegisterTokenToL2 is a paid mutator transaction binding the contract method 0x1d3a689f.
//
// Solidity: function forceRegisterTokenToL2(address[] , address[] , uint256 , uint256 , uint256 ) payable returns(uint256)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayTransactorSession) ForceRegisterTokenToL2(arg0 []common.Address, arg1 []common.Address, arg2 *big.Int, arg3 *big.Int, arg4 *big.Int) (*types.Transaction, error) {
	return _L1OrbitCustomGateway.Contract.ForceRegisterTokenToL2(&_L1OrbitCustomGateway.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// ForceRegisterTokenToL20 is a paid mutator transaction binding the contract method 0x85f25597.
//
// Solidity: function forceRegisterTokenToL2(address[] _l1Addresses, address[] _l2Addresses, uint256 _maxGas, uint256 _gasPriceBid, uint256 _maxSubmissionCost, uint256 _feeAmount) returns(uint256)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayTransactor) ForceRegisterTokenToL20(opts *bind.TransactOpts, _l1Addresses []common.Address, _l2Addresses []common.Address, _maxGas *big.Int, _gasPriceBid *big.Int, _maxSubmissionCost *big.Int, _feeAmount *big.Int) (*types.Transaction, error) {
	return _L1OrbitCustomGateway.contract.Transact(opts, "forceRegisterTokenToL20", _l1Addresses, _l2Addresses, _maxGas, _gasPriceBid, _maxSubmissionCost, _feeAmount)
}

// ForceRegisterTokenToL20 is a paid mutator transaction binding the contract method 0x85f25597.
//
// Solidity: function forceRegisterTokenToL2(address[] _l1Addresses, address[] _l2Addresses, uint256 _maxGas, uint256 _gasPriceBid, uint256 _maxSubmissionCost, uint256 _feeAmount) returns(uint256)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewaySession) ForceRegisterTokenToL20(_l1Addresses []common.Address, _l2Addresses []common.Address, _maxGas *big.Int, _gasPriceBid *big.Int, _maxSubmissionCost *big.Int, _feeAmount *big.Int) (*types.Transaction, error) {
	return _L1OrbitCustomGateway.Contract.ForceRegisterTokenToL20(&_L1OrbitCustomGateway.TransactOpts, _l1Addresses, _l2Addresses, _maxGas, _gasPriceBid, _maxSubmissionCost, _feeAmount)
}

// ForceRegisterTokenToL20 is a paid mutator transaction binding the contract method 0x85f25597.
//
// Solidity: function forceRegisterTokenToL2(address[] _l1Addresses, address[] _l2Addresses, uint256 _maxGas, uint256 _gasPriceBid, uint256 _maxSubmissionCost, uint256 _feeAmount) returns(uint256)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayTransactorSession) ForceRegisterTokenToL20(_l1Addresses []common.Address, _l2Addresses []common.Address, _maxGas *big.Int, _gasPriceBid *big.Int, _maxSubmissionCost *big.Int, _feeAmount *big.Int) (*types.Transaction, error) {
	return _L1OrbitCustomGateway.Contract.ForceRegisterTokenToL20(&_L1OrbitCustomGateway.TransactOpts, _l1Addresses, _l2Addresses, _maxGas, _gasPriceBid, _maxSubmissionCost, _feeAmount)
}

// Initialize is a paid mutator transaction binding the contract method 0xf8c8765e.
//
// Solidity: function initialize(address _l1Counterpart, address _l1Router, address _inbox, address _owner) returns()
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayTransactor) Initialize(opts *bind.TransactOpts, _l1Counterpart common.Address, _l1Router common.Address, _inbox common.Address, _owner common.Address) (*types.Transaction, error) {
	return _L1OrbitCustomGateway.contract.Transact(opts, "initialize", _l1Counterpart, _l1Router, _inbox, _owner)
}

// Initialize is a paid mutator transaction binding the contract method 0xf8c8765e.
//
// Solidity: function initialize(address _l1Counterpart, address _l1Router, address _inbox, address _owner) returns()
func (_L1OrbitCustomGateway *L1OrbitCustomGatewaySession) Initialize(_l1Counterpart common.Address, _l1Router common.Address, _inbox common.Address, _owner common.Address) (*types.Transaction, error) {
	return _L1OrbitCustomGateway.Contract.Initialize(&_L1OrbitCustomGateway.TransactOpts, _l1Counterpart, _l1Router, _inbox, _owner)
}

// Initialize is a paid mutator transaction binding the contract method 0xf8c8765e.
//
// Solidity: function initialize(address _l1Counterpart, address _l1Router, address _inbox, address _owner) returns()
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayTransactorSession) Initialize(_l1Counterpart common.Address, _l1Router common.Address, _inbox common.Address, _owner common.Address) (*types.Transaction, error) {
	return _L1OrbitCustomGateway.Contract.Initialize(&_L1OrbitCustomGateway.TransactOpts, _l1Counterpart, _l1Router, _inbox, _owner)
}

// OutboundTransfer is a paid mutator transaction binding the contract method 0xd2ce7d65.
//
// Solidity: function outboundTransfer(address _l1Token, address _to, uint256 _amount, uint256 _maxGas, uint256 _gasPriceBid, bytes _data) payable returns(bytes res)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayTransactor) OutboundTransfer(opts *bind.TransactOpts, _l1Token common.Address, _to common.Address, _amount *big.Int, _maxGas *big.Int, _gasPriceBid *big.Int, _data []byte) (*types.Transaction, error) {
	return _L1OrbitCustomGateway.contract.Transact(opts, "outboundTransfer", _l1Token, _to, _amount, _maxGas, _gasPriceBid, _data)
}

// OutboundTransfer is a paid mutator transaction binding the contract method 0xd2ce7d65.
//
// Solidity: function outboundTransfer(address _l1Token, address _to, uint256 _amount, uint256 _maxGas, uint256 _gasPriceBid, bytes _data) payable returns(bytes res)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewaySession) OutboundTransfer(_l1Token common.Address, _to common.Address, _amount *big.Int, _maxGas *big.Int, _gasPriceBid *big.Int, _data []byte) (*types.Transaction, error) {
	return _L1OrbitCustomGateway.Contract.OutboundTransfer(&_L1OrbitCustomGateway.TransactOpts, _l1Token, _to, _amount, _maxGas, _gasPriceBid, _data)
}

// OutboundTransfer is a paid mutator transaction binding the contract method 0xd2ce7d65.
//
// Solidity: function outboundTransfer(address _l1Token, address _to, uint256 _amount, uint256 _maxGas, uint256 _gasPriceBid, bytes _data) payable returns(bytes res)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayTransactorSession) OutboundTransfer(_l1Token common.Address, _to common.Address, _amount *big.Int, _maxGas *big.Int, _gasPriceBid *big.Int, _data []byte) (*types.Transaction, error) {
	return _L1OrbitCustomGateway.Contract.OutboundTransfer(&_L1OrbitCustomGateway.TransactOpts, _l1Token, _to, _amount, _maxGas, _gasPriceBid, _data)
}

// OutboundTransferCustomRefund is a paid mutator transaction binding the contract method 0x4fb1a07b.
//
// Solidity: function outboundTransferCustomRefund(address _l1Token, address _refundTo, address _to, uint256 _amount, uint256 _maxGas, uint256 _gasPriceBid, bytes _data) payable returns(bytes res)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayTransactor) OutboundTransferCustomRefund(opts *bind.TransactOpts, _l1Token common.Address, _refundTo common.Address, _to common.Address, _amount *big.Int, _maxGas *big.Int, _gasPriceBid *big.Int, _data []byte) (*types.Transaction, error) {
	return _L1OrbitCustomGateway.contract.Transact(opts, "outboundTransferCustomRefund", _l1Token, _refundTo, _to, _amount, _maxGas, _gasPriceBid, _data)
}

// OutboundTransferCustomRefund is a paid mutator transaction binding the contract method 0x4fb1a07b.
//
// Solidity: function outboundTransferCustomRefund(address _l1Token, address _refundTo, address _to, uint256 _amount, uint256 _maxGas, uint256 _gasPriceBid, bytes _data) payable returns(bytes res)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewaySession) OutboundTransferCustomRefund(_l1Token common.Address, _refundTo common.Address, _to common.Address, _amount *big.Int, _maxGas *big.Int, _gasPriceBid *big.Int, _data []byte) (*types.Transaction, error) {
	return _L1OrbitCustomGateway.Contract.OutboundTransferCustomRefund(&_L1OrbitCustomGateway.TransactOpts, _l1Token, _refundTo, _to, _amount, _maxGas, _gasPriceBid, _data)
}

// OutboundTransferCustomRefund is a paid mutator transaction binding the contract method 0x4fb1a07b.
//
// Solidity: function outboundTransferCustomRefund(address _l1Token, address _refundTo, address _to, uint256 _amount, uint256 _maxGas, uint256 _gasPriceBid, bytes _data) payable returns(bytes res)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayTransactorSession) OutboundTransferCustomRefund(_l1Token common.Address, _refundTo common.Address, _to common.Address, _amount *big.Int, _maxGas *big.Int, _gasPriceBid *big.Int, _data []byte) (*types.Transaction, error) {
	return _L1OrbitCustomGateway.Contract.OutboundTransferCustomRefund(&_L1OrbitCustomGateway.TransactOpts, _l1Token, _refundTo, _to, _amount, _maxGas, _gasPriceBid, _data)
}

// PostUpgradeInit is a paid mutator transaction binding the contract method 0x95fcea78.
//
// Solidity: function postUpgradeInit() returns()
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayTransactor) PostUpgradeInit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _L1OrbitCustomGateway.contract.Transact(opts, "postUpgradeInit")
}

// PostUpgradeInit is a paid mutator transaction binding the contract method 0x95fcea78.
//
// Solidity: function postUpgradeInit() returns()
func (_L1OrbitCustomGateway *L1OrbitCustomGatewaySession) PostUpgradeInit() (*types.Transaction, error) {
	return _L1OrbitCustomGateway.Contract.PostUpgradeInit(&_L1OrbitCustomGateway.TransactOpts)
}

// PostUpgradeInit is a paid mutator transaction binding the contract method 0x95fcea78.
//
// Solidity: function postUpgradeInit() returns()
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayTransactorSession) PostUpgradeInit() (*types.Transaction, error) {
	return _L1OrbitCustomGateway.Contract.PostUpgradeInit(&_L1OrbitCustomGateway.TransactOpts)
}

// RegisterTokenToL2 is a paid mutator transaction binding the contract method 0x37daacad.
//
// Solidity: function registerTokenToL2(address _l2Address, uint256 _maxGas, uint256 _gasPriceBid, uint256 _maxSubmissionCost, address _creditBackAddress, uint256 _feeAmount) returns(uint256)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayTransactor) RegisterTokenToL2(opts *bind.TransactOpts, _l2Address common.Address, _maxGas *big.Int, _gasPriceBid *big.Int, _maxSubmissionCost *big.Int, _creditBackAddress common.Address, _feeAmount *big.Int) (*types.Transaction, error) {
	return _L1OrbitCustomGateway.contract.Transact(opts, "registerTokenToL2", _l2Address, _maxGas, _gasPriceBid, _maxSubmissionCost, _creditBackAddress, _feeAmount)
}

// RegisterTokenToL2 is a paid mutator transaction binding the contract method 0x37daacad.
//
// Solidity: function registerTokenToL2(address _l2Address, uint256 _maxGas, uint256 _gasPriceBid, uint256 _maxSubmissionCost, address _creditBackAddress, uint256 _feeAmount) returns(uint256)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewaySession) RegisterTokenToL2(_l2Address common.Address, _maxGas *big.Int, _gasPriceBid *big.Int, _maxSubmissionCost *big.Int, _creditBackAddress common.Address, _feeAmount *big.Int) (*types.Transaction, error) {
	return _L1OrbitCustomGateway.Contract.RegisterTokenToL2(&_L1OrbitCustomGateway.TransactOpts, _l2Address, _maxGas, _gasPriceBid, _maxSubmissionCost, _creditBackAddress, _feeAmount)
}

// RegisterTokenToL2 is a paid mutator transaction binding the contract method 0x37daacad.
//
// Solidity: function registerTokenToL2(address _l2Address, uint256 _maxGas, uint256 _gasPriceBid, uint256 _maxSubmissionCost, address _creditBackAddress, uint256 _feeAmount) returns(uint256)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayTransactorSession) RegisterTokenToL2(_l2Address common.Address, _maxGas *big.Int, _gasPriceBid *big.Int, _maxSubmissionCost *big.Int, _creditBackAddress common.Address, _feeAmount *big.Int) (*types.Transaction, error) {
	return _L1OrbitCustomGateway.Contract.RegisterTokenToL2(&_L1OrbitCustomGateway.TransactOpts, _l2Address, _maxGas, _gasPriceBid, _maxSubmissionCost, _creditBackAddress, _feeAmount)
}

// RegisterTokenToL20 is a paid mutator transaction binding the contract method 0x3e8ee3df.
//
// Solidity: function registerTokenToL2(address _l2Address, uint256 _maxGas, uint256 _gasPriceBid, uint256 _maxSubmissionCost, uint256 _feeAmount) returns(uint256)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayTransactor) RegisterTokenToL20(opts *bind.TransactOpts, _l2Address common.Address, _maxGas *big.Int, _gasPriceBid *big.Int, _maxSubmissionCost *big.Int, _feeAmount *big.Int) (*types.Transaction, error) {
	return _L1OrbitCustomGateway.contract.Transact(opts, "registerTokenToL20", _l2Address, _maxGas, _gasPriceBid, _maxSubmissionCost, _feeAmount)
}

// RegisterTokenToL20 is a paid mutator transaction binding the contract method 0x3e8ee3df.
//
// Solidity: function registerTokenToL2(address _l2Address, uint256 _maxGas, uint256 _gasPriceBid, uint256 _maxSubmissionCost, uint256 _feeAmount) returns(uint256)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewaySession) RegisterTokenToL20(_l2Address common.Address, _maxGas *big.Int, _gasPriceBid *big.Int, _maxSubmissionCost *big.Int, _feeAmount *big.Int) (*types.Transaction, error) {
	return _L1OrbitCustomGateway.Contract.RegisterTokenToL20(&_L1OrbitCustomGateway.TransactOpts, _l2Address, _maxGas, _gasPriceBid, _maxSubmissionCost, _feeAmount)
}

// RegisterTokenToL20 is a paid mutator transaction binding the contract method 0x3e8ee3df.
//
// Solidity: function registerTokenToL2(address _l2Address, uint256 _maxGas, uint256 _gasPriceBid, uint256 _maxSubmissionCost, uint256 _feeAmount) returns(uint256)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayTransactorSession) RegisterTokenToL20(_l2Address common.Address, _maxGas *big.Int, _gasPriceBid *big.Int, _maxSubmissionCost *big.Int, _feeAmount *big.Int) (*types.Transaction, error) {
	return _L1OrbitCustomGateway.Contract.RegisterTokenToL20(&_L1OrbitCustomGateway.TransactOpts, _l2Address, _maxGas, _gasPriceBid, _maxSubmissionCost, _feeAmount)
}

// RegisterTokenToL21 is a paid mutator transaction binding the contract method 0xca346d4a.
//
// Solidity: function registerTokenToL2(address , uint256 , uint256 , uint256 , address ) payable returns(uint256)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayTransactor) RegisterTokenToL21(opts *bind.TransactOpts, arg0 common.Address, arg1 *big.Int, arg2 *big.Int, arg3 *big.Int, arg4 common.Address) (*types.Transaction, error) {
	return _L1OrbitCustomGateway.contract.Transact(opts, "registerTokenToL21", arg0, arg1, arg2, arg3, arg4)
}

// RegisterTokenToL21 is a paid mutator transaction binding the contract method 0xca346d4a.
//
// Solidity: function registerTokenToL2(address , uint256 , uint256 , uint256 , address ) payable returns(uint256)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewaySession) RegisterTokenToL21(arg0 common.Address, arg1 *big.Int, arg2 *big.Int, arg3 *big.Int, arg4 common.Address) (*types.Transaction, error) {
	return _L1OrbitCustomGateway.Contract.RegisterTokenToL21(&_L1OrbitCustomGateway.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// RegisterTokenToL21 is a paid mutator transaction binding the contract method 0xca346d4a.
//
// Solidity: function registerTokenToL2(address , uint256 , uint256 , uint256 , address ) payable returns(uint256)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayTransactorSession) RegisterTokenToL21(arg0 common.Address, arg1 *big.Int, arg2 *big.Int, arg3 *big.Int, arg4 common.Address) (*types.Transaction, error) {
	return _L1OrbitCustomGateway.Contract.RegisterTokenToL21(&_L1OrbitCustomGateway.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// RegisterTokenToL22 is a paid mutator transaction binding the contract method 0xf26bdead.
//
// Solidity: function registerTokenToL2(address , uint256 , uint256 , uint256 ) payable returns(uint256)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayTransactor) RegisterTokenToL22(opts *bind.TransactOpts, arg0 common.Address, arg1 *big.Int, arg2 *big.Int, arg3 *big.Int) (*types.Transaction, error) {
	return _L1OrbitCustomGateway.contract.Transact(opts, "registerTokenToL22", arg0, arg1, arg2, arg3)
}

// RegisterTokenToL22 is a paid mutator transaction binding the contract method 0xf26bdead.
//
// Solidity: function registerTokenToL2(address , uint256 , uint256 , uint256 ) payable returns(uint256)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewaySession) RegisterTokenToL22(arg0 common.Address, arg1 *big.Int, arg2 *big.Int, arg3 *big.Int) (*types.Transaction, error) {
	return _L1OrbitCustomGateway.Contract.RegisterTokenToL22(&_L1OrbitCustomGateway.TransactOpts, arg0, arg1, arg2, arg3)
}

// RegisterTokenToL22 is a paid mutator transaction binding the contract method 0xf26bdead.
//
// Solidity: function registerTokenToL2(address , uint256 , uint256 , uint256 ) payable returns(uint256)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayTransactorSession) RegisterTokenToL22(arg0 common.Address, arg1 *big.Int, arg2 *big.Int, arg3 *big.Int) (*types.Transaction, error) {
	return _L1OrbitCustomGateway.Contract.RegisterTokenToL22(&_L1OrbitCustomGateway.TransactOpts, arg0, arg1, arg2, arg3)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address newOwner) returns()
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayTransactor) SetOwner(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _L1OrbitCustomGateway.contract.Transact(opts, "setOwner", newOwner)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address newOwner) returns()
func (_L1OrbitCustomGateway *L1OrbitCustomGatewaySession) SetOwner(newOwner common.Address) (*types.Transaction, error) {
	return _L1OrbitCustomGateway.Contract.SetOwner(&_L1OrbitCustomGateway.TransactOpts, newOwner)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address newOwner) returns()
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayTransactorSession) SetOwner(newOwner common.Address) (*types.Transaction, error) {
	return _L1OrbitCustomGateway.Contract.SetOwner(&_L1OrbitCustomGateway.TransactOpts, newOwner)
}

// TransferExitAndCall is a paid mutator transaction binding the contract method 0xbd5f3e7d.
//
// Solidity: function transferExitAndCall(uint256 _exitNum, address _initialDestination, address _newDestination, bytes _newData, bytes _data) returns()
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayTransactor) TransferExitAndCall(opts *bind.TransactOpts, _exitNum *big.Int, _initialDestination common.Address, _newDestination common.Address, _newData []byte, _data []byte) (*types.Transaction, error) {
	return _L1OrbitCustomGateway.contract.Transact(opts, "transferExitAndCall", _exitNum, _initialDestination, _newDestination, _newData, _data)
}

// TransferExitAndCall is a paid mutator transaction binding the contract method 0xbd5f3e7d.
//
// Solidity: function transferExitAndCall(uint256 _exitNum, address _initialDestination, address _newDestination, bytes _newData, bytes _data) returns()
func (_L1OrbitCustomGateway *L1OrbitCustomGatewaySession) TransferExitAndCall(_exitNum *big.Int, _initialDestination common.Address, _newDestination common.Address, _newData []byte, _data []byte) (*types.Transaction, error) {
	return _L1OrbitCustomGateway.Contract.TransferExitAndCall(&_L1OrbitCustomGateway.TransactOpts, _exitNum, _initialDestination, _newDestination, _newData, _data)
}

// TransferExitAndCall is a paid mutator transaction binding the contract method 0xbd5f3e7d.
//
// Solidity: function transferExitAndCall(uint256 _exitNum, address _initialDestination, address _newDestination, bytes _newData, bytes _data) returns()
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayTransactorSession) TransferExitAndCall(_exitNum *big.Int, _initialDestination common.Address, _newDestination common.Address, _newData []byte, _data []byte) (*types.Transaction, error) {
	return _L1OrbitCustomGateway.Contract.TransferExitAndCall(&_L1OrbitCustomGateway.TransactOpts, _exitNum, _initialDestination, _newDestination, _newData, _data)
}

// L1OrbitCustomGatewayDepositInitiatedIterator is returned from FilterDepositInitiated and is used to iterate over the raw logs and unpacked data for DepositInitiated events raised by the L1OrbitCustomGateway contract.
type L1OrbitCustomGatewayDepositInitiatedIterator struct {
	Event *L1OrbitCustomGatewayDepositInitiated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1OrbitCustomGatewayDepositInitiatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1OrbitCustomGatewayDepositInitiated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1OrbitCustomGatewayDepositInitiated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1OrbitCustomGatewayDepositInitiatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1OrbitCustomGatewayDepositInitiatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1OrbitCustomGatewayDepositInitiated represents a DepositInitiated event raised by the L1OrbitCustomGateway contract.
type L1OrbitCustomGatewayDepositInitiated struct {
	L1Token        common.Address
	From           common.Address
	To             common.Address
	SequenceNumber *big.Int
	Amount         *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterDepositInitiated is a free log retrieval operation binding the contract event 0xb8910b9960c443aac3240b98585384e3a6f109fbf6969e264c3f183d69aba7e1.
//
// Solidity: event DepositInitiated(address l1Token, address indexed _from, address indexed _to, uint256 indexed _sequenceNumber, uint256 _amount)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayFilterer) FilterDepositInitiated(opts *bind.FilterOpts, _from []common.Address, _to []common.Address, _sequenceNumber []*big.Int) (*L1OrbitCustomGatewayDepositInitiatedIterator, error) {

	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}
	var _sequenceNumberRule []interface{}
	for _, _sequenceNumberItem := range _sequenceNumber {
		_sequenceNumberRule = append(_sequenceNumberRule, _sequenceNumberItem)
	}

	logs, sub, err := _L1OrbitCustomGateway.contract.FilterLogs(opts, "DepositInitiated", _fromRule, _toRule, _sequenceNumberRule)
	if err != nil {
		return nil, err
	}
	return &L1OrbitCustomGatewayDepositInitiatedIterator{contract: _L1OrbitCustomGateway.contract, event: "DepositInitiated", logs: logs, sub: sub}, nil
}

// WatchDepositInitiated is a free log subscription operation binding the contract event 0xb8910b9960c443aac3240b98585384e3a6f109fbf6969e264c3f183d69aba7e1.
//
// Solidity: event DepositInitiated(address l1Token, address indexed _from, address indexed _to, uint256 indexed _sequenceNumber, uint256 _amount)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayFilterer) WatchDepositInitiated(opts *bind.WatchOpts, sink chan<- *L1OrbitCustomGatewayDepositInitiated, _from []common.Address, _to []common.Address, _sequenceNumber []*big.Int) (event.Subscription, error) {

	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}
	var _sequenceNumberRule []interface{}
	for _, _sequenceNumberItem := range _sequenceNumber {
		_sequenceNumberRule = append(_sequenceNumberRule, _sequenceNumberItem)
	}

	logs, sub, err := _L1OrbitCustomGateway.contract.WatchLogs(opts, "DepositInitiated", _fromRule, _toRule, _sequenceNumberRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1OrbitCustomGatewayDepositInitiated)
				if err := _L1OrbitCustomGateway.contract.UnpackLog(event, "DepositInitiated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDepositInitiated is a log parse operation binding the contract event 0xb8910b9960c443aac3240b98585384e3a6f109fbf6969e264c3f183d69aba7e1.
//
// Solidity: event DepositInitiated(address l1Token, address indexed _from, address indexed _to, uint256 indexed _sequenceNumber, uint256 _amount)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayFilterer) ParseDepositInitiated(log types.Log) (*L1OrbitCustomGatewayDepositInitiated, error) {
	event := new(L1OrbitCustomGatewayDepositInitiated)
	if err := _L1OrbitCustomGateway.contract.UnpackLog(event, "DepositInitiated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1OrbitCustomGatewayTokenSetIterator is returned from FilterTokenSet and is used to iterate over the raw logs and unpacked data for TokenSet events raised by the L1OrbitCustomGateway contract.
type L1OrbitCustomGatewayTokenSetIterator struct {
	Event *L1OrbitCustomGatewayTokenSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1OrbitCustomGatewayTokenSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1OrbitCustomGatewayTokenSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1OrbitCustomGatewayTokenSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1OrbitCustomGatewayTokenSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1OrbitCustomGatewayTokenSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1OrbitCustomGatewayTokenSet represents a TokenSet event raised by the L1OrbitCustomGateway contract.
type L1OrbitCustomGatewayTokenSet struct {
	L1Address common.Address
	L2Address common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterTokenSet is a free log retrieval operation binding the contract event 0x0dd664a155dd89526bb019e22b00291bb7ca9d07ba3ec4a1a76b410da9797ceb.
//
// Solidity: event TokenSet(address indexed l1Address, address indexed l2Address)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayFilterer) FilterTokenSet(opts *bind.FilterOpts, l1Address []common.Address, l2Address []common.Address) (*L1OrbitCustomGatewayTokenSetIterator, error) {

	var l1AddressRule []interface{}
	for _, l1AddressItem := range l1Address {
		l1AddressRule = append(l1AddressRule, l1AddressItem)
	}
	var l2AddressRule []interface{}
	for _, l2AddressItem := range l2Address {
		l2AddressRule = append(l2AddressRule, l2AddressItem)
	}

	logs, sub, err := _L1OrbitCustomGateway.contract.FilterLogs(opts, "TokenSet", l1AddressRule, l2AddressRule)
	if err != nil {
		return nil, err
	}
	return &L1OrbitCustomGatewayTokenSetIterator{contract: _L1OrbitCustomGateway.contract, event: "TokenSet", logs: logs, sub: sub}, nil
}

// WatchTokenSet is a free log subscription operation binding the contract event 0x0dd664a155dd89526bb019e22b00291bb7ca9d07ba3ec4a1a76b410da9797ceb.
//
// Solidity: event TokenSet(address indexed l1Address, address indexed l2Address)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayFilterer) WatchTokenSet(opts *bind.WatchOpts, sink chan<- *L1OrbitCustomGatewayTokenSet, l1Address []common.Address, l2Address []common.Address) (event.Subscription, error) {

	var l1AddressRule []interface{}
	for _, l1AddressItem := range l1Address {
		l1AddressRule = append(l1AddressRule, l1AddressItem)
	}
	var l2AddressRule []interface{}
	for _, l2AddressItem := range l2Address {
		l2AddressRule = append(l2AddressRule, l2AddressItem)
	}

	logs, sub, err := _L1OrbitCustomGateway.contract.WatchLogs(opts, "TokenSet", l1AddressRule, l2AddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1OrbitCustomGatewayTokenSet)
				if err := _L1OrbitCustomGateway.contract.UnpackLog(event, "TokenSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTokenSet is a log parse operation binding the contract event 0x0dd664a155dd89526bb019e22b00291bb7ca9d07ba3ec4a1a76b410da9797ceb.
//
// Solidity: event TokenSet(address indexed l1Address, address indexed l2Address)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayFilterer) ParseTokenSet(log types.Log) (*L1OrbitCustomGatewayTokenSet, error) {
	event := new(L1OrbitCustomGatewayTokenSet)
	if err := _L1OrbitCustomGateway.contract.UnpackLog(event, "TokenSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1OrbitCustomGatewayTxToL2Iterator is returned from FilterTxToL2 and is used to iterate over the raw logs and unpacked data for TxToL2 events raised by the L1OrbitCustomGateway contract.
type L1OrbitCustomGatewayTxToL2Iterator struct {
	Event *L1OrbitCustomGatewayTxToL2 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1OrbitCustomGatewayTxToL2Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1OrbitCustomGatewayTxToL2)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1OrbitCustomGatewayTxToL2)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1OrbitCustomGatewayTxToL2Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1OrbitCustomGatewayTxToL2Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1OrbitCustomGatewayTxToL2 represents a TxToL2 event raised by the L1OrbitCustomGateway contract.
type L1OrbitCustomGatewayTxToL2 struct {
	From   common.Address
	To     common.Address
	SeqNum *big.Int
	Data   []byte
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterTxToL2 is a free log retrieval operation binding the contract event 0xc1d1490cf25c3b40d600dfb27c7680340ed1ab901b7e8f3551280968a3b372b0.
//
// Solidity: event TxToL2(address indexed _from, address indexed _to, uint256 indexed _seqNum, bytes _data)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayFilterer) FilterTxToL2(opts *bind.FilterOpts, _from []common.Address, _to []common.Address, _seqNum []*big.Int) (*L1OrbitCustomGatewayTxToL2Iterator, error) {

	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}
	var _seqNumRule []interface{}
	for _, _seqNumItem := range _seqNum {
		_seqNumRule = append(_seqNumRule, _seqNumItem)
	}

	logs, sub, err := _L1OrbitCustomGateway.contract.FilterLogs(opts, "TxToL2", _fromRule, _toRule, _seqNumRule)
	if err != nil {
		return nil, err
	}
	return &L1OrbitCustomGatewayTxToL2Iterator{contract: _L1OrbitCustomGateway.contract, event: "TxToL2", logs: logs, sub: sub}, nil
}

// WatchTxToL2 is a free log subscription operation binding the contract event 0xc1d1490cf25c3b40d600dfb27c7680340ed1ab901b7e8f3551280968a3b372b0.
//
// Solidity: event TxToL2(address indexed _from, address indexed _to, uint256 indexed _seqNum, bytes _data)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayFilterer) WatchTxToL2(opts *bind.WatchOpts, sink chan<- *L1OrbitCustomGatewayTxToL2, _from []common.Address, _to []common.Address, _seqNum []*big.Int) (event.Subscription, error) {

	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}
	var _seqNumRule []interface{}
	for _, _seqNumItem := range _seqNum {
		_seqNumRule = append(_seqNumRule, _seqNumItem)
	}

	logs, sub, err := _L1OrbitCustomGateway.contract.WatchLogs(opts, "TxToL2", _fromRule, _toRule, _seqNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1OrbitCustomGatewayTxToL2)
				if err := _L1OrbitCustomGateway.contract.UnpackLog(event, "TxToL2", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTxToL2 is a log parse operation binding the contract event 0xc1d1490cf25c3b40d600dfb27c7680340ed1ab901b7e8f3551280968a3b372b0.
//
// Solidity: event TxToL2(address indexed _from, address indexed _to, uint256 indexed _seqNum, bytes _data)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayFilterer) ParseTxToL2(log types.Log) (*L1OrbitCustomGatewayTxToL2, error) {
	event := new(L1OrbitCustomGatewayTxToL2)
	if err := _L1OrbitCustomGateway.contract.UnpackLog(event, "TxToL2", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1OrbitCustomGatewayWithdrawRedirectedIterator is returned from FilterWithdrawRedirected and is used to iterate over the raw logs and unpacked data for WithdrawRedirected events raised by the L1OrbitCustomGateway contract.
type L1OrbitCustomGatewayWithdrawRedirectedIterator struct {
	Event *L1OrbitCustomGatewayWithdrawRedirected // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1OrbitCustomGatewayWithdrawRedirectedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1OrbitCustomGatewayWithdrawRedirected)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1OrbitCustomGatewayWithdrawRedirected)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1OrbitCustomGatewayWithdrawRedirectedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1OrbitCustomGatewayWithdrawRedirectedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1OrbitCustomGatewayWithdrawRedirected represents a WithdrawRedirected event raised by the L1OrbitCustomGateway contract.
type L1OrbitCustomGatewayWithdrawRedirected struct {
	From             common.Address
	To               common.Address
	ExitNum          *big.Int
	NewData          []byte
	Data             []byte
	MadeExternalCall bool
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterWithdrawRedirected is a free log retrieval operation binding the contract event 0x56735ccb9dc7d2222ce4177fc3aea44c33882e2a2c73e0fb1c6b93c9c13a04d4.
//
// Solidity: event WithdrawRedirected(address indexed from, address indexed to, uint256 indexed exitNum, bytes newData, bytes data, bool madeExternalCall)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayFilterer) FilterWithdrawRedirected(opts *bind.FilterOpts, from []common.Address, to []common.Address, exitNum []*big.Int) (*L1OrbitCustomGatewayWithdrawRedirectedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var exitNumRule []interface{}
	for _, exitNumItem := range exitNum {
		exitNumRule = append(exitNumRule, exitNumItem)
	}

	logs, sub, err := _L1OrbitCustomGateway.contract.FilterLogs(opts, "WithdrawRedirected", fromRule, toRule, exitNumRule)
	if err != nil {
		return nil, err
	}
	return &L1OrbitCustomGatewayWithdrawRedirectedIterator{contract: _L1OrbitCustomGateway.contract, event: "WithdrawRedirected", logs: logs, sub: sub}, nil
}

// WatchWithdrawRedirected is a free log subscription operation binding the contract event 0x56735ccb9dc7d2222ce4177fc3aea44c33882e2a2c73e0fb1c6b93c9c13a04d4.
//
// Solidity: event WithdrawRedirected(address indexed from, address indexed to, uint256 indexed exitNum, bytes newData, bytes data, bool madeExternalCall)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayFilterer) WatchWithdrawRedirected(opts *bind.WatchOpts, sink chan<- *L1OrbitCustomGatewayWithdrawRedirected, from []common.Address, to []common.Address, exitNum []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var exitNumRule []interface{}
	for _, exitNumItem := range exitNum {
		exitNumRule = append(exitNumRule, exitNumItem)
	}

	logs, sub, err := _L1OrbitCustomGateway.contract.WatchLogs(opts, "WithdrawRedirected", fromRule, toRule, exitNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1OrbitCustomGatewayWithdrawRedirected)
				if err := _L1OrbitCustomGateway.contract.UnpackLog(event, "WithdrawRedirected", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawRedirected is a log parse operation binding the contract event 0x56735ccb9dc7d2222ce4177fc3aea44c33882e2a2c73e0fb1c6b93c9c13a04d4.
//
// Solidity: event WithdrawRedirected(address indexed from, address indexed to, uint256 indexed exitNum, bytes newData, bytes data, bool madeExternalCall)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayFilterer) ParseWithdrawRedirected(log types.Log) (*L1OrbitCustomGatewayWithdrawRedirected, error) {
	event := new(L1OrbitCustomGatewayWithdrawRedirected)
	if err := _L1OrbitCustomGateway.contract.UnpackLog(event, "WithdrawRedirected", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1OrbitCustomGatewayWithdrawalFinalizedIterator is returned from FilterWithdrawalFinalized and is used to iterate over the raw logs and unpacked data for WithdrawalFinalized events raised by the L1OrbitCustomGateway contract.
type L1OrbitCustomGatewayWithdrawalFinalizedIterator struct {
	Event *L1OrbitCustomGatewayWithdrawalFinalized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1OrbitCustomGatewayWithdrawalFinalizedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1OrbitCustomGatewayWithdrawalFinalized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1OrbitCustomGatewayWithdrawalFinalized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1OrbitCustomGatewayWithdrawalFinalizedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1OrbitCustomGatewayWithdrawalFinalizedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1OrbitCustomGatewayWithdrawalFinalized represents a WithdrawalFinalized event raised by the L1OrbitCustomGateway contract.
type L1OrbitCustomGatewayWithdrawalFinalized struct {
	L1Token common.Address
	From    common.Address
	To      common.Address
	ExitNum *big.Int
	Amount  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterWithdrawalFinalized is a free log retrieval operation binding the contract event 0x891afe029c75c4f8c5855fc3480598bc5a53739344f6ae575bdb7ea2a79f56b3.
//
// Solidity: event WithdrawalFinalized(address l1Token, address indexed _from, address indexed _to, uint256 indexed _exitNum, uint256 _amount)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayFilterer) FilterWithdrawalFinalized(opts *bind.FilterOpts, _from []common.Address, _to []common.Address, _exitNum []*big.Int) (*L1OrbitCustomGatewayWithdrawalFinalizedIterator, error) {

	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}
	var _exitNumRule []interface{}
	for _, _exitNumItem := range _exitNum {
		_exitNumRule = append(_exitNumRule, _exitNumItem)
	}

	logs, sub, err := _L1OrbitCustomGateway.contract.FilterLogs(opts, "WithdrawalFinalized", _fromRule, _toRule, _exitNumRule)
	if err != nil {
		return nil, err
	}
	return &L1OrbitCustomGatewayWithdrawalFinalizedIterator{contract: _L1OrbitCustomGateway.contract, event: "WithdrawalFinalized", logs: logs, sub: sub}, nil
}

// WatchWithdrawalFinalized is a free log subscription operation binding the contract event 0x891afe029c75c4f8c5855fc3480598bc5a53739344f6ae575bdb7ea2a79f56b3.
//
// Solidity: event WithdrawalFinalized(address l1Token, address indexed _from, address indexed _to, uint256 indexed _exitNum, uint256 _amount)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayFilterer) WatchWithdrawalFinalized(opts *bind.WatchOpts, sink chan<- *L1OrbitCustomGatewayWithdrawalFinalized, _from []common.Address, _to []common.Address, _exitNum []*big.Int) (event.Subscription, error) {

	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}
	var _exitNumRule []interface{}
	for _, _exitNumItem := range _exitNum {
		_exitNumRule = append(_exitNumRule, _exitNumItem)
	}

	logs, sub, err := _L1OrbitCustomGateway.contract.WatchLogs(opts, "WithdrawalFinalized", _fromRule, _toRule, _exitNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1OrbitCustomGatewayWithdrawalFinalized)
				if err := _L1OrbitCustomGateway.contract.UnpackLog(event, "WithdrawalFinalized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawalFinalized is a log parse operation binding the contract event 0x891afe029c75c4f8c5855fc3480598bc5a53739344f6ae575bdb7ea2a79f56b3.
//
// Solidity: event WithdrawalFinalized(address l1Token, address indexed _from, address indexed _to, uint256 indexed _exitNum, uint256 _amount)
func (_L1OrbitCustomGateway *L1OrbitCustomGatewayFilterer) ParseWithdrawalFinalized(log types.Log) (*L1OrbitCustomGatewayWithdrawalFinalized, error) {
	event := new(L1OrbitCustomGatewayWithdrawalFinalized)
	if err := _L1OrbitCustomGateway.contract.UnpackLog(event, "WithdrawalFinalized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

func CreateL1OrbitCustomGatewayDeploymentCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc string
	var gasLimit uint64
	var simulate bool
	var timeout uint

	cmd := &cobra.Command{
		Use:   "deploy",
		Short: "Deploy a new L1OrbitCustomGateway contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified (this should be a path to an Ethereum account keystore file)")
			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			address, deploymentTransaction, _, deploymentErr := DeployL1OrbitCustomGateway(
				transactionOpts,
				client,
			)
			if deploymentErr != nil {
				return deploymentErr
			}

			cmd.Printf("Transaction hash: %s\nContract address: %s\n", deploymentTransaction.Hash().Hex(), address.Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					Data: deploymentTransaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := deploymentTransaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")

	return cmd
}

func CreateInboxCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 common.Address

	cmd := &cobra.Command{
		Use:   "inbox",
		Short: "Call the Inbox view method on a L1OrbitCustomGateway contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewL1OrbitCustomGateway(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := L1OrbitCustomGatewayCallerSession{
				Contract: &contract.L1OrbitCustomGatewayCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.Inbox()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.Hex())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}
func CreateL1ToL2TokenCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 common.Address
	var arg0Raw string

	var capture0 common.Address

	cmd := &cobra.Command{
		Use:   "l-1-to-l-2-token",
		Short: "Call the L1ToL2Token view method on a L1OrbitCustomGateway contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			} else if !common.IsHexAddress(arg0Raw) {
				return fmt.Errorf("--arg-0 argument is not a valid Ethereum address")
			}
			arg0 = common.HexToAddress(arg0Raw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewL1OrbitCustomGateway(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := L1OrbitCustomGatewayCallerSession{
				Contract: &contract.L1OrbitCustomGatewayCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.L1ToL2Token(
				arg0,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.Hex())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")

	return cmd
}
func CreateSupportsInterfaceCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var interfaceId [4]byte
	var interfaceIdRaw string

	var capture0 bool

	cmd := &cobra.Command{
		Use:   "supports-interface",
		Short: "Call the SupportsInterface view method on a L1OrbitCustomGateway contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			var hexDecodeinterfaceIdErr error

			var intermediateinterfaceIdLeaf []byte
			intermediateinterfaceIdLeaf, hexDecodeinterfaceIdErr = hex.DecodeString(interfaceIdRaw)
			if hexDecodeinterfaceIdErr != nil {
				return hexDecodeinterfaceIdErr
			}
			interfaceId = [4]byte(intermediateinterfaceIdLeaf[:4])

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewL1OrbitCustomGateway(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := L1OrbitCustomGatewayCallerSession{
				Contract: &contract.L1OrbitCustomGatewayCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.SupportsInterface(
				interfaceId,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %t\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&interfaceIdRaw, "interface-id", "", "interface-id argument")

	return cmd
}
func CreateWhitelistCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 common.Address

	cmd := &cobra.Command{
		Use:   "whitelist",
		Short: "Call the Whitelist view method on a L1OrbitCustomGateway contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewL1OrbitCustomGateway(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := L1OrbitCustomGatewayCallerSession{
				Contract: &contract.L1OrbitCustomGatewayCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.Whitelist()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.Hex())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}
func CreateRedirectedExitsCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 [32]byte
	var arg0Raw string

	var capture0 struct {
		IsExit  bool
		NewTo   common.Address
		NewData []byte
	}

	cmd := &cobra.Command{
		Use:   "redirected-exits",
		Short: "Call the RedirectedExits view method on a L1OrbitCustomGateway contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			var hexDecodearg0Err error

			var intermediatearg0Leaf []byte
			intermediatearg0Leaf, hexDecodearg0Err = hex.DecodeString(arg0Raw)
			if hexDecodearg0Err != nil {
				return hexDecodearg0Err
			}
			arg0 = [32]byte(intermediatearg0Leaf[:32])

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewL1OrbitCustomGateway(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := L1OrbitCustomGatewayCallerSession{
				Contract: &contract.L1OrbitCustomGatewayCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.RedirectedExits(
				arg0,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %v\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")

	return cmd
}
func CreateRouterCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 common.Address

	cmd := &cobra.Command{
		Use:   "router",
		Short: "Call the Router view method on a L1OrbitCustomGateway contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewL1OrbitCustomGateway(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := L1OrbitCustomGatewayCallerSession{
				Contract: &contract.L1OrbitCustomGatewayCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.Router()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.Hex())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}
func CreateCalculateL2TokenAddressCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var l1ERC20 common.Address
	var l1ERC20Raw string

	var capture0 common.Address

	cmd := &cobra.Command{
		Use:   "calculate-l-2-token-address",
		Short: "Call the CalculateL2TokenAddress view method on a L1OrbitCustomGateway contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if l1ERC20Raw == "" {
				return fmt.Errorf("--l-1-erc-20 argument not specified")
			} else if !common.IsHexAddress(l1ERC20Raw) {
				return fmt.Errorf("--l-1-erc-20 argument is not a valid Ethereum address")
			}
			l1ERC20 = common.HexToAddress(l1ERC20Raw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewL1OrbitCustomGateway(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := L1OrbitCustomGatewayCallerSession{
				Contract: &contract.L1OrbitCustomGatewayCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.CalculateL2TokenAddress(
				l1ERC20,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.Hex())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&l1ERC20Raw, "l-1-erc-20", "", "l-1-erc-20 argument")

	return cmd
}
func CreateCounterpartGatewayCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 common.Address

	cmd := &cobra.Command{
		Use:   "counterpart-gateway",
		Short: "Call the CounterpartGateway view method on a L1OrbitCustomGateway contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewL1OrbitCustomGateway(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := L1OrbitCustomGatewayCallerSession{
				Contract: &contract.L1OrbitCustomGatewayCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.CounterpartGateway()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.Hex())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}
func CreateEncodeWithdrawalCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var exitNum *big.Int
	var exitNumRaw string
	var initialDestination common.Address
	var initialDestinationRaw string

	var capture0 [32]byte

	cmd := &cobra.Command{
		Use:   "encode-withdrawal",
		Short: "Call the EncodeWithdrawal view method on a L1OrbitCustomGateway contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if exitNumRaw == "" {
				return fmt.Errorf("--exit-num argument not specified")
			}
			exitNum = new(big.Int)
			exitNum.SetString(exitNumRaw, 0)

			if initialDestinationRaw == "" {
				return fmt.Errorf("--initial-destination argument not specified")
			} else if !common.IsHexAddress(initialDestinationRaw) {
				return fmt.Errorf("--initial-destination argument is not a valid Ethereum address")
			}
			initialDestination = common.HexToAddress(initialDestinationRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewL1OrbitCustomGateway(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := L1OrbitCustomGatewayCallerSession{
				Contract: &contract.L1OrbitCustomGatewayCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.EncodeWithdrawal(
				exitNum,
				initialDestination,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %v\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&exitNumRaw, "exit-num", "", "exit-num argument")
	cmd.Flags().StringVar(&initialDestinationRaw, "initial-destination", "", "initial-destination argument")

	return cmd
}
func CreateGetExternalCallCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var exitNum *big.Int
	var exitNumRaw string
	var initialDestination common.Address
	var initialDestinationRaw string
	var initialData []byte
	var initialDataRaw string

	var capture0 struct {
		Target common.Address
		Data   []byte
	}

	cmd := &cobra.Command{
		Use:   "get-external-call",
		Short: "Call the GetExternalCall view method on a L1OrbitCustomGateway contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if exitNumRaw == "" {
				return fmt.Errorf("--exit-num argument not specified")
			}
			exitNum = new(big.Int)
			exitNum.SetString(exitNumRaw, 0)

			if initialDestinationRaw == "" {
				return fmt.Errorf("--initial-destination argument not specified")
			} else if !common.IsHexAddress(initialDestinationRaw) {
				return fmt.Errorf("--initial-destination argument is not a valid Ethereum address")
			}
			initialDestination = common.HexToAddress(initialDestinationRaw)

			var hexDecodeinitialDataErr error

			initialData, hexDecodeinitialDataErr = hex.DecodeString(initialDataRaw)
			if hexDecodeinitialDataErr != nil {
				return hexDecodeinitialDataErr
			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewL1OrbitCustomGateway(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := L1OrbitCustomGatewayCallerSession{
				Contract: &contract.L1OrbitCustomGatewayCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.GetExternalCall(
				exitNum,
				initialDestination,
				initialData,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %v\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&exitNumRaw, "exit-num", "", "exit-num argument")
	cmd.Flags().StringVar(&initialDestinationRaw, "initial-destination", "", "initial-destination argument")
	cmd.Flags().StringVar(&initialDataRaw, "initial-data", "", "initial-data argument")

	return cmd
}
func CreateGetOutboundCalldataCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var l1Token common.Address
	var l1TokenRaw string
	var _from0 common.Address
	var _from0Raw string
	var _to0 common.Address
	var _to0Raw string
	var amount *big.Int
	var amountRaw string
	var data []byte
	var dataRaw string

	var capture0 []byte

	cmd := &cobra.Command{
		Use:   "get-outbound-calldata",
		Short: "Call the GetOutboundCalldata view method on a L1OrbitCustomGateway contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if l1TokenRaw == "" {
				return fmt.Errorf("--l-1-token argument not specified")
			} else if !common.IsHexAddress(l1TokenRaw) {
				return fmt.Errorf("--l-1-token argument is not a valid Ethereum address")
			}
			l1Token = common.HexToAddress(l1TokenRaw)

			if _from0Raw == "" {
				return fmt.Errorf("---from-0 argument not specified")
			} else if !common.IsHexAddress(_from0Raw) {
				return fmt.Errorf("---from-0 argument is not a valid Ethereum address")
			}
			_from0 = common.HexToAddress(_from0Raw)

			if _to0Raw == "" {
				return fmt.Errorf("---to-0 argument not specified")
			} else if !common.IsHexAddress(_to0Raw) {
				return fmt.Errorf("---to-0 argument is not a valid Ethereum address")
			}
			_to0 = common.HexToAddress(_to0Raw)

			if amountRaw == "" {
				return fmt.Errorf("--amount argument not specified")
			}
			amount = new(big.Int)
			amount.SetString(amountRaw, 0)

			var hexDecodedataErr error

			data, hexDecodedataErr = hex.DecodeString(dataRaw)
			if hexDecodedataErr != nil {
				return hexDecodedataErr
			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewL1OrbitCustomGateway(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := L1OrbitCustomGatewayCallerSession{
				Contract: &contract.L1OrbitCustomGatewayCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.GetOutboundCalldata(
				l1Token,
				_from0,
				_to0,
				amount,
				data,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %v\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&l1TokenRaw, "l-1-token", "", "l-1-token argument")
	cmd.Flags().StringVar(&_from0Raw, "-from-0", "", "-from-0 argument")
	cmd.Flags().StringVar(&_to0Raw, "-to-0", "", "-to-0 argument")
	cmd.Flags().StringVar(&amountRaw, "amount", "", "amount argument")
	cmd.Flags().StringVar(&dataRaw, "data", "", "data argument")

	return cmd
}
func CreateOwnerCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 common.Address

	cmd := &cobra.Command{
		Use:   "owner",
		Short: "Call the Owner view method on a L1OrbitCustomGateway contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewL1OrbitCustomGateway(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := L1OrbitCustomGatewayCallerSession{
				Contract: &contract.L1OrbitCustomGatewayCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.Owner()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.Hex())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}

func CreateOutboundTransferCustomRefundCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var l1Token common.Address
	var l1TokenRaw string
	var refundTo common.Address
	var refundToRaw string
	var _to0 common.Address
	var _to0Raw string
	var amount *big.Int
	var amountRaw string
	var maxGas *big.Int
	var maxGasRaw string
	var gasPriceBid *big.Int
	var gasPriceBidRaw string
	var data []byte
	var dataRaw string

	cmd := &cobra.Command{
		Use:   "outbound-transfer-custom-refund",
		Short: "Execute the OutboundTransferCustomRefund method on a L1OrbitCustomGateway contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if l1TokenRaw == "" {
				return fmt.Errorf("--l-1-token argument not specified")
			} else if !common.IsHexAddress(l1TokenRaw) {
				return fmt.Errorf("--l-1-token argument is not a valid Ethereum address")
			}
			l1Token = common.HexToAddress(l1TokenRaw)

			if refundToRaw == "" {
				return fmt.Errorf("--refund-to argument not specified")
			} else if !common.IsHexAddress(refundToRaw) {
				return fmt.Errorf("--refund-to argument is not a valid Ethereum address")
			}
			refundTo = common.HexToAddress(refundToRaw)

			if _to0Raw == "" {
				return fmt.Errorf("---to-0 argument not specified")
			} else if !common.IsHexAddress(_to0Raw) {
				return fmt.Errorf("---to-0 argument is not a valid Ethereum address")
			}
			_to0 = common.HexToAddress(_to0Raw)

			if amountRaw == "" {
				return fmt.Errorf("--amount argument not specified")
			}
			amount = new(big.Int)
			amount.SetString(amountRaw, 0)

			if maxGasRaw == "" {
				return fmt.Errorf("--max-gas argument not specified")
			}
			maxGas = new(big.Int)
			maxGas.SetString(maxGasRaw, 0)

			if gasPriceBidRaw == "" {
				return fmt.Errorf("--gas-price-bid argument not specified")
			}
			gasPriceBid = new(big.Int)
			gasPriceBid.SetString(gasPriceBidRaw, 0)

			var hexDecodedataErr error

			data, hexDecodedataErr = hex.DecodeString(dataRaw)
			if hexDecodedataErr != nil {
				return hexDecodedataErr
			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewL1OrbitCustomGateway(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := L1OrbitCustomGatewayTransactorSession{
				Contract:     &contract.L1OrbitCustomGatewayTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.OutboundTransferCustomRefund(
				l1Token,
				refundTo,
				_to0,
				amount,
				maxGas,
				gasPriceBid,
				data,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&l1TokenRaw, "l-1-token", "", "l-1-token argument")
	cmd.Flags().StringVar(&refundToRaw, "refund-to", "", "refund-to argument")
	cmd.Flags().StringVar(&_to0Raw, "-to-0", "", "-to-0 argument")
	cmd.Flags().StringVar(&amountRaw, "amount", "", "amount argument")
	cmd.Flags().StringVar(&maxGasRaw, "max-gas", "", "max-gas argument")
	cmd.Flags().StringVar(&gasPriceBidRaw, "gas-price-bid", "", "gas-price-bid argument")
	cmd.Flags().StringVar(&dataRaw, "data", "", "data argument")

	return cmd
}
func CreatePostUpgradeInitCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	cmd := &cobra.Command{
		Use:   "post-upgrade-init",
		Short: "Execute the PostUpgradeInit method on a L1OrbitCustomGateway contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewL1OrbitCustomGateway(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := L1OrbitCustomGatewayTransactorSession{
				Contract:     &contract.L1OrbitCustomGatewayTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.PostUpgradeInit()
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	return cmd
}
func CreateRegisterTokenToL21Command() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var arg0 common.Address
	var arg0Raw string
	var arg1 *big.Int
	var arg1Raw string
	var arg2 *big.Int
	var arg2Raw string
	var arg3 *big.Int
	var arg3Raw string
	var arg4 common.Address
	var arg4Raw string

	cmd := &cobra.Command{
		Use:   "register-token-to-l-21",
		Short: "Execute the RegisterTokenToL21 method on a L1OrbitCustomGateway contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			} else if !common.IsHexAddress(arg0Raw) {
				return fmt.Errorf("--arg-0 argument is not a valid Ethereum address")
			}
			arg0 = common.HexToAddress(arg0Raw)

			if arg1Raw == "" {
				return fmt.Errorf("--arg-1 argument not specified")
			}
			arg1 = new(big.Int)
			arg1.SetString(arg1Raw, 0)

			if arg2Raw == "" {
				return fmt.Errorf("--arg-2 argument not specified")
			}
			arg2 = new(big.Int)
			arg2.SetString(arg2Raw, 0)

			if arg3Raw == "" {
				return fmt.Errorf("--arg-3 argument not specified")
			}
			arg3 = new(big.Int)
			arg3.SetString(arg3Raw, 0)

			if arg4Raw == "" {
				return fmt.Errorf("--arg-4 argument not specified")
			} else if !common.IsHexAddress(arg4Raw) {
				return fmt.Errorf("--arg-4 argument is not a valid Ethereum address")
			}
			arg4 = common.HexToAddress(arg4Raw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewL1OrbitCustomGateway(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := L1OrbitCustomGatewayTransactorSession{
				Contract:     &contract.L1OrbitCustomGatewayTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.RegisterTokenToL21(
				arg0,
				arg1,
				arg2,
				arg3,
				arg4,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")
	cmd.Flags().StringVar(&arg1Raw, "arg-1", "", "arg-1 argument")
	cmd.Flags().StringVar(&arg2Raw, "arg-2", "", "arg-2 argument")
	cmd.Flags().StringVar(&arg3Raw, "arg-3", "", "arg-3 argument")
	cmd.Flags().StringVar(&arg4Raw, "arg-4", "", "arg-4 argument")

	return cmd
}
func CreateForceRegisterTokenToL20Command() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var l1Addresses []common.Address
	var l1AddressesRaw string
	var l2Addresses []common.Address
	var l2AddressesRaw string
	var maxGas *big.Int
	var maxGasRaw string
	var gasPriceBid *big.Int
	var gasPriceBidRaw string
	var maxSubmissionCost *big.Int
	var maxSubmissionCostRaw string
	var feeAmount *big.Int
	var feeAmountRaw string

	cmd := &cobra.Command{
		Use:   "force-register-token-to-l-20",
		Short: "Execute the ForceRegisterTokenToL20 method on a L1OrbitCustomGateway contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if l1AddressesRaw == "" {
				return fmt.Errorf("--l-1-addresses argument not specified")
			} else if strings.HasPrefix(l1AddressesRaw, "@") {
				filename := strings.TrimPrefix(l1AddressesRaw, "@")
				contents, readErr := os.ReadFile(filename)
				if readErr != nil {
					return readErr
				}
				unmarshalErr := json.Unmarshal(contents, &l1Addresses)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			} else {
				unmarshalErr := json.Unmarshal([]byte(l1AddressesRaw), &l1Addresses)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			}

			if l2AddressesRaw == "" {
				return fmt.Errorf("--l-2-addresses argument not specified")
			} else if strings.HasPrefix(l2AddressesRaw, "@") {
				filename := strings.TrimPrefix(l2AddressesRaw, "@")
				contents, readErr := os.ReadFile(filename)
				if readErr != nil {
					return readErr
				}
				unmarshalErr := json.Unmarshal(contents, &l2Addresses)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			} else {
				unmarshalErr := json.Unmarshal([]byte(l2AddressesRaw), &l2Addresses)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			}

			if maxGasRaw == "" {
				return fmt.Errorf("--max-gas argument not specified")
			}
			maxGas = new(big.Int)
			maxGas.SetString(maxGasRaw, 0)

			if gasPriceBidRaw == "" {
				return fmt.Errorf("--gas-price-bid argument not specified")
			}
			gasPriceBid = new(big.Int)
			gasPriceBid.SetString(gasPriceBidRaw, 0)

			if maxSubmissionCostRaw == "" {
				return fmt.Errorf("--max-submission-cost argument not specified")
			}
			maxSubmissionCost = new(big.Int)
			maxSubmissionCost.SetString(maxSubmissionCostRaw, 0)

			if feeAmountRaw == "" {
				return fmt.Errorf("--fee-amount argument not specified")
			}
			feeAmount = new(big.Int)
			feeAmount.SetString(feeAmountRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewL1OrbitCustomGateway(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := L1OrbitCustomGatewayTransactorSession{
				Contract:     &contract.L1OrbitCustomGatewayTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.ForceRegisterTokenToL20(
				l1Addresses,
				l2Addresses,
				maxGas,
				gasPriceBid,
				maxSubmissionCost,
				feeAmount,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&l1AddressesRaw, "l-1-addresses", "", "l-1-addresses argument")
	cmd.Flags().StringVar(&l2AddressesRaw, "l-2-addresses", "", "l-2-addresses argument")
	cmd.Flags().StringVar(&maxGasRaw, "max-gas", "", "max-gas argument")
	cmd.Flags().StringVar(&gasPriceBidRaw, "gas-price-bid", "", "gas-price-bid argument")
	cmd.Flags().StringVar(&maxSubmissionCostRaw, "max-submission-cost", "", "max-submission-cost argument")
	cmd.Flags().StringVar(&feeAmountRaw, "fee-amount", "", "fee-amount argument")

	return cmd
}
func CreateOutboundTransferCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var l1Token common.Address
	var l1TokenRaw string
	var _to0 common.Address
	var _to0Raw string
	var amount *big.Int
	var amountRaw string
	var maxGas *big.Int
	var maxGasRaw string
	var gasPriceBid *big.Int
	var gasPriceBidRaw string
	var data []byte
	var dataRaw string

	cmd := &cobra.Command{
		Use:   "outbound-transfer",
		Short: "Execute the OutboundTransfer method on a L1OrbitCustomGateway contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if l1TokenRaw == "" {
				return fmt.Errorf("--l-1-token argument not specified")
			} else if !common.IsHexAddress(l1TokenRaw) {
				return fmt.Errorf("--l-1-token argument is not a valid Ethereum address")
			}
			l1Token = common.HexToAddress(l1TokenRaw)

			if _to0Raw == "" {
				return fmt.Errorf("---to-0 argument not specified")
			} else if !common.IsHexAddress(_to0Raw) {
				return fmt.Errorf("---to-0 argument is not a valid Ethereum address")
			}
			_to0 = common.HexToAddress(_to0Raw)

			if amountRaw == "" {
				return fmt.Errorf("--amount argument not specified")
			}
			amount = new(big.Int)
			amount.SetString(amountRaw, 0)

			if maxGasRaw == "" {
				return fmt.Errorf("--max-gas argument not specified")
			}
			maxGas = new(big.Int)
			maxGas.SetString(maxGasRaw, 0)

			if gasPriceBidRaw == "" {
				return fmt.Errorf("--gas-price-bid argument not specified")
			}
			gasPriceBid = new(big.Int)
			gasPriceBid.SetString(gasPriceBidRaw, 0)

			var hexDecodedataErr error

			data, hexDecodedataErr = hex.DecodeString(dataRaw)
			if hexDecodedataErr != nil {
				return hexDecodedataErr
			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewL1OrbitCustomGateway(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := L1OrbitCustomGatewayTransactorSession{
				Contract:     &contract.L1OrbitCustomGatewayTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.OutboundTransfer(
				l1Token,
				_to0,
				amount,
				maxGas,
				gasPriceBid,
				data,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&l1TokenRaw, "l-1-token", "", "l-1-token argument")
	cmd.Flags().StringVar(&_to0Raw, "-to-0", "", "-to-0 argument")
	cmd.Flags().StringVar(&amountRaw, "amount", "", "amount argument")
	cmd.Flags().StringVar(&maxGasRaw, "max-gas", "", "max-gas argument")
	cmd.Flags().StringVar(&gasPriceBidRaw, "gas-price-bid", "", "gas-price-bid argument")
	cmd.Flags().StringVar(&dataRaw, "data", "", "data argument")

	return cmd
}
func CreateRegisterTokenToL2Command() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var l2Address common.Address
	var l2AddressRaw string
	var maxGas *big.Int
	var maxGasRaw string
	var gasPriceBid *big.Int
	var gasPriceBidRaw string
	var maxSubmissionCost *big.Int
	var maxSubmissionCostRaw string
	var creditBackAddress common.Address
	var creditBackAddressRaw string
	var feeAmount *big.Int
	var feeAmountRaw string

	cmd := &cobra.Command{
		Use:   "register-token-to-l-2",
		Short: "Execute the RegisterTokenToL2 method on a L1OrbitCustomGateway contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if l2AddressRaw == "" {
				return fmt.Errorf("--l-2-address argument not specified")
			} else if !common.IsHexAddress(l2AddressRaw) {
				return fmt.Errorf("--l-2-address argument is not a valid Ethereum address")
			}
			l2Address = common.HexToAddress(l2AddressRaw)

			if maxGasRaw == "" {
				return fmt.Errorf("--max-gas argument not specified")
			}
			maxGas = new(big.Int)
			maxGas.SetString(maxGasRaw, 0)

			if gasPriceBidRaw == "" {
				return fmt.Errorf("--gas-price-bid argument not specified")
			}
			gasPriceBid = new(big.Int)
			gasPriceBid.SetString(gasPriceBidRaw, 0)

			if maxSubmissionCostRaw == "" {
				return fmt.Errorf("--max-submission-cost argument not specified")
			}
			maxSubmissionCost = new(big.Int)
			maxSubmissionCost.SetString(maxSubmissionCostRaw, 0)

			if creditBackAddressRaw == "" {
				return fmt.Errorf("--credit-back-address argument not specified")
			} else if !common.IsHexAddress(creditBackAddressRaw) {
				return fmt.Errorf("--credit-back-address argument is not a valid Ethereum address")
			}
			creditBackAddress = common.HexToAddress(creditBackAddressRaw)

			if feeAmountRaw == "" {
				return fmt.Errorf("--fee-amount argument not specified")
			}
			feeAmount = new(big.Int)
			feeAmount.SetString(feeAmountRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewL1OrbitCustomGateway(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := L1OrbitCustomGatewayTransactorSession{
				Contract:     &contract.L1OrbitCustomGatewayTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.RegisterTokenToL2(
				l2Address,
				maxGas,
				gasPriceBid,
				maxSubmissionCost,
				creditBackAddress,
				feeAmount,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&l2AddressRaw, "l-2-address", "", "l-2-address argument")
	cmd.Flags().StringVar(&maxGasRaw, "max-gas", "", "max-gas argument")
	cmd.Flags().StringVar(&gasPriceBidRaw, "gas-price-bid", "", "gas-price-bid argument")
	cmd.Flags().StringVar(&maxSubmissionCostRaw, "max-submission-cost", "", "max-submission-cost argument")
	cmd.Flags().StringVar(&creditBackAddressRaw, "credit-back-address", "", "credit-back-address argument")
	cmd.Flags().StringVar(&feeAmountRaw, "fee-amount", "", "fee-amount argument")

	return cmd
}
func CreateRegisterTokenToL20Command() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var l2Address common.Address
	var l2AddressRaw string
	var maxGas *big.Int
	var maxGasRaw string
	var gasPriceBid *big.Int
	var gasPriceBidRaw string
	var maxSubmissionCost *big.Int
	var maxSubmissionCostRaw string
	var feeAmount *big.Int
	var feeAmountRaw string

	cmd := &cobra.Command{
		Use:   "register-token-to-l-20",
		Short: "Execute the RegisterTokenToL20 method on a L1OrbitCustomGateway contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if l2AddressRaw == "" {
				return fmt.Errorf("--l-2-address argument not specified")
			} else if !common.IsHexAddress(l2AddressRaw) {
				return fmt.Errorf("--l-2-address argument is not a valid Ethereum address")
			}
			l2Address = common.HexToAddress(l2AddressRaw)

			if maxGasRaw == "" {
				return fmt.Errorf("--max-gas argument not specified")
			}
			maxGas = new(big.Int)
			maxGas.SetString(maxGasRaw, 0)

			if gasPriceBidRaw == "" {
				return fmt.Errorf("--gas-price-bid argument not specified")
			}
			gasPriceBid = new(big.Int)
			gasPriceBid.SetString(gasPriceBidRaw, 0)

			if maxSubmissionCostRaw == "" {
				return fmt.Errorf("--max-submission-cost argument not specified")
			}
			maxSubmissionCost = new(big.Int)
			maxSubmissionCost.SetString(maxSubmissionCostRaw, 0)

			if feeAmountRaw == "" {
				return fmt.Errorf("--fee-amount argument not specified")
			}
			feeAmount = new(big.Int)
			feeAmount.SetString(feeAmountRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewL1OrbitCustomGateway(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := L1OrbitCustomGatewayTransactorSession{
				Contract:     &contract.L1OrbitCustomGatewayTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.RegisterTokenToL20(
				l2Address,
				maxGas,
				gasPriceBid,
				maxSubmissionCost,
				feeAmount,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&l2AddressRaw, "l-2-address", "", "l-2-address argument")
	cmd.Flags().StringVar(&maxGasRaw, "max-gas", "", "max-gas argument")
	cmd.Flags().StringVar(&gasPriceBidRaw, "gas-price-bid", "", "gas-price-bid argument")
	cmd.Flags().StringVar(&maxSubmissionCostRaw, "max-submission-cost", "", "max-submission-cost argument")
	cmd.Flags().StringVar(&feeAmountRaw, "fee-amount", "", "fee-amount argument")

	return cmd
}
func CreateRegisterTokenToL22Command() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var arg0 common.Address
	var arg0Raw string
	var arg1 *big.Int
	var arg1Raw string
	var arg2 *big.Int
	var arg2Raw string
	var arg3 *big.Int
	var arg3Raw string

	cmd := &cobra.Command{
		Use:   "register-token-to-l-22",
		Short: "Execute the RegisterTokenToL22 method on a L1OrbitCustomGateway contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			} else if !common.IsHexAddress(arg0Raw) {
				return fmt.Errorf("--arg-0 argument is not a valid Ethereum address")
			}
			arg0 = common.HexToAddress(arg0Raw)

			if arg1Raw == "" {
				return fmt.Errorf("--arg-1 argument not specified")
			}
			arg1 = new(big.Int)
			arg1.SetString(arg1Raw, 0)

			if arg2Raw == "" {
				return fmt.Errorf("--arg-2 argument not specified")
			}
			arg2 = new(big.Int)
			arg2.SetString(arg2Raw, 0)

			if arg3Raw == "" {
				return fmt.Errorf("--arg-3 argument not specified")
			}
			arg3 = new(big.Int)
			arg3.SetString(arg3Raw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewL1OrbitCustomGateway(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := L1OrbitCustomGatewayTransactorSession{
				Contract:     &contract.L1OrbitCustomGatewayTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.RegisterTokenToL22(
				arg0,
				arg1,
				arg2,
				arg3,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")
	cmd.Flags().StringVar(&arg1Raw, "arg-1", "", "arg-1 argument")
	cmd.Flags().StringVar(&arg2Raw, "arg-2", "", "arg-2 argument")
	cmd.Flags().StringVar(&arg3Raw, "arg-3", "", "arg-3 argument")

	return cmd
}
func CreateSetOwnerCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var newOwner common.Address
	var newOwnerRaw string

	cmd := &cobra.Command{
		Use:   "set-owner",
		Short: "Execute the SetOwner method on a L1OrbitCustomGateway contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if newOwnerRaw == "" {
				return fmt.Errorf("--new-owner argument not specified")
			} else if !common.IsHexAddress(newOwnerRaw) {
				return fmt.Errorf("--new-owner argument is not a valid Ethereum address")
			}
			newOwner = common.HexToAddress(newOwnerRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewL1OrbitCustomGateway(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := L1OrbitCustomGatewayTransactorSession{
				Contract:     &contract.L1OrbitCustomGatewayTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.SetOwner(
				newOwner,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&newOwnerRaw, "new-owner", "", "new-owner argument")

	return cmd
}
func CreateFinalizeInboundTransferCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var token common.Address
	var tokenRaw string
	var _from0 common.Address
	var _from0Raw string
	var _to0 common.Address
	var _to0Raw string
	var amount *big.Int
	var amountRaw string
	var data []byte
	var dataRaw string

	cmd := &cobra.Command{
		Use:   "finalize-inbound-transfer",
		Short: "Execute the FinalizeInboundTransfer method on a L1OrbitCustomGateway contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if tokenRaw == "" {
				return fmt.Errorf("--token argument not specified")
			} else if !common.IsHexAddress(tokenRaw) {
				return fmt.Errorf("--token argument is not a valid Ethereum address")
			}
			token = common.HexToAddress(tokenRaw)

			if _from0Raw == "" {
				return fmt.Errorf("---from-0 argument not specified")
			} else if !common.IsHexAddress(_from0Raw) {
				return fmt.Errorf("---from-0 argument is not a valid Ethereum address")
			}
			_from0 = common.HexToAddress(_from0Raw)

			if _to0Raw == "" {
				return fmt.Errorf("---to-0 argument not specified")
			} else if !common.IsHexAddress(_to0Raw) {
				return fmt.Errorf("---to-0 argument is not a valid Ethereum address")
			}
			_to0 = common.HexToAddress(_to0Raw)

			if amountRaw == "" {
				return fmt.Errorf("--amount argument not specified")
			}
			amount = new(big.Int)
			amount.SetString(amountRaw, 0)

			var hexDecodedataErr error

			data, hexDecodedataErr = hex.DecodeString(dataRaw)
			if hexDecodedataErr != nil {
				return hexDecodedataErr
			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewL1OrbitCustomGateway(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := L1OrbitCustomGatewayTransactorSession{
				Contract:     &contract.L1OrbitCustomGatewayTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.FinalizeInboundTransfer(
				token,
				_from0,
				_to0,
				amount,
				data,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&tokenRaw, "token", "", "token argument")
	cmd.Flags().StringVar(&_from0Raw, "-from-0", "", "-from-0 argument")
	cmd.Flags().StringVar(&_to0Raw, "-to-0", "", "-to-0 argument")
	cmd.Flags().StringVar(&amountRaw, "amount", "", "amount argument")
	cmd.Flags().StringVar(&dataRaw, "data", "", "data argument")

	return cmd
}
func CreateInitializeCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var l1Counterpart common.Address
	var l1CounterpartRaw string
	var l1Router common.Address
	var l1RouterRaw string
	var inbox common.Address
	var inboxRaw string
	var owner common.Address
	var ownerRaw string

	cmd := &cobra.Command{
		Use:   "initialize",
		Short: "Execute the Initialize method on a L1OrbitCustomGateway contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if l1CounterpartRaw == "" {
				return fmt.Errorf("--l-1-counterpart argument not specified")
			} else if !common.IsHexAddress(l1CounterpartRaw) {
				return fmt.Errorf("--l-1-counterpart argument is not a valid Ethereum address")
			}
			l1Counterpart = common.HexToAddress(l1CounterpartRaw)

			if l1RouterRaw == "" {
				return fmt.Errorf("--l-1-router argument not specified")
			} else if !common.IsHexAddress(l1RouterRaw) {
				return fmt.Errorf("--l-1-router argument is not a valid Ethereum address")
			}
			l1Router = common.HexToAddress(l1RouterRaw)

			if inboxRaw == "" {
				return fmt.Errorf("--inbox argument not specified")
			} else if !common.IsHexAddress(inboxRaw) {
				return fmt.Errorf("--inbox argument is not a valid Ethereum address")
			}
			inbox = common.HexToAddress(inboxRaw)

			if ownerRaw == "" {
				return fmt.Errorf("--owner argument not specified")
			} else if !common.IsHexAddress(ownerRaw) {
				return fmt.Errorf("--owner argument is not a valid Ethereum address")
			}
			owner = common.HexToAddress(ownerRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewL1OrbitCustomGateway(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := L1OrbitCustomGatewayTransactorSession{
				Contract:     &contract.L1OrbitCustomGatewayTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.Initialize(
				l1Counterpart,
				l1Router,
				inbox,
				owner,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&l1CounterpartRaw, "l-1-counterpart", "", "l-1-counterpart argument")
	cmd.Flags().StringVar(&l1RouterRaw, "l-1-router", "", "l-1-router argument")
	cmd.Flags().StringVar(&inboxRaw, "inbox", "", "inbox argument")
	cmd.Flags().StringVar(&ownerRaw, "owner", "", "owner argument")

	return cmd
}
func CreateTransferExitAndCallCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var exitNum *big.Int
	var exitNumRaw string
	var initialDestination common.Address
	var initialDestinationRaw string
	var newDestination common.Address
	var newDestinationRaw string
	var newData []byte
	var newDataRaw string
	var data []byte
	var dataRaw string

	cmd := &cobra.Command{
		Use:   "transfer-exit-and-call",
		Short: "Execute the TransferExitAndCall method on a L1OrbitCustomGateway contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if exitNumRaw == "" {
				return fmt.Errorf("--exit-num argument not specified")
			}
			exitNum = new(big.Int)
			exitNum.SetString(exitNumRaw, 0)

			if initialDestinationRaw == "" {
				return fmt.Errorf("--initial-destination argument not specified")
			} else if !common.IsHexAddress(initialDestinationRaw) {
				return fmt.Errorf("--initial-destination argument is not a valid Ethereum address")
			}
			initialDestination = common.HexToAddress(initialDestinationRaw)

			if newDestinationRaw == "" {
				return fmt.Errorf("--new-destination argument not specified")
			} else if !common.IsHexAddress(newDestinationRaw) {
				return fmt.Errorf("--new-destination argument is not a valid Ethereum address")
			}
			newDestination = common.HexToAddress(newDestinationRaw)

			var hexDecodenewDataErr error

			newData, hexDecodenewDataErr = hex.DecodeString(newDataRaw)
			if hexDecodenewDataErr != nil {
				return hexDecodenewDataErr
			}

			var hexDecodedataErr error

			data, hexDecodedataErr = hex.DecodeString(dataRaw)
			if hexDecodedataErr != nil {
				return hexDecodedataErr
			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewL1OrbitCustomGateway(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := L1OrbitCustomGatewayTransactorSession{
				Contract:     &contract.L1OrbitCustomGatewayTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.TransferExitAndCall(
				exitNum,
				initialDestination,
				newDestination,
				newData,
				data,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&exitNumRaw, "exit-num", "", "exit-num argument")
	cmd.Flags().StringVar(&initialDestinationRaw, "initial-destination", "", "initial-destination argument")
	cmd.Flags().StringVar(&newDestinationRaw, "new-destination", "", "new-destination argument")
	cmd.Flags().StringVar(&newDataRaw, "new-data", "", "new-data argument")
	cmd.Flags().StringVar(&dataRaw, "data", "", "data argument")

	return cmd
}
func CreateForceRegisterTokenToL2Command() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var arg0 []common.Address
	var arg0Raw string
	var arg1 []common.Address
	var arg1Raw string
	var arg2 *big.Int
	var arg2Raw string
	var arg3 *big.Int
	var arg3Raw string
	var arg4 *big.Int
	var arg4Raw string

	cmd := &cobra.Command{
		Use:   "force-register-token-to-l-2",
		Short: "Execute the ForceRegisterTokenToL2 method on a L1OrbitCustomGateway contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			} else if strings.HasPrefix(arg0Raw, "@") {
				filename := strings.TrimPrefix(arg0Raw, "@")
				contents, readErr := os.ReadFile(filename)
				if readErr != nil {
					return readErr
				}
				unmarshalErr := json.Unmarshal(contents, &arg0)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			} else {
				unmarshalErr := json.Unmarshal([]byte(arg0Raw), &arg0)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			}

			if arg1Raw == "" {
				return fmt.Errorf("--arg-1 argument not specified")
			} else if strings.HasPrefix(arg1Raw, "@") {
				filename := strings.TrimPrefix(arg1Raw, "@")
				contents, readErr := os.ReadFile(filename)
				if readErr != nil {
					return readErr
				}
				unmarshalErr := json.Unmarshal(contents, &arg1)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			} else {
				unmarshalErr := json.Unmarshal([]byte(arg1Raw), &arg1)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			}

			if arg2Raw == "" {
				return fmt.Errorf("--arg-2 argument not specified")
			}
			arg2 = new(big.Int)
			arg2.SetString(arg2Raw, 0)

			if arg3Raw == "" {
				return fmt.Errorf("--arg-3 argument not specified")
			}
			arg3 = new(big.Int)
			arg3.SetString(arg3Raw, 0)

			if arg4Raw == "" {
				return fmt.Errorf("--arg-4 argument not specified")
			}
			arg4 = new(big.Int)
			arg4.SetString(arg4Raw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewL1OrbitCustomGateway(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := L1OrbitCustomGatewayTransactorSession{
				Contract:     &contract.L1OrbitCustomGatewayTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.ForceRegisterTokenToL2(
				arg0,
				arg1,
				arg2,
				arg3,
				arg4,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")
	cmd.Flags().StringVar(&arg1Raw, "arg-1", "", "arg-1 argument")
	cmd.Flags().StringVar(&arg2Raw, "arg-2", "", "arg-2 argument")
	cmd.Flags().StringVar(&arg3Raw, "arg-3", "", "arg-3 argument")
	cmd.Flags().StringVar(&arg4Raw, "arg-4", "", "arg-4 argument")

	return cmd
}

var ErrNoRPCURL error = errors.New("no RPC URL provided -- please pass an RPC URL from the command line or set the L_1_ORBIT_CUSTOM_GATEWAY_RPC_URL environment variable")

// Generates an Ethereum client to the JSONRPC API at the given URL. If rpcURL is empty, then it
// attempts to read the RPC URL from the L_1_ORBIT_CUSTOM_GATEWAY_RPC_URL environment variable. If that is empty,
// too, then it returns an error.
func NewClient(rpcURL string) (*ethclient.Client, error) {
	if rpcURL == "" {
		rpcURL = os.Getenv("L_1_ORBIT_CUSTOM_GATEWAY_RPC_URL")
	}

	if rpcURL == "" {
		return nil, ErrNoRPCURL
	}

	client, err := ethclient.Dial(rpcURL)
	return client, err
}

// Creates a new context to be used when interacting with the chain client.
func NewChainContext(timeout uint) (context.Context, context.CancelFunc) {
	baseCtx := context.Background()
	parsedTimeout := time.Duration(timeout) * time.Second
	ctx, cancel := context.WithTimeout(baseCtx, parsedTimeout)
	return ctx, cancel
}

// Unlocks a key from a keystore (byte contents of a keystore file) with the given password.
func UnlockKeystore(keystoreData []byte, password string) (*keystore.Key, error) {
	key, err := keystore.DecryptKey(keystoreData, password)
	return key, err
}

// Loads a key from file, prompting the user for the password if it is not provided as a function argument.
func KeyFromFile(keystoreFile string, password string) (*keystore.Key, error) {
	var emptyKey *keystore.Key
	keystoreContent, readErr := os.ReadFile(keystoreFile)
	if readErr != nil {
		return emptyKey, readErr
	}

	// If password is "", prompt user for password.
	if password == "" {
		fmt.Printf("Please provide a password for keystore (%s): ", keystoreFile)
		passwordRaw, inputErr := term.ReadPassword(int(os.Stdin.Fd()))
		if inputErr != nil {
			return emptyKey, fmt.Errorf("error reading password: %s", inputErr.Error())
		}
		fmt.Print("\n")
		password = string(passwordRaw)
	}

	key, err := UnlockKeystore(keystoreContent, password)
	return key, err
}

// This method is used to set the parameters on a view call from command line arguments (represented mostly as
// strings).
func SetCallParametersFromArgs(opts *bind.CallOpts, pending bool, fromAddress, blockNumber string) {
	if pending {
		opts.Pending = true
	}

	if fromAddress != "" {
		opts.From = common.HexToAddress(fromAddress)
	}

	if blockNumber != "" {
		opts.BlockNumber = new(big.Int)
		opts.BlockNumber.SetString(blockNumber, 0)
	}
}

// This method is used to set the parameters on a transaction from command line arguments (represented mostly as
// strings).
func SetTransactionParametersFromArgs(opts *bind.TransactOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas string, gasLimit uint64, noSend bool) {
	if nonce != "" {
		opts.Nonce = new(big.Int)
		opts.Nonce.SetString(nonce, 0)
	}

	if value != "" {
		opts.Value = new(big.Int)
		opts.Value.SetString(value, 0)
	}

	if gasPrice != "" {
		opts.GasPrice = new(big.Int)
		opts.GasPrice.SetString(gasPrice, 0)
	}

	if maxFeePerGas != "" {
		opts.GasFeeCap = new(big.Int)
		opts.GasFeeCap.SetString(maxFeePerGas, 0)
	}

	if maxPriorityFeePerGas != "" {
		opts.GasTipCap = new(big.Int)
		opts.GasTipCap.SetString(maxPriorityFeePerGas, 0)
	}

	if gasLimit != 0 {
		opts.GasLimit = gasLimit
	}

	opts.NoSend = noSend
}

func CreateL1OrbitCustomGatewayCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "l-1-orbit-custom-gateway",
		Short: "Interact with the L1OrbitCustomGateway contract",
		Run: func(cmd *cobra.Command, args []string) {
			cmd.Help()
		},
	}

	cmd.SetOut(os.Stdout)

	DeployGroup := &cobra.Group{
		ID: "deploy", Title: "Commands which deploy contracts",
	}
	cmd.AddGroup(DeployGroup)
	ViewGroup := &cobra.Group{
		ID: "view", Title: "Commands which view contract state",
	}
	TransactGroup := &cobra.Group{
		ID: "transact", Title: "Commands which submit transactions",
	}
	cmd.AddGroup(ViewGroup, TransactGroup)

	cmdDeployL1OrbitCustomGateway := CreateL1OrbitCustomGatewayDeploymentCommand()
	cmdDeployL1OrbitCustomGateway.GroupID = DeployGroup.ID
	cmd.AddCommand(cmdDeployL1OrbitCustomGateway)

	cmdViewInbox := CreateInboxCommand()
	cmdViewInbox.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewInbox)
	cmdViewL1ToL2Token := CreateL1ToL2TokenCommand()
	cmdViewL1ToL2Token.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewL1ToL2Token)
	cmdViewSupportsInterface := CreateSupportsInterfaceCommand()
	cmdViewSupportsInterface.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewSupportsInterface)
	cmdViewWhitelist := CreateWhitelistCommand()
	cmdViewWhitelist.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewWhitelist)
	cmdViewRedirectedExits := CreateRedirectedExitsCommand()
	cmdViewRedirectedExits.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewRedirectedExits)
	cmdViewRouter := CreateRouterCommand()
	cmdViewRouter.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewRouter)
	cmdViewCalculateL2TokenAddress := CreateCalculateL2TokenAddressCommand()
	cmdViewCalculateL2TokenAddress.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewCalculateL2TokenAddress)
	cmdViewCounterpartGateway := CreateCounterpartGatewayCommand()
	cmdViewCounterpartGateway.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewCounterpartGateway)
	cmdViewEncodeWithdrawal := CreateEncodeWithdrawalCommand()
	cmdViewEncodeWithdrawal.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewEncodeWithdrawal)
	cmdViewGetExternalCall := CreateGetExternalCallCommand()
	cmdViewGetExternalCall.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewGetExternalCall)
	cmdViewGetOutboundCalldata := CreateGetOutboundCalldataCommand()
	cmdViewGetOutboundCalldata.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewGetOutboundCalldata)
	cmdViewOwner := CreateOwnerCommand()
	cmdViewOwner.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewOwner)

	cmdTransactOutboundTransferCustomRefund := CreateOutboundTransferCustomRefundCommand()
	cmdTransactOutboundTransferCustomRefund.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactOutboundTransferCustomRefund)
	cmdTransactPostUpgradeInit := CreatePostUpgradeInitCommand()
	cmdTransactPostUpgradeInit.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactPostUpgradeInit)
	cmdTransactRegisterTokenToL21 := CreateRegisterTokenToL21Command()
	cmdTransactRegisterTokenToL21.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactRegisterTokenToL21)
	cmdTransactForceRegisterTokenToL20 := CreateForceRegisterTokenToL20Command()
	cmdTransactForceRegisterTokenToL20.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactForceRegisterTokenToL20)
	cmdTransactOutboundTransfer := CreateOutboundTransferCommand()
	cmdTransactOutboundTransfer.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactOutboundTransfer)
	cmdTransactRegisterTokenToL2 := CreateRegisterTokenToL2Command()
	cmdTransactRegisterTokenToL2.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactRegisterTokenToL2)
	cmdTransactRegisterTokenToL20 := CreateRegisterTokenToL20Command()
	cmdTransactRegisterTokenToL20.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactRegisterTokenToL20)
	cmdTransactRegisterTokenToL22 := CreateRegisterTokenToL22Command()
	cmdTransactRegisterTokenToL22.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactRegisterTokenToL22)
	cmdTransactSetOwner := CreateSetOwnerCommand()
	cmdTransactSetOwner.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactSetOwner)
	cmdTransactFinalizeInboundTransfer := CreateFinalizeInboundTransferCommand()
	cmdTransactFinalizeInboundTransfer.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactFinalizeInboundTransfer)
	cmdTransactInitialize := CreateInitializeCommand()
	cmdTransactInitialize.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactInitialize)
	cmdTransactTransferExitAndCall := CreateTransferExitAndCallCommand()
	cmdTransactTransferExitAndCall.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactTransferExitAndCall)
	cmdTransactForceRegisterTokenToL2 := CreateForceRegisterTokenToL2Command()
	cmdTransactForceRegisterTokenToL2.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactForceRegisterTokenToL2)

	return cmd
}

