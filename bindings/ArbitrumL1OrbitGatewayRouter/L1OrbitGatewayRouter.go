// This file was generated by seer: https://github.com/G7DAO/seer.
// seer version: 0.1.3
// seer command: seer evm generate --package ArbitrumOrbitRouter --cli --struct L1OrbitGatewayRouter
// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ArbitrumL1OrbitGatewayRouter

import (
	"errors"
	"math/big"
	"strings"

	"context"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"

	// Reference imports to suppress errors if they are not otherwise used.
	"encoding/hex"
	"encoding/json"
	"fmt"
	"os"
	"time"

	"github.com/ethereum/go-ethereum/accounts/keystore"
	"github.com/ethereum/go-ethereum/ethclient"
	"github.com/spf13/cobra"
	"golang.org/x/term"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// L1OrbitGatewayRouterMetaData contains all meta data concerning the L1OrbitGatewayRouter contract.
var L1OrbitGatewayRouterMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDefaultGateway\",\"type\":\"address\"}],\"name\":\"DefaultGatewayUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gateway\",\"type\":\"address\"}],\"name\":\"GatewaySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_userFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_userTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gateway\",\"type\":\"address\"}],\"name\":\"TransferRouted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_seqNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"TxToL2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newSource\",\"type\":\"address\"}],\"name\":\"WhitelistSourceUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l1ERC20\",\"type\":\"address\"}],\"name\":\"calculateL2TokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counterpartGateway\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultGateway\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"finalizeInboundTransfer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getGateway\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"gateway\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"getOutboundCalldata\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inbox\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_defaultGateway\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_counterpartGateway\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_inbox\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"l1TokenToGateway\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasPriceBid\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"outboundTransfer\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_refundTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasPriceBid\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"outboundTransferCustomRefund\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postUpgradeInit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"setDefaultGateway\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newL1DefaultGateway\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasPriceBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSubmissionCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeAmount\",\"type\":\"uint256\"}],\"name\":\"setDefaultGateway\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"setGateway\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gateway\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasPriceBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSubmissionCost\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_creditBackAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feeAmount\",\"type\":\"uint256\"}],\"name\":\"setGateway\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gateway\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasPriceBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSubmissionCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeAmount\",\"type\":\"uint256\"}],\"name\":\"setGateway\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"setGateway\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_token\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_gateway\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_maxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasPriceBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSubmissionCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeAmount\",\"type\":\"uint256\"}],\"name\":\"setGateways\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"setGateways\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSource\",\"type\":\"address\"}],\"name\":\"updateWhitelistSource\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b506124b8806100206000396000f3fe6080604052600436106101615760003560e01c806393e59dc1116100c1578063d2ce7d651161007a578063d2ce7d65146103b4578063d7f7459c146103c7578063dc121927146103e7578063dd61456914610407578063ed08fdc614610415578063f887ea401461044b578063fb0e722b1461046b57600080fd5b806393e59dc1146102ff57806395fcea781461031f578063a0c76a9614610334578063a7e28d4814610354578063bda009fe14610374578063c9a969971461039457600080fd5b80632e567b361161011e5780632e567b361461024b57806347466f981461025e5780634fb1a07b1461027e57806355654af81461029e5780635625a952146102be578063658b53f4146102d15780638da5cb5b146102df57600080fd5b806301ffc9a714610166578063032958021461019b57806313af4035146101c85780631459457a146101ea5780632d67b72d1461020a5780632db09c1c1461022b575b600080fd5b34801561017257600080fd5b50610186610181366004611a00565b61048b565b60405190151581526020015b60405180910390f35b3480156101a757600080fd5b506004546101bb906001600160a01b031681565b6040516101929190611a2a565b3480156101d457600080fd5b506101e86101e3366004611a53565b6104c2565b005b3480156101f657600080fd5b506101e8610205366004611a70565b61055d565b61021d610218366004611ae1565b6105a3565b604051908152602001610192565b34801561023757600080fd5b506001546101bb906001600160a01b031681565b6101e8610259366004611b71565b6105bd565b34801561026a57600080fd5b506101e8610279366004611a53565b6105fc565b61029161028c366004611bf5565b61069c565b6040516101929190611cdc565b3480156102aa57600080fd5b5061021d6102b9366004611db2565b61079f565b61021d6102cc366004611e38565b6107e6565b61021d6102cc366004611e73565b3480156102eb57600080fd5b506005546101bb906001600160a01b031681565b34801561030b57600080fd5b506000546101bb906001600160a01b031681565b34801561032b57600080fd5b506101e861082b565b34801561034057600080fd5b5061029161034f366004611f18565b6108a3565b34801561036057600080fd5b506101bb61036f366004611a53565b61092c565b34801561038057600080fd5b506101bb61038f366004611a53565b6109c5565b3480156103a057600080fd5b5061021d6103af366004611fd9565b610a25565b6102916103c236600461201d565b610a69565b3480156103d357600080fd5b5061021d6103e23660046120a2565b610a86565b3480156103f357600080fd5b5061021d610402366004611fd9565b610a96565b61021d610218366004611e38565b34801561042157600080fd5b506101bb610430366004611a53565b6003602052600090815260409020546001600160a01b031681565b34801561045757600080fd5b506002546101bb906001600160a01b031681565b34801561047757600080fd5b506006546101bb906001600160a01b031681565b60006001600160e01b03198216634fb1a07b60e01b14806104bc57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6005546001600160a01b031633146104f55760405162461bcd60e51b81526004016104ec90612100565b60405180910390fd5b6001600160a01b03811661053b5760405162461bcd60e51b815260206004820152600d60248201526c24a72b20a624a22fa7aba722a960991b60448201526064016104ec565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b61056982600086610aa6565b600580546001600160a01b039687166001600160a01b03199182161790915560008054821690556006805492909616911617909355505050565b600060405162461bcd60e51b81526004016104ec90612124565b60405162461bcd60e51b815260206004820152601460248201527327a7262cafa7aaaa2127aaa7222fa927aaaa22a960611b60448201526064016104ec565b6000546001600160a01b031633146106465760405162461bcd60e51b815260206004820152600d60248201526c1393d517d19493d357d31254d5609a1b60448201526064016104ec565b600080546001600160a01b0319166001600160a01b0383161790556040517f37389c47920d5cc3229678a0205d0455002c07541a4139ebdce91ac22746577790610691908390611a2a565b60405180910390a150565b606060006106a98a6109c5565b905060006106b8338686610b18565b9050886001600160a01b0316336001600160a01b03168c6001600160a01b03167f85291dff2161a93c2f12c819d31889c96c63042116f5bc5a205aa701c2c429f5856040516107079190611a2a565b60405180910390a4604051634fb1a07b60e01b81526001600160a01b03831690634fb1a07b903490610749908f908f908f908f908f908f908b90600401612154565b60006040518083038185885af1158015610767573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f191682016040526107909190810190612199565b9b9a5050505050505050505050565b6005546000906001600160a01b031633146107cc5760405162461bcd60e51b81526004016104ec90612100565b6107db87878787873388610b47565b979650505050505050565b6005546000906001600160a01b031633146108135760405162461bcd60e51b81526004016104ec90612100565b60405162461bcd60e51b81526004016104ec90612124565b60006108557fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b9050336001600160a01b038216146108a05760405162461bcd60e51b815260206004820152600e60248201526d2727aa2fa32927a6afa0a226a4a760911b60448201526064016104ec565b50565b606060006108b0876109c5565b604051635063b54b60e11b81529091506001600160a01b0382169063a0c76a96906108e7908a908a908a908a908a9060040161220f565b600060405180830381865afa158015610904573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107db9190810190612199565b600080610938836109c5565b90506001600160a01b0381166109515750600092915050565b6040516314fc51a960e31b81526001600160a01b0382169063a7e28d489061097d908690600401611a2a565b602060405180830381865afa15801561099a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109be919061224a565b9392505050565b6001600160a01b0380821660009081526003602052604090205416806109f357506004546001600160a01b03165b6001600160a01b03811660011480610a1357506001600160a01b0381163b155b15610a2057506000919050565b919050565b6005546000906001600160a01b03163314610a525760405162461bcd60e51b81526004016104ec90612100565b610a5f8686868686610f50565b9695505050505050565b6060610a7a888888888888886110ac565b98975050505050505050565b60006107db8787878787876111ac565b6000610a5f868686863387610a86565b6001600160a01b03821615610aea5760405162461bcd60e51b815260206004820152600a6024820152692120a22fa927aaaa22a960b11b60448201526064016104ec565b610af483836113ef565b600480546001600160a01b0319166001600160a01b03929092169190911790555050565b6060838383604051602001610b2f93929190612267565b60405160208183030381529060405290509392505050565b60008651885114610b895760405162461bcd60e51b815260206004820152600c60248201526b0aea49e9c8ebe988a9c8ea8960a31b60448201526064016104ec565b60005b8851811015610eb057878181518110610ba757610ba76122a7565b6020026020010151600360008b8481518110610bc557610bc56122a7565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550878181518110610c2357610c236122a7565b60200260200101516001600160a01b0316898281518110610c4657610c466122a7565b60200260200101516001600160a01b03167f812ca95fe4492a9e2d1f2723c2c40c03a60a27b059581ae20ac4e4d73bfba35460405160405180910390a360006001600160a01b0316888281518110610ca057610ca06122a7565b60200260200101516001600160a01b031614158015610ceb575060016001600160a01b0316888281518110610cd757610cd76122a7565b60200260200101516001600160a01b031614155b15610e9e5760006001600160a01b0316888281518110610d0d57610d0d6122a7565b60200260200101516001600160a01b031663a7e28d488b8481518110610d3557610d356122a7565b60200260200101516040518263ffffffff1660e01b8152600401610d599190611a2a565b602060405180830381865afa158015610d76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9a919061224a565b6001600160a01b031603610df05760405162461bcd60e51b815260206004820152601c60248201527f544f4b454e5f4e4f545f48414e444c45445f42595f474154455741590000000060448201526064016104ec565b878181518110610e0257610e026122a7565b60200260200101516001600160a01b0316632db09c1c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6b919061224a565b888281518110610e7d57610e7d6122a7565b60200260200101906001600160a01b031690816001600160a01b0316815250505b80610ea8816122d3565b915050610b8c565b506000634201f98560e01b8989604051602401610ece929190612330565b60408051601f19818403018152918152602080830180516001600160e01b03166001600160e01b03199095169490941790935260065460015482516060810184528a81529485018c90529184018a9052919350610f43926001600160a01b0392831692919091169087908790600090876114b1565b9998505050505050505050565b600480546001600160a01b0319166001600160a01b0387161790556040516000907f3a8f8eb961383a94d41d193e16a3af73eaddfd5764a4c640257323a1603ac33190610f9e908890611a2a565b60405180910390a160006001600160a01b0387161561101c57866001600160a01b0316632db09c1c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ff5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611019919061224a565b90505b600063f7c9362f60e01b826040516024016110379190611a2a565b60408051601f19818403018152918152602080830180516001600160e01b03166001600160e01b03199095169490941790935260065460015482516060810184528a81529485018c90529184018a9052919350610a7a926001600160a01b0392831692919091169033908890600090876114b1565b606060006110b9896109c5565b905060006110c8338686610b18565b9050886001600160a01b0316336001600160a01b03168b6001600160a01b03167f85291dff2161a93c2f12c819d31889c96c63042116f5bc5a205aa701c2c429f5856040516111179190611a2a565b60405180910390a460405163d2ce7d6560e01b81526001600160a01b0383169063d2ce7d65903490611157908e908e908e908e908e908a90600401612355565b60006040518083038185885af1158015611175573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f1916820160405261119e9190810190612199565b9a9950505050505050505050565b600060b160ff16336001600160a01b0316638e5f5ad16040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112159190612392565b60ff16146112575760405162461bcd60e51b815260206004820152600f60248201526e1393d517d0549097d1539050931151608a1b60448201526064016104ec565b6001600160a01b0387163b6112a05760405162461bcd60e51b815260206004820152600f60248201526e1393d517d513d7d0d3d395149050d5608a1b60448201526064016104ec565b60006112ab336109c5565b90506001600160a01b038116158015906112d357506004546001600160a01b03828116911614155b1561133957876001600160a01b0316816001600160a01b0316146113395760405162461bcd60e51b815260206004820152601b60248201527f4e4f5f5550444154455f544f5f444946464552454e545f41444452000000000060448201526064016104ec565b60408051600180825281830190925260009160208083019080368337019050509050338160008151811061136f5761136f6122a7565b6001600160a01b03929092166020928302919091019091015260408051600180825281830190925260009181602001602082028036833701905050905089816000815181106113c0576113c06122a7565b60200260200101906001600160a01b031690816001600160a01b03168152505061119e82828b8b8b8b8b610b47565b6001600160a01b03821661143b5760405162461bcd60e51b81526020600482015260136024820152721253959053125117d0d3d55395115494105495606a1b60448201526064016104ec565b6001546001600160a01b0316156114835760405162461bcd60e51b815260206004820152600c60248201526b1053149150511657d253925560a21b60448201526064016104ec565b600180546001600160a01b039384166001600160a01b03199182161790915560028054929093169116179055565b6000610a7a8888888888886000015189602001518a604001518a600061119e8a8a8a8b8b8b8b8b8b8b6000806114ef8c8c8c8c8c8c8c8c8c8c61154c565b9050808b6001600160a01b03168a6001600160a01b03167fc1d1490cf25c3b40d600dfb27c7680340ed1ab901b7e8f3551280968a3b372b0866040516115359190611cdc565b60405180910390a49b9a5050505050505050505050565b6000806115588c6116e5565b6001600160a01b031663e1758bd86040518163ffffffff1660e01b8152600401602060405180830381865afa158015611595573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b9919061224a565b90506000816001600160a01b03166370a082318e6040518263ffffffff1660e01b81526004016115e99190611a2a565b602060405180830381865afa158015611606573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061162a91906123b5565b905088811015611664576000611640828b6123ce565b9050611662338f83866001600160a01b0316611749909392919063ffffffff16565b505b50508a6001600160a01b031663549e84268b88888d8d8a8a8f8b6040518a63ffffffff1660e01b81526004016116a2999897969594939291906123e1565b6020604051808303816000875af11580156116c1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079091906123b5565b6000816001600160a01b031663e78cea926040518163ffffffff1660e01b8152600401602060405180830381865afa158015611725573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104bc919061224a565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526117a39085906117a9565b50505050565b60006117fe826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166118809092919063ffffffff16565b80519091501561187b578080602001905181019061181c9190612444565b61187b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016104ec565b505050565b606061188f8484600085611897565b949350505050565b6060824710156118f85760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016104ec565b600080866001600160a01b031685876040516119149190612466565b60006040518083038185875af1925050503d8060008114611951576040519150601f19603f3d011682016040523d82523d6000602084013e611956565b606091505b50915091506107db87838387606083156119d15782516000036119ca576001600160a01b0385163b6119ca5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104ec565b508161188f565b61188f83838151156119e65781518083602001fd5b8060405162461bcd60e51b81526004016104ec9190611cdc565b600060208284031215611a1257600080fd5b81356001600160e01b0319811681146109be57600080fd5b6001600160a01b0391909116815260200190565b6001600160a01b03811681146108a057600080fd5b600060208284031215611a6557600080fd5b81356109be81611a3e565b600080600080600060a08688031215611a8857600080fd5b8535611a9381611a3e565b94506020860135611aa381611a3e565b93506040860135611ab381611a3e565b92506060860135611ac381611a3e565b91506080860135611ad381611a3e565b809150509295509295909350565b600080600080600060a08688031215611af957600080fd5b8535611b0481611a3e565b94506020860135935060408601359250606086013591506080860135611ad381611a3e565b60008083601f840112611b3b57600080fd5b5081356001600160401b03811115611b5257600080fd5b602083019150836020828501011115611b6a57600080fd5b9250929050565b60008060008060008060a08789031215611b8a57600080fd5b8635611b9581611a3e565b95506020870135611ba581611a3e565b94506040870135611bb581611a3e565b93506060870135925060808701356001600160401b03811115611bd757600080fd5b611be389828a01611b29565b979a9699509497509295939492505050565b60008060008060008060008060e0898b031215611c1157600080fd5b8835611c1c81611a3e565b97506020890135611c2c81611a3e565b96506040890135611c3c81611a3e565b9550606089013594506080890135935060a0890135925060c08901356001600160401b03811115611c6c57600080fd5b611c788b828c01611b29565b999c989b5096995094979396929594505050565b60005b83811015611ca7578181015183820152602001611c8f565b50506000910152565b60008151808452611cc8816020860160208601611c8c565b601f01601f19169290920160200192915050565b6020815260006109be6020830184611cb0565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715611d2d57611d2d611cef565b604052919050565b600082601f830112611d4657600080fd5b813560206001600160401b03821115611d6157611d61611cef565b8160051b611d70828201611d05565b9283528481018201928281019087851115611d8a57600080fd5b83870192505b848310156107db578235611da381611a3e565b82529183019190830190611d90565b60008060008060008060c08789031215611dcb57600080fd5b86356001600160401b0380821115611de257600080fd5b611dee8a838b01611d35565b97506020890135915080821115611e0457600080fd5b50611e1189828a01611d35565b96999698505050506040850135946060810135946080820135945060a09091013592509050565b60008060008060808587031215611e4e57600080fd5b8435611e5981611a3e565b966020860135965060408601359560600135945092505050565b600080600080600060a08688031215611e8b57600080fd5b85356001600160401b0380821115611ea257600080fd5b611eae89838a01611d35565b96506020880135915080821115611ec457600080fd5b50611ed188828901611d35565b959895975050505060408401359360608101359360809091013592509050565b60006001600160401b03821115611f0a57611f0a611cef565b50601f01601f191660200190565b600080600080600060a08688031215611f3057600080fd5b8535611f3b81611a3e565b94506020860135611f4b81611a3e565b93506040860135611f5b81611a3e565b92506060860135915060808601356001600160401b03811115611f7d57600080fd5b8601601f81018813611f8e57600080fd5b8035611fa1611f9c82611ef1565b611d05565b818152896020838501011115611fb657600080fd5b816020840160208301376000602083830101528093505050509295509295909350565b600080600080600060a08688031215611ff157600080fd5b8535611ffc81611a3e565b97602087013597506040870135966060810135965060800135945092505050565b600080600080600080600060c0888a03121561203857600080fd5b873561204381611a3e565b9650602088013561205381611a3e565b955060408801359450606088013593506080880135925060a08801356001600160401b0381111561208357600080fd5b61208f8a828b01611b29565b989b979a50959850939692959293505050565b60008060008060008060c087890312156120bb57600080fd5b86356120c681611a3e565b955060208701359450604087013593506060870135925060808701356120eb81611a3e565b8092505060a087013590509295509295509295565b6020808252600a908201526927a7262cafa7aba722a960b11b604082015260600190565b6020808252601690820152751393d517d4d5541413d495115117d25397d3d490925560521b604082015260600190565b600060018060a01b03808a16835280891660208401528088166040840152508560608301528460808301528360a083015260e060c0830152610f4360e0830184611cb0565b6000602082840312156121ab57600080fd5b81516001600160401b038111156121c157600080fd5b8201601f810184136121d257600080fd5b80516121e0611f9c82611ef1565b8181528560208385010111156121f557600080fd5b612206826020830160208601611c8c565b95945050505050565b6001600160a01b0386811682528581166020830152841660408201526060810183905260a0608082018190526000906107db90830184611cb0565b60006020828403121561225c57600080fd5b81516109be81611a3e565b6001600160a01b03841681526040602082018190528101829052818360608301376000818301606090810191909152601f909201601f1916010192915050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016122e5576122e56122bd565b5060010190565b600081518084526020808501945080840160005b838110156123255781516001600160a01b031687529582019590820190600101612300565b509495945050505050565b60408152600061234360408301856122ec565b828103602084015261220681856122ec565b600060018060a01b03808916835280881660208401525085604083015284606083015283608083015260c060a0830152610a7a60c0830184611cb0565b6000602082840312156123a457600080fd5b815160ff811681146109be57600080fd5b6000602082840312156123c757600080fd5b5051919050565b818103818111156104bc576104bc6122bd565b600061012060018060a01b03808d1684528b60208501528a6040850152808a1660608501528089166080850152508660a08401528560c08401528460e08401528061010084015261243481840185611cb0565b9c9b505050505050505050505050565b60006020828403121561245657600080fd5b815180151581146109be57600080fd5b60008251612478818460208701611c8c565b919091019291505056fea2646970667358221220edafcc4803f21291b68e286e9a52662e67d5783c549b1bd06cd5e62832c266b964736f6c63430008100033",
}

// L1OrbitGatewayRouterABI is the input ABI used to generate the binding from.
// Deprecated: Use L1OrbitGatewayRouterMetaData.ABI instead.
var L1OrbitGatewayRouterABI = L1OrbitGatewayRouterMetaData.ABI

// L1OrbitGatewayRouterBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use L1OrbitGatewayRouterMetaData.Bin instead.
var L1OrbitGatewayRouterBin = L1OrbitGatewayRouterMetaData.Bin

// DeployL1OrbitGatewayRouter deploys a new Ethereum contract, binding an instance of L1OrbitGatewayRouter to it.
func DeployL1OrbitGatewayRouter(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *L1OrbitGatewayRouter, error) {
	parsed, err := L1OrbitGatewayRouterMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(L1OrbitGatewayRouterBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &L1OrbitGatewayRouter{L1OrbitGatewayRouterCaller: L1OrbitGatewayRouterCaller{contract: contract}, L1OrbitGatewayRouterTransactor: L1OrbitGatewayRouterTransactor{contract: contract}, L1OrbitGatewayRouterFilterer: L1OrbitGatewayRouterFilterer{contract: contract}}, nil
}

// L1OrbitGatewayRouter is an auto generated Go binding around an Ethereum contract.
type L1OrbitGatewayRouter struct {
	L1OrbitGatewayRouterCaller     // Read-only binding to the contract
	L1OrbitGatewayRouterTransactor // Write-only binding to the contract
	L1OrbitGatewayRouterFilterer   // Log filterer for contract events
}

// L1OrbitGatewayRouterCaller is an auto generated read-only Go binding around an Ethereum contract.
type L1OrbitGatewayRouterCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// L1OrbitGatewayRouterTransactor is an auto generated write-only Go binding around an Ethereum contract.
type L1OrbitGatewayRouterTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// L1OrbitGatewayRouterFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type L1OrbitGatewayRouterFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// L1OrbitGatewayRouterSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type L1OrbitGatewayRouterSession struct {
	Contract     *L1OrbitGatewayRouter // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// L1OrbitGatewayRouterCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type L1OrbitGatewayRouterCallerSession struct {
	Contract *L1OrbitGatewayRouterCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// L1OrbitGatewayRouterTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type L1OrbitGatewayRouterTransactorSession struct {
	Contract     *L1OrbitGatewayRouterTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// L1OrbitGatewayRouterRaw is an auto generated low-level Go binding around an Ethereum contract.
type L1OrbitGatewayRouterRaw struct {
	Contract *L1OrbitGatewayRouter // Generic contract binding to access the raw methods on
}

// L1OrbitGatewayRouterCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type L1OrbitGatewayRouterCallerRaw struct {
	Contract *L1OrbitGatewayRouterCaller // Generic read-only contract binding to access the raw methods on
}

// L1OrbitGatewayRouterTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type L1OrbitGatewayRouterTransactorRaw struct {
	Contract *L1OrbitGatewayRouterTransactor // Generic write-only contract binding to access the raw methods on
}

// NewL1OrbitGatewayRouter creates a new instance of L1OrbitGatewayRouter, bound to a specific deployed contract.
func NewL1OrbitGatewayRouter(address common.Address, backend bind.ContractBackend) (*L1OrbitGatewayRouter, error) {
	contract, err := bindL1OrbitGatewayRouter(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &L1OrbitGatewayRouter{L1OrbitGatewayRouterCaller: L1OrbitGatewayRouterCaller{contract: contract}, L1OrbitGatewayRouterTransactor: L1OrbitGatewayRouterTransactor{contract: contract}, L1OrbitGatewayRouterFilterer: L1OrbitGatewayRouterFilterer{contract: contract}}, nil
}

// NewL1OrbitGatewayRouterCaller creates a new read-only instance of L1OrbitGatewayRouter, bound to a specific deployed contract.
func NewL1OrbitGatewayRouterCaller(address common.Address, caller bind.ContractCaller) (*L1OrbitGatewayRouterCaller, error) {
	contract, err := bindL1OrbitGatewayRouter(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &L1OrbitGatewayRouterCaller{contract: contract}, nil
}

// NewL1OrbitGatewayRouterTransactor creates a new write-only instance of L1OrbitGatewayRouter, bound to a specific deployed contract.
func NewL1OrbitGatewayRouterTransactor(address common.Address, transactor bind.ContractTransactor) (*L1OrbitGatewayRouterTransactor, error) {
	contract, err := bindL1OrbitGatewayRouter(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &L1OrbitGatewayRouterTransactor{contract: contract}, nil
}

// NewL1OrbitGatewayRouterFilterer creates a new log filterer instance of L1OrbitGatewayRouter, bound to a specific deployed contract.
func NewL1OrbitGatewayRouterFilterer(address common.Address, filterer bind.ContractFilterer) (*L1OrbitGatewayRouterFilterer, error) {
	contract, err := bindL1OrbitGatewayRouter(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &L1OrbitGatewayRouterFilterer{contract: contract}, nil
}

// bindL1OrbitGatewayRouter binds a generic wrapper to an already deployed contract.
func bindL1OrbitGatewayRouter(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := L1OrbitGatewayRouterMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _L1OrbitGatewayRouter.Contract.L1OrbitGatewayRouterCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _L1OrbitGatewayRouter.Contract.L1OrbitGatewayRouterTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _L1OrbitGatewayRouter.Contract.L1OrbitGatewayRouterTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _L1OrbitGatewayRouter.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _L1OrbitGatewayRouter.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _L1OrbitGatewayRouter.Contract.contract.Transact(opts, method, params...)
}

// CalculateL2TokenAddress is a free data retrieval call binding the contract method 0xa7e28d48.
//
// Solidity: function calculateL2TokenAddress(address l1ERC20) view returns(address)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterCaller) CalculateL2TokenAddress(opts *bind.CallOpts, l1ERC20 common.Address) (common.Address, error) {
	var out []interface{}
	err := _L1OrbitGatewayRouter.contract.Call(opts, &out, "calculateL2TokenAddress", l1ERC20)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// CalculateL2TokenAddress is a free data retrieval call binding the contract method 0xa7e28d48.
//
// Solidity: function calculateL2TokenAddress(address l1ERC20) view returns(address)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterSession) CalculateL2TokenAddress(l1ERC20 common.Address) (common.Address, error) {
	return _L1OrbitGatewayRouter.Contract.CalculateL2TokenAddress(&_L1OrbitGatewayRouter.CallOpts, l1ERC20)
}

// CalculateL2TokenAddress is a free data retrieval call binding the contract method 0xa7e28d48.
//
// Solidity: function calculateL2TokenAddress(address l1ERC20) view returns(address)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterCallerSession) CalculateL2TokenAddress(l1ERC20 common.Address) (common.Address, error) {
	return _L1OrbitGatewayRouter.Contract.CalculateL2TokenAddress(&_L1OrbitGatewayRouter.CallOpts, l1ERC20)
}

// CounterpartGateway is a free data retrieval call binding the contract method 0x2db09c1c.
//
// Solidity: function counterpartGateway() view returns(address)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterCaller) CounterpartGateway(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _L1OrbitGatewayRouter.contract.Call(opts, &out, "counterpartGateway")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// CounterpartGateway is a free data retrieval call binding the contract method 0x2db09c1c.
//
// Solidity: function counterpartGateway() view returns(address)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterSession) CounterpartGateway() (common.Address, error) {
	return _L1OrbitGatewayRouter.Contract.CounterpartGateway(&_L1OrbitGatewayRouter.CallOpts)
}

// CounterpartGateway is a free data retrieval call binding the contract method 0x2db09c1c.
//
// Solidity: function counterpartGateway() view returns(address)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterCallerSession) CounterpartGateway() (common.Address, error) {
	return _L1OrbitGatewayRouter.Contract.CounterpartGateway(&_L1OrbitGatewayRouter.CallOpts)
}

// DefaultGateway is a free data retrieval call binding the contract method 0x03295802.
//
// Solidity: function defaultGateway() view returns(address)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterCaller) DefaultGateway(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _L1OrbitGatewayRouter.contract.Call(opts, &out, "defaultGateway")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// DefaultGateway is a free data retrieval call binding the contract method 0x03295802.
//
// Solidity: function defaultGateway() view returns(address)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterSession) DefaultGateway() (common.Address, error) {
	return _L1OrbitGatewayRouter.Contract.DefaultGateway(&_L1OrbitGatewayRouter.CallOpts)
}

// DefaultGateway is a free data retrieval call binding the contract method 0x03295802.
//
// Solidity: function defaultGateway() view returns(address)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterCallerSession) DefaultGateway() (common.Address, error) {
	return _L1OrbitGatewayRouter.Contract.DefaultGateway(&_L1OrbitGatewayRouter.CallOpts)
}

// GetGateway is a free data retrieval call binding the contract method 0xbda009fe.
//
// Solidity: function getGateway(address _token) view returns(address gateway)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterCaller) GetGateway(opts *bind.CallOpts, _token common.Address) (common.Address, error) {
	var out []interface{}
	err := _L1OrbitGatewayRouter.contract.Call(opts, &out, "getGateway", _token)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetGateway is a free data retrieval call binding the contract method 0xbda009fe.
//
// Solidity: function getGateway(address _token) view returns(address gateway)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterSession) GetGateway(_token common.Address) (common.Address, error) {
	return _L1OrbitGatewayRouter.Contract.GetGateway(&_L1OrbitGatewayRouter.CallOpts, _token)
}

// GetGateway is a free data retrieval call binding the contract method 0xbda009fe.
//
// Solidity: function getGateway(address _token) view returns(address gateway)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterCallerSession) GetGateway(_token common.Address) (common.Address, error) {
	return _L1OrbitGatewayRouter.Contract.GetGateway(&_L1OrbitGatewayRouter.CallOpts, _token)
}

// GetOutboundCalldata is a free data retrieval call binding the contract method 0xa0c76a96.
//
// Solidity: function getOutboundCalldata(address _token, address _from, address _to, uint256 _amount, bytes _data) view returns(bytes)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterCaller) GetOutboundCalldata(opts *bind.CallOpts, _token common.Address, _from common.Address, _to common.Address, _amount *big.Int, _data []byte) ([]byte, error) {
	var out []interface{}
	err := _L1OrbitGatewayRouter.contract.Call(opts, &out, "getOutboundCalldata", _token, _from, _to, _amount, _data)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GetOutboundCalldata is a free data retrieval call binding the contract method 0xa0c76a96.
//
// Solidity: function getOutboundCalldata(address _token, address _from, address _to, uint256 _amount, bytes _data) view returns(bytes)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterSession) GetOutboundCalldata(_token common.Address, _from common.Address, _to common.Address, _amount *big.Int, _data []byte) ([]byte, error) {
	return _L1OrbitGatewayRouter.Contract.GetOutboundCalldata(&_L1OrbitGatewayRouter.CallOpts, _token, _from, _to, _amount, _data)
}

// GetOutboundCalldata is a free data retrieval call binding the contract method 0xa0c76a96.
//
// Solidity: function getOutboundCalldata(address _token, address _from, address _to, uint256 _amount, bytes _data) view returns(bytes)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterCallerSession) GetOutboundCalldata(_token common.Address, _from common.Address, _to common.Address, _amount *big.Int, _data []byte) ([]byte, error) {
	return _L1OrbitGatewayRouter.Contract.GetOutboundCalldata(&_L1OrbitGatewayRouter.CallOpts, _token, _from, _to, _amount, _data)
}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterCaller) Inbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _L1OrbitGatewayRouter.contract.Call(opts, &out, "inbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterSession) Inbox() (common.Address, error) {
	return _L1OrbitGatewayRouter.Contract.Inbox(&_L1OrbitGatewayRouter.CallOpts)
}

// Inbox is a free data retrieval call binding the contract method 0xfb0e722b.
//
// Solidity: function inbox() view returns(address)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterCallerSession) Inbox() (common.Address, error) {
	return _L1OrbitGatewayRouter.Contract.Inbox(&_L1OrbitGatewayRouter.CallOpts)
}

// L1TokenToGateway is a free data retrieval call binding the contract method 0xed08fdc6.
//
// Solidity: function l1TokenToGateway(address ) view returns(address)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterCaller) L1TokenToGateway(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var out []interface{}
	err := _L1OrbitGatewayRouter.contract.Call(opts, &out, "l1TokenToGateway", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// L1TokenToGateway is a free data retrieval call binding the contract method 0xed08fdc6.
//
// Solidity: function l1TokenToGateway(address ) view returns(address)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterSession) L1TokenToGateway(arg0 common.Address) (common.Address, error) {
	return _L1OrbitGatewayRouter.Contract.L1TokenToGateway(&_L1OrbitGatewayRouter.CallOpts, arg0)
}

// L1TokenToGateway is a free data retrieval call binding the contract method 0xed08fdc6.
//
// Solidity: function l1TokenToGateway(address ) view returns(address)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterCallerSession) L1TokenToGateway(arg0 common.Address) (common.Address, error) {
	return _L1OrbitGatewayRouter.Contract.L1TokenToGateway(&_L1OrbitGatewayRouter.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _L1OrbitGatewayRouter.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterSession) Owner() (common.Address, error) {
	return _L1OrbitGatewayRouter.Contract.Owner(&_L1OrbitGatewayRouter.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterCallerSession) Owner() (common.Address, error) {
	return _L1OrbitGatewayRouter.Contract.Owner(&_L1OrbitGatewayRouter.CallOpts)
}

// Router is a free data retrieval call binding the contract method 0xf887ea40.
//
// Solidity: function router() view returns(address)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterCaller) Router(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _L1OrbitGatewayRouter.contract.Call(opts, &out, "router")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Router is a free data retrieval call binding the contract method 0xf887ea40.
//
// Solidity: function router() view returns(address)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterSession) Router() (common.Address, error) {
	return _L1OrbitGatewayRouter.Contract.Router(&_L1OrbitGatewayRouter.CallOpts)
}

// Router is a free data retrieval call binding the contract method 0xf887ea40.
//
// Solidity: function router() view returns(address)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterCallerSession) Router() (common.Address, error) {
	return _L1OrbitGatewayRouter.Contract.Router(&_L1OrbitGatewayRouter.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _L1OrbitGatewayRouter.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _L1OrbitGatewayRouter.Contract.SupportsInterface(&_L1OrbitGatewayRouter.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _L1OrbitGatewayRouter.Contract.SupportsInterface(&_L1OrbitGatewayRouter.CallOpts, interfaceId)
}

// Whitelist is a free data retrieval call binding the contract method 0x93e59dc1.
//
// Solidity: function whitelist() view returns(address)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterCaller) Whitelist(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _L1OrbitGatewayRouter.contract.Call(opts, &out, "whitelist")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Whitelist is a free data retrieval call binding the contract method 0x93e59dc1.
//
// Solidity: function whitelist() view returns(address)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterSession) Whitelist() (common.Address, error) {
	return _L1OrbitGatewayRouter.Contract.Whitelist(&_L1OrbitGatewayRouter.CallOpts)
}

// Whitelist is a free data retrieval call binding the contract method 0x93e59dc1.
//
// Solidity: function whitelist() view returns(address)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterCallerSession) Whitelist() (common.Address, error) {
	return _L1OrbitGatewayRouter.Contract.Whitelist(&_L1OrbitGatewayRouter.CallOpts)
}

// FinalizeInboundTransfer is a paid mutator transaction binding the contract method 0x2e567b36.
//
// Solidity: function finalizeInboundTransfer(address , address , address , uint256 , bytes ) payable returns()
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterTransactor) FinalizeInboundTransfer(opts *bind.TransactOpts, arg0 common.Address, arg1 common.Address, arg2 common.Address, arg3 *big.Int, arg4 []byte) (*types.Transaction, error) {
	return _L1OrbitGatewayRouter.contract.Transact(opts, "finalizeInboundTransfer", arg0, arg1, arg2, arg3, arg4)
}

// FinalizeInboundTransfer is a paid mutator transaction binding the contract method 0x2e567b36.
//
// Solidity: function finalizeInboundTransfer(address , address , address , uint256 , bytes ) payable returns()
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterSession) FinalizeInboundTransfer(arg0 common.Address, arg1 common.Address, arg2 common.Address, arg3 *big.Int, arg4 []byte) (*types.Transaction, error) {
	return _L1OrbitGatewayRouter.Contract.FinalizeInboundTransfer(&_L1OrbitGatewayRouter.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// FinalizeInboundTransfer is a paid mutator transaction binding the contract method 0x2e567b36.
//
// Solidity: function finalizeInboundTransfer(address , address , address , uint256 , bytes ) payable returns()
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterTransactorSession) FinalizeInboundTransfer(arg0 common.Address, arg1 common.Address, arg2 common.Address, arg3 *big.Int, arg4 []byte) (*types.Transaction, error) {
	return _L1OrbitGatewayRouter.Contract.FinalizeInboundTransfer(&_L1OrbitGatewayRouter.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// Initialize is a paid mutator transaction binding the contract method 0x1459457a.
//
// Solidity: function initialize(address _owner, address _defaultGateway, address , address _counterpartGateway, address _inbox) returns()
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterTransactor) Initialize(opts *bind.TransactOpts, _owner common.Address, _defaultGateway common.Address, arg2 common.Address, _counterpartGateway common.Address, _inbox common.Address) (*types.Transaction, error) {
	return _L1OrbitGatewayRouter.contract.Transact(opts, "initialize", _owner, _defaultGateway, arg2, _counterpartGateway, _inbox)
}

// Initialize is a paid mutator transaction binding the contract method 0x1459457a.
//
// Solidity: function initialize(address _owner, address _defaultGateway, address , address _counterpartGateway, address _inbox) returns()
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterSession) Initialize(_owner common.Address, _defaultGateway common.Address, arg2 common.Address, _counterpartGateway common.Address, _inbox common.Address) (*types.Transaction, error) {
	return _L1OrbitGatewayRouter.Contract.Initialize(&_L1OrbitGatewayRouter.TransactOpts, _owner, _defaultGateway, arg2, _counterpartGateway, _inbox)
}

// Initialize is a paid mutator transaction binding the contract method 0x1459457a.
//
// Solidity: function initialize(address _owner, address _defaultGateway, address , address _counterpartGateway, address _inbox) returns()
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterTransactorSession) Initialize(_owner common.Address, _defaultGateway common.Address, arg2 common.Address, _counterpartGateway common.Address, _inbox common.Address) (*types.Transaction, error) {
	return _L1OrbitGatewayRouter.Contract.Initialize(&_L1OrbitGatewayRouter.TransactOpts, _owner, _defaultGateway, arg2, _counterpartGateway, _inbox)
}

// OutboundTransfer is a paid mutator transaction binding the contract method 0xd2ce7d65.
//
// Solidity: function outboundTransfer(address _token, address _to, uint256 _amount, uint256 _maxGas, uint256 _gasPriceBid, bytes _data) payable returns(bytes)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterTransactor) OutboundTransfer(opts *bind.TransactOpts, _token common.Address, _to common.Address, _amount *big.Int, _maxGas *big.Int, _gasPriceBid *big.Int, _data []byte) (*types.Transaction, error) {
	return _L1OrbitGatewayRouter.contract.Transact(opts, "outboundTransfer", _token, _to, _amount, _maxGas, _gasPriceBid, _data)
}

// OutboundTransfer is a paid mutator transaction binding the contract method 0xd2ce7d65.
//
// Solidity: function outboundTransfer(address _token, address _to, uint256 _amount, uint256 _maxGas, uint256 _gasPriceBid, bytes _data) payable returns(bytes)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterSession) OutboundTransfer(_token common.Address, _to common.Address, _amount *big.Int, _maxGas *big.Int, _gasPriceBid *big.Int, _data []byte) (*types.Transaction, error) {
	return _L1OrbitGatewayRouter.Contract.OutboundTransfer(&_L1OrbitGatewayRouter.TransactOpts, _token, _to, _amount, _maxGas, _gasPriceBid, _data)
}

// OutboundTransfer is a paid mutator transaction binding the contract method 0xd2ce7d65.
//
// Solidity: function outboundTransfer(address _token, address _to, uint256 _amount, uint256 _maxGas, uint256 _gasPriceBid, bytes _data) payable returns(bytes)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterTransactorSession) OutboundTransfer(_token common.Address, _to common.Address, _amount *big.Int, _maxGas *big.Int, _gasPriceBid *big.Int, _data []byte) (*types.Transaction, error) {
	return _L1OrbitGatewayRouter.Contract.OutboundTransfer(&_L1OrbitGatewayRouter.TransactOpts, _token, _to, _amount, _maxGas, _gasPriceBid, _data)
}

// OutboundTransferCustomRefund is a paid mutator transaction binding the contract method 0x4fb1a07b.
//
// Solidity: function outboundTransferCustomRefund(address _token, address _refundTo, address _to, uint256 _amount, uint256 _maxGas, uint256 _gasPriceBid, bytes _data) payable returns(bytes)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterTransactor) OutboundTransferCustomRefund(opts *bind.TransactOpts, _token common.Address, _refundTo common.Address, _to common.Address, _amount *big.Int, _maxGas *big.Int, _gasPriceBid *big.Int, _data []byte) (*types.Transaction, error) {
	return _L1OrbitGatewayRouter.contract.Transact(opts, "outboundTransferCustomRefund", _token, _refundTo, _to, _amount, _maxGas, _gasPriceBid, _data)
}

// OutboundTransferCustomRefund is a paid mutator transaction binding the contract method 0x4fb1a07b.
//
// Solidity: function outboundTransferCustomRefund(address _token, address _refundTo, address _to, uint256 _amount, uint256 _maxGas, uint256 _gasPriceBid, bytes _data) payable returns(bytes)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterSession) OutboundTransferCustomRefund(_token common.Address, _refundTo common.Address, _to common.Address, _amount *big.Int, _maxGas *big.Int, _gasPriceBid *big.Int, _data []byte) (*types.Transaction, error) {
	return _L1OrbitGatewayRouter.Contract.OutboundTransferCustomRefund(&_L1OrbitGatewayRouter.TransactOpts, _token, _refundTo, _to, _amount, _maxGas, _gasPriceBid, _data)
}

// OutboundTransferCustomRefund is a paid mutator transaction binding the contract method 0x4fb1a07b.
//
// Solidity: function outboundTransferCustomRefund(address _token, address _refundTo, address _to, uint256 _amount, uint256 _maxGas, uint256 _gasPriceBid, bytes _data) payable returns(bytes)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterTransactorSession) OutboundTransferCustomRefund(_token common.Address, _refundTo common.Address, _to common.Address, _amount *big.Int, _maxGas *big.Int, _gasPriceBid *big.Int, _data []byte) (*types.Transaction, error) {
	return _L1OrbitGatewayRouter.Contract.OutboundTransferCustomRefund(&_L1OrbitGatewayRouter.TransactOpts, _token, _refundTo, _to, _amount, _maxGas, _gasPriceBid, _data)
}

// PostUpgradeInit is a paid mutator transaction binding the contract method 0x95fcea78.
//
// Solidity: function postUpgradeInit() returns()
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterTransactor) PostUpgradeInit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _L1OrbitGatewayRouter.contract.Transact(opts, "postUpgradeInit")
}

// PostUpgradeInit is a paid mutator transaction binding the contract method 0x95fcea78.
//
// Solidity: function postUpgradeInit() returns()
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterSession) PostUpgradeInit() (*types.Transaction, error) {
	return _L1OrbitGatewayRouter.Contract.PostUpgradeInit(&_L1OrbitGatewayRouter.TransactOpts)
}

// PostUpgradeInit is a paid mutator transaction binding the contract method 0x95fcea78.
//
// Solidity: function postUpgradeInit() returns()
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterTransactorSession) PostUpgradeInit() (*types.Transaction, error) {
	return _L1OrbitGatewayRouter.Contract.PostUpgradeInit(&_L1OrbitGatewayRouter.TransactOpts)
}

// SetDefaultGateway is a paid mutator transaction binding the contract method 0x5625a952.
//
// Solidity: function setDefaultGateway(address , uint256 , uint256 , uint256 ) payable returns(uint256)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterTransactor) SetDefaultGateway(opts *bind.TransactOpts, arg0 common.Address, arg1 *big.Int, arg2 *big.Int, arg3 *big.Int) (*types.Transaction, error) {
	return _L1OrbitGatewayRouter.contract.Transact(opts, "setDefaultGateway", arg0, arg1, arg2, arg3)
}

// SetDefaultGateway is a paid mutator transaction binding the contract method 0x5625a952.
//
// Solidity: function setDefaultGateway(address , uint256 , uint256 , uint256 ) payable returns(uint256)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterSession) SetDefaultGateway(arg0 common.Address, arg1 *big.Int, arg2 *big.Int, arg3 *big.Int) (*types.Transaction, error) {
	return _L1OrbitGatewayRouter.Contract.SetDefaultGateway(&_L1OrbitGatewayRouter.TransactOpts, arg0, arg1, arg2, arg3)
}

// SetDefaultGateway is a paid mutator transaction binding the contract method 0x5625a952.
//
// Solidity: function setDefaultGateway(address , uint256 , uint256 , uint256 ) payable returns(uint256)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterTransactorSession) SetDefaultGateway(arg0 common.Address, arg1 *big.Int, arg2 *big.Int, arg3 *big.Int) (*types.Transaction, error) {
	return _L1OrbitGatewayRouter.Contract.SetDefaultGateway(&_L1OrbitGatewayRouter.TransactOpts, arg0, arg1, arg2, arg3)
}

// SetDefaultGateway0 is a paid mutator transaction binding the contract method 0xc9a96997.
//
// Solidity: function setDefaultGateway(address newL1DefaultGateway, uint256 _maxGas, uint256 _gasPriceBid, uint256 _maxSubmissionCost, uint256 _feeAmount) returns(uint256)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterTransactor) SetDefaultGateway0(opts *bind.TransactOpts, newL1DefaultGateway common.Address, _maxGas *big.Int, _gasPriceBid *big.Int, _maxSubmissionCost *big.Int, _feeAmount *big.Int) (*types.Transaction, error) {
	return _L1OrbitGatewayRouter.contract.Transact(opts, "setDefaultGateway0", newL1DefaultGateway, _maxGas, _gasPriceBid, _maxSubmissionCost, _feeAmount)
}

// SetDefaultGateway0 is a paid mutator transaction binding the contract method 0xc9a96997.
//
// Solidity: function setDefaultGateway(address newL1DefaultGateway, uint256 _maxGas, uint256 _gasPriceBid, uint256 _maxSubmissionCost, uint256 _feeAmount) returns(uint256)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterSession) SetDefaultGateway0(newL1DefaultGateway common.Address, _maxGas *big.Int, _gasPriceBid *big.Int, _maxSubmissionCost *big.Int, _feeAmount *big.Int) (*types.Transaction, error) {
	return _L1OrbitGatewayRouter.Contract.SetDefaultGateway0(&_L1OrbitGatewayRouter.TransactOpts, newL1DefaultGateway, _maxGas, _gasPriceBid, _maxSubmissionCost, _feeAmount)
}

// SetDefaultGateway0 is a paid mutator transaction binding the contract method 0xc9a96997.
//
// Solidity: function setDefaultGateway(address newL1DefaultGateway, uint256 _maxGas, uint256 _gasPriceBid, uint256 _maxSubmissionCost, uint256 _feeAmount) returns(uint256)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterTransactorSession) SetDefaultGateway0(newL1DefaultGateway common.Address, _maxGas *big.Int, _gasPriceBid *big.Int, _maxSubmissionCost *big.Int, _feeAmount *big.Int) (*types.Transaction, error) {
	return _L1OrbitGatewayRouter.Contract.SetDefaultGateway0(&_L1OrbitGatewayRouter.TransactOpts, newL1DefaultGateway, _maxGas, _gasPriceBid, _maxSubmissionCost, _feeAmount)
}

// SetGateway is a paid mutator transaction binding the contract method 0x2d67b72d.
//
// Solidity: function setGateway(address , uint256 , uint256 , uint256 , address ) payable returns(uint256)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterTransactor) SetGateway(opts *bind.TransactOpts, arg0 common.Address, arg1 *big.Int, arg2 *big.Int, arg3 *big.Int, arg4 common.Address) (*types.Transaction, error) {
	return _L1OrbitGatewayRouter.contract.Transact(opts, "setGateway", arg0, arg1, arg2, arg3, arg4)
}

// SetGateway is a paid mutator transaction binding the contract method 0x2d67b72d.
//
// Solidity: function setGateway(address , uint256 , uint256 , uint256 , address ) payable returns(uint256)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterSession) SetGateway(arg0 common.Address, arg1 *big.Int, arg2 *big.Int, arg3 *big.Int, arg4 common.Address) (*types.Transaction, error) {
	return _L1OrbitGatewayRouter.Contract.SetGateway(&_L1OrbitGatewayRouter.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// SetGateway is a paid mutator transaction binding the contract method 0x2d67b72d.
//
// Solidity: function setGateway(address , uint256 , uint256 , uint256 , address ) payable returns(uint256)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterTransactorSession) SetGateway(arg0 common.Address, arg1 *big.Int, arg2 *big.Int, arg3 *big.Int, arg4 common.Address) (*types.Transaction, error) {
	return _L1OrbitGatewayRouter.Contract.SetGateway(&_L1OrbitGatewayRouter.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// SetGateway0 is a paid mutator transaction binding the contract method 0xd7f7459c.
//
// Solidity: function setGateway(address _gateway, uint256 _maxGas, uint256 _gasPriceBid, uint256 _maxSubmissionCost, address _creditBackAddress, uint256 _feeAmount) returns(uint256)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterTransactor) SetGateway0(opts *bind.TransactOpts, _gateway common.Address, _maxGas *big.Int, _gasPriceBid *big.Int, _maxSubmissionCost *big.Int, _creditBackAddress common.Address, _feeAmount *big.Int) (*types.Transaction, error) {
	return _L1OrbitGatewayRouter.contract.Transact(opts, "setGateway0", _gateway, _maxGas, _gasPriceBid, _maxSubmissionCost, _creditBackAddress, _feeAmount)
}

// SetGateway0 is a paid mutator transaction binding the contract method 0xd7f7459c.
//
// Solidity: function setGateway(address _gateway, uint256 _maxGas, uint256 _gasPriceBid, uint256 _maxSubmissionCost, address _creditBackAddress, uint256 _feeAmount) returns(uint256)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterSession) SetGateway0(_gateway common.Address, _maxGas *big.Int, _gasPriceBid *big.Int, _maxSubmissionCost *big.Int, _creditBackAddress common.Address, _feeAmount *big.Int) (*types.Transaction, error) {
	return _L1OrbitGatewayRouter.Contract.SetGateway0(&_L1OrbitGatewayRouter.TransactOpts, _gateway, _maxGas, _gasPriceBid, _maxSubmissionCost, _creditBackAddress, _feeAmount)
}

// SetGateway0 is a paid mutator transaction binding the contract method 0xd7f7459c.
//
// Solidity: function setGateway(address _gateway, uint256 _maxGas, uint256 _gasPriceBid, uint256 _maxSubmissionCost, address _creditBackAddress, uint256 _feeAmount) returns(uint256)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterTransactorSession) SetGateway0(_gateway common.Address, _maxGas *big.Int, _gasPriceBid *big.Int, _maxSubmissionCost *big.Int, _creditBackAddress common.Address, _feeAmount *big.Int) (*types.Transaction, error) {
	return _L1OrbitGatewayRouter.Contract.SetGateway0(&_L1OrbitGatewayRouter.TransactOpts, _gateway, _maxGas, _gasPriceBid, _maxSubmissionCost, _creditBackAddress, _feeAmount)
}

// SetGateway1 is a paid mutator transaction binding the contract method 0xdc121927.
//
// Solidity: function setGateway(address _gateway, uint256 _maxGas, uint256 _gasPriceBid, uint256 _maxSubmissionCost, uint256 _feeAmount) returns(uint256)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterTransactor) SetGateway1(opts *bind.TransactOpts, _gateway common.Address, _maxGas *big.Int, _gasPriceBid *big.Int, _maxSubmissionCost *big.Int, _feeAmount *big.Int) (*types.Transaction, error) {
	return _L1OrbitGatewayRouter.contract.Transact(opts, "setGateway1", _gateway, _maxGas, _gasPriceBid, _maxSubmissionCost, _feeAmount)
}

// SetGateway1 is a paid mutator transaction binding the contract method 0xdc121927.
//
// Solidity: function setGateway(address _gateway, uint256 _maxGas, uint256 _gasPriceBid, uint256 _maxSubmissionCost, uint256 _feeAmount) returns(uint256)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterSession) SetGateway1(_gateway common.Address, _maxGas *big.Int, _gasPriceBid *big.Int, _maxSubmissionCost *big.Int, _feeAmount *big.Int) (*types.Transaction, error) {
	return _L1OrbitGatewayRouter.Contract.SetGateway1(&_L1OrbitGatewayRouter.TransactOpts, _gateway, _maxGas, _gasPriceBid, _maxSubmissionCost, _feeAmount)
}

// SetGateway1 is a paid mutator transaction binding the contract method 0xdc121927.
//
// Solidity: function setGateway(address _gateway, uint256 _maxGas, uint256 _gasPriceBid, uint256 _maxSubmissionCost, uint256 _feeAmount) returns(uint256)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterTransactorSession) SetGateway1(_gateway common.Address, _maxGas *big.Int, _gasPriceBid *big.Int, _maxSubmissionCost *big.Int, _feeAmount *big.Int) (*types.Transaction, error) {
	return _L1OrbitGatewayRouter.Contract.SetGateway1(&_L1OrbitGatewayRouter.TransactOpts, _gateway, _maxGas, _gasPriceBid, _maxSubmissionCost, _feeAmount)
}

// SetGateway2 is a paid mutator transaction binding the contract method 0xdd614569.
//
// Solidity: function setGateway(address , uint256 , uint256 , uint256 ) payable returns(uint256)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterTransactor) SetGateway2(opts *bind.TransactOpts, arg0 common.Address, arg1 *big.Int, arg2 *big.Int, arg3 *big.Int) (*types.Transaction, error) {
	return _L1OrbitGatewayRouter.contract.Transact(opts, "setGateway2", arg0, arg1, arg2, arg3)
}

// SetGateway2 is a paid mutator transaction binding the contract method 0xdd614569.
//
// Solidity: function setGateway(address , uint256 , uint256 , uint256 ) payable returns(uint256)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterSession) SetGateway2(arg0 common.Address, arg1 *big.Int, arg2 *big.Int, arg3 *big.Int) (*types.Transaction, error) {
	return _L1OrbitGatewayRouter.Contract.SetGateway2(&_L1OrbitGatewayRouter.TransactOpts, arg0, arg1, arg2, arg3)
}

// SetGateway2 is a paid mutator transaction binding the contract method 0xdd614569.
//
// Solidity: function setGateway(address , uint256 , uint256 , uint256 ) payable returns(uint256)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterTransactorSession) SetGateway2(arg0 common.Address, arg1 *big.Int, arg2 *big.Int, arg3 *big.Int) (*types.Transaction, error) {
	return _L1OrbitGatewayRouter.Contract.SetGateway2(&_L1OrbitGatewayRouter.TransactOpts, arg0, arg1, arg2, arg3)
}

// SetGateways is a paid mutator transaction binding the contract method 0x55654af8.
//
// Solidity: function setGateways(address[] _token, address[] _gateway, uint256 _maxGas, uint256 _gasPriceBid, uint256 _maxSubmissionCost, uint256 _feeAmount) returns(uint256)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterTransactor) SetGateways(opts *bind.TransactOpts, _token []common.Address, _gateway []common.Address, _maxGas *big.Int, _gasPriceBid *big.Int, _maxSubmissionCost *big.Int, _feeAmount *big.Int) (*types.Transaction, error) {
	return _L1OrbitGatewayRouter.contract.Transact(opts, "setGateways", _token, _gateway, _maxGas, _gasPriceBid, _maxSubmissionCost, _feeAmount)
}

// SetGateways is a paid mutator transaction binding the contract method 0x55654af8.
//
// Solidity: function setGateways(address[] _token, address[] _gateway, uint256 _maxGas, uint256 _gasPriceBid, uint256 _maxSubmissionCost, uint256 _feeAmount) returns(uint256)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterSession) SetGateways(_token []common.Address, _gateway []common.Address, _maxGas *big.Int, _gasPriceBid *big.Int, _maxSubmissionCost *big.Int, _feeAmount *big.Int) (*types.Transaction, error) {
	return _L1OrbitGatewayRouter.Contract.SetGateways(&_L1OrbitGatewayRouter.TransactOpts, _token, _gateway, _maxGas, _gasPriceBid, _maxSubmissionCost, _feeAmount)
}

// SetGateways is a paid mutator transaction binding the contract method 0x55654af8.
//
// Solidity: function setGateways(address[] _token, address[] _gateway, uint256 _maxGas, uint256 _gasPriceBid, uint256 _maxSubmissionCost, uint256 _feeAmount) returns(uint256)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterTransactorSession) SetGateways(_token []common.Address, _gateway []common.Address, _maxGas *big.Int, _gasPriceBid *big.Int, _maxSubmissionCost *big.Int, _feeAmount *big.Int) (*types.Transaction, error) {
	return _L1OrbitGatewayRouter.Contract.SetGateways(&_L1OrbitGatewayRouter.TransactOpts, _token, _gateway, _maxGas, _gasPriceBid, _maxSubmissionCost, _feeAmount)
}

// SetGateways0 is a paid mutator transaction binding the contract method 0x658b53f4.
//
// Solidity: function setGateways(address[] , address[] , uint256 , uint256 , uint256 ) payable returns(uint256)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterTransactor) SetGateways0(opts *bind.TransactOpts, arg0 []common.Address, arg1 []common.Address, arg2 *big.Int, arg3 *big.Int, arg4 *big.Int) (*types.Transaction, error) {
	return _L1OrbitGatewayRouter.contract.Transact(opts, "setGateways0", arg0, arg1, arg2, arg3, arg4)
}

// SetGateways0 is a paid mutator transaction binding the contract method 0x658b53f4.
//
// Solidity: function setGateways(address[] , address[] , uint256 , uint256 , uint256 ) payable returns(uint256)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterSession) SetGateways0(arg0 []common.Address, arg1 []common.Address, arg2 *big.Int, arg3 *big.Int, arg4 *big.Int) (*types.Transaction, error) {
	return _L1OrbitGatewayRouter.Contract.SetGateways0(&_L1OrbitGatewayRouter.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// SetGateways0 is a paid mutator transaction binding the contract method 0x658b53f4.
//
// Solidity: function setGateways(address[] , address[] , uint256 , uint256 , uint256 ) payable returns(uint256)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterTransactorSession) SetGateways0(arg0 []common.Address, arg1 []common.Address, arg2 *big.Int, arg3 *big.Int, arg4 *big.Int) (*types.Transaction, error) {
	return _L1OrbitGatewayRouter.Contract.SetGateways0(&_L1OrbitGatewayRouter.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address newOwner) returns()
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterTransactor) SetOwner(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _L1OrbitGatewayRouter.contract.Transact(opts, "setOwner", newOwner)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address newOwner) returns()
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterSession) SetOwner(newOwner common.Address) (*types.Transaction, error) {
	return _L1OrbitGatewayRouter.Contract.SetOwner(&_L1OrbitGatewayRouter.TransactOpts, newOwner)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address newOwner) returns()
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterTransactorSession) SetOwner(newOwner common.Address) (*types.Transaction, error) {
	return _L1OrbitGatewayRouter.Contract.SetOwner(&_L1OrbitGatewayRouter.TransactOpts, newOwner)
}

// UpdateWhitelistSource is a paid mutator transaction binding the contract method 0x47466f98.
//
// Solidity: function updateWhitelistSource(address newSource) returns()
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterTransactor) UpdateWhitelistSource(opts *bind.TransactOpts, newSource common.Address) (*types.Transaction, error) {
	return _L1OrbitGatewayRouter.contract.Transact(opts, "updateWhitelistSource", newSource)
}

// UpdateWhitelistSource is a paid mutator transaction binding the contract method 0x47466f98.
//
// Solidity: function updateWhitelistSource(address newSource) returns()
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterSession) UpdateWhitelistSource(newSource common.Address) (*types.Transaction, error) {
	return _L1OrbitGatewayRouter.Contract.UpdateWhitelistSource(&_L1OrbitGatewayRouter.TransactOpts, newSource)
}

// UpdateWhitelistSource is a paid mutator transaction binding the contract method 0x47466f98.
//
// Solidity: function updateWhitelistSource(address newSource) returns()
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterTransactorSession) UpdateWhitelistSource(newSource common.Address) (*types.Transaction, error) {
	return _L1OrbitGatewayRouter.Contract.UpdateWhitelistSource(&_L1OrbitGatewayRouter.TransactOpts, newSource)
}

// L1OrbitGatewayRouterDefaultGatewayUpdatedIterator is returned from FilterDefaultGatewayUpdated and is used to iterate over the raw logs and unpacked data for DefaultGatewayUpdated events raised by the L1OrbitGatewayRouter contract.
type L1OrbitGatewayRouterDefaultGatewayUpdatedIterator struct {
	Event *L1OrbitGatewayRouterDefaultGatewayUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1OrbitGatewayRouterDefaultGatewayUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1OrbitGatewayRouterDefaultGatewayUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1OrbitGatewayRouterDefaultGatewayUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1OrbitGatewayRouterDefaultGatewayUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1OrbitGatewayRouterDefaultGatewayUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1OrbitGatewayRouterDefaultGatewayUpdated represents a DefaultGatewayUpdated event raised by the L1OrbitGatewayRouter contract.
type L1OrbitGatewayRouterDefaultGatewayUpdated struct {
	NewDefaultGateway common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterDefaultGatewayUpdated is a free log retrieval operation binding the contract event 0x3a8f8eb961383a94d41d193e16a3af73eaddfd5764a4c640257323a1603ac331.
//
// Solidity: event DefaultGatewayUpdated(address newDefaultGateway)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterFilterer) FilterDefaultGatewayUpdated(opts *bind.FilterOpts) (*L1OrbitGatewayRouterDefaultGatewayUpdatedIterator, error) {

	logs, sub, err := _L1OrbitGatewayRouter.contract.FilterLogs(opts, "DefaultGatewayUpdated")
	if err != nil {
		return nil, err
	}
	return &L1OrbitGatewayRouterDefaultGatewayUpdatedIterator{contract: _L1OrbitGatewayRouter.contract, event: "DefaultGatewayUpdated", logs: logs, sub: sub}, nil
}

// WatchDefaultGatewayUpdated is a free log subscription operation binding the contract event 0x3a8f8eb961383a94d41d193e16a3af73eaddfd5764a4c640257323a1603ac331.
//
// Solidity: event DefaultGatewayUpdated(address newDefaultGateway)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterFilterer) WatchDefaultGatewayUpdated(opts *bind.WatchOpts, sink chan<- *L1OrbitGatewayRouterDefaultGatewayUpdated) (event.Subscription, error) {

	logs, sub, err := _L1OrbitGatewayRouter.contract.WatchLogs(opts, "DefaultGatewayUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1OrbitGatewayRouterDefaultGatewayUpdated)
				if err := _L1OrbitGatewayRouter.contract.UnpackLog(event, "DefaultGatewayUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDefaultGatewayUpdated is a log parse operation binding the contract event 0x3a8f8eb961383a94d41d193e16a3af73eaddfd5764a4c640257323a1603ac331.
//
// Solidity: event DefaultGatewayUpdated(address newDefaultGateway)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterFilterer) ParseDefaultGatewayUpdated(log types.Log) (*L1OrbitGatewayRouterDefaultGatewayUpdated, error) {
	event := new(L1OrbitGatewayRouterDefaultGatewayUpdated)
	if err := _L1OrbitGatewayRouter.contract.UnpackLog(event, "DefaultGatewayUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1OrbitGatewayRouterGatewaySetIterator is returned from FilterGatewaySet and is used to iterate over the raw logs and unpacked data for GatewaySet events raised by the L1OrbitGatewayRouter contract.
type L1OrbitGatewayRouterGatewaySetIterator struct {
	Event *L1OrbitGatewayRouterGatewaySet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1OrbitGatewayRouterGatewaySetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1OrbitGatewayRouterGatewaySet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1OrbitGatewayRouterGatewaySet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1OrbitGatewayRouterGatewaySetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1OrbitGatewayRouterGatewaySetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1OrbitGatewayRouterGatewaySet represents a GatewaySet event raised by the L1OrbitGatewayRouter contract.
type L1OrbitGatewayRouterGatewaySet struct {
	L1Token common.Address
	Gateway common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterGatewaySet is a free log retrieval operation binding the contract event 0x812ca95fe4492a9e2d1f2723c2c40c03a60a27b059581ae20ac4e4d73bfba354.
//
// Solidity: event GatewaySet(address indexed l1Token, address indexed gateway)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterFilterer) FilterGatewaySet(opts *bind.FilterOpts, l1Token []common.Address, gateway []common.Address) (*L1OrbitGatewayRouterGatewaySetIterator, error) {

	var l1TokenRule []interface{}
	for _, l1TokenItem := range l1Token {
		l1TokenRule = append(l1TokenRule, l1TokenItem)
	}
	var gatewayRule []interface{}
	for _, gatewayItem := range gateway {
		gatewayRule = append(gatewayRule, gatewayItem)
	}

	logs, sub, err := _L1OrbitGatewayRouter.contract.FilterLogs(opts, "GatewaySet", l1TokenRule, gatewayRule)
	if err != nil {
		return nil, err
	}
	return &L1OrbitGatewayRouterGatewaySetIterator{contract: _L1OrbitGatewayRouter.contract, event: "GatewaySet", logs: logs, sub: sub}, nil
}

// WatchGatewaySet is a free log subscription operation binding the contract event 0x812ca95fe4492a9e2d1f2723c2c40c03a60a27b059581ae20ac4e4d73bfba354.
//
// Solidity: event GatewaySet(address indexed l1Token, address indexed gateway)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterFilterer) WatchGatewaySet(opts *bind.WatchOpts, sink chan<- *L1OrbitGatewayRouterGatewaySet, l1Token []common.Address, gateway []common.Address) (event.Subscription, error) {

	var l1TokenRule []interface{}
	for _, l1TokenItem := range l1Token {
		l1TokenRule = append(l1TokenRule, l1TokenItem)
	}
	var gatewayRule []interface{}
	for _, gatewayItem := range gateway {
		gatewayRule = append(gatewayRule, gatewayItem)
	}

	logs, sub, err := _L1OrbitGatewayRouter.contract.WatchLogs(opts, "GatewaySet", l1TokenRule, gatewayRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1OrbitGatewayRouterGatewaySet)
				if err := _L1OrbitGatewayRouter.contract.UnpackLog(event, "GatewaySet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseGatewaySet is a log parse operation binding the contract event 0x812ca95fe4492a9e2d1f2723c2c40c03a60a27b059581ae20ac4e4d73bfba354.
//
// Solidity: event GatewaySet(address indexed l1Token, address indexed gateway)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterFilterer) ParseGatewaySet(log types.Log) (*L1OrbitGatewayRouterGatewaySet, error) {
	event := new(L1OrbitGatewayRouterGatewaySet)
	if err := _L1OrbitGatewayRouter.contract.UnpackLog(event, "GatewaySet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1OrbitGatewayRouterTransferRoutedIterator is returned from FilterTransferRouted and is used to iterate over the raw logs and unpacked data for TransferRouted events raised by the L1OrbitGatewayRouter contract.
type L1OrbitGatewayRouterTransferRoutedIterator struct {
	Event *L1OrbitGatewayRouterTransferRouted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1OrbitGatewayRouterTransferRoutedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1OrbitGatewayRouterTransferRouted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1OrbitGatewayRouterTransferRouted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1OrbitGatewayRouterTransferRoutedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1OrbitGatewayRouterTransferRoutedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1OrbitGatewayRouterTransferRouted represents a TransferRouted event raised by the L1OrbitGatewayRouter contract.
type L1OrbitGatewayRouterTransferRouted struct {
	Token    common.Address
	UserFrom common.Address
	UserTo   common.Address
	Gateway  common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferRouted is a free log retrieval operation binding the contract event 0x85291dff2161a93c2f12c819d31889c96c63042116f5bc5a205aa701c2c429f5.
//
// Solidity: event TransferRouted(address indexed token, address indexed _userFrom, address indexed _userTo, address gateway)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterFilterer) FilterTransferRouted(opts *bind.FilterOpts, token []common.Address, _userFrom []common.Address, _userTo []common.Address) (*L1OrbitGatewayRouterTransferRoutedIterator, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}
	var _userFromRule []interface{}
	for _, _userFromItem := range _userFrom {
		_userFromRule = append(_userFromRule, _userFromItem)
	}
	var _userToRule []interface{}
	for _, _userToItem := range _userTo {
		_userToRule = append(_userToRule, _userToItem)
	}

	logs, sub, err := _L1OrbitGatewayRouter.contract.FilterLogs(opts, "TransferRouted", tokenRule, _userFromRule, _userToRule)
	if err != nil {
		return nil, err
	}
	return &L1OrbitGatewayRouterTransferRoutedIterator{contract: _L1OrbitGatewayRouter.contract, event: "TransferRouted", logs: logs, sub: sub}, nil
}

// WatchTransferRouted is a free log subscription operation binding the contract event 0x85291dff2161a93c2f12c819d31889c96c63042116f5bc5a205aa701c2c429f5.
//
// Solidity: event TransferRouted(address indexed token, address indexed _userFrom, address indexed _userTo, address gateway)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterFilterer) WatchTransferRouted(opts *bind.WatchOpts, sink chan<- *L1OrbitGatewayRouterTransferRouted, token []common.Address, _userFrom []common.Address, _userTo []common.Address) (event.Subscription, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}
	var _userFromRule []interface{}
	for _, _userFromItem := range _userFrom {
		_userFromRule = append(_userFromRule, _userFromItem)
	}
	var _userToRule []interface{}
	for _, _userToItem := range _userTo {
		_userToRule = append(_userToRule, _userToItem)
	}

	logs, sub, err := _L1OrbitGatewayRouter.contract.WatchLogs(opts, "TransferRouted", tokenRule, _userFromRule, _userToRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1OrbitGatewayRouterTransferRouted)
				if err := _L1OrbitGatewayRouter.contract.UnpackLog(event, "TransferRouted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferRouted is a log parse operation binding the contract event 0x85291dff2161a93c2f12c819d31889c96c63042116f5bc5a205aa701c2c429f5.
//
// Solidity: event TransferRouted(address indexed token, address indexed _userFrom, address indexed _userTo, address gateway)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterFilterer) ParseTransferRouted(log types.Log) (*L1OrbitGatewayRouterTransferRouted, error) {
	event := new(L1OrbitGatewayRouterTransferRouted)
	if err := _L1OrbitGatewayRouter.contract.UnpackLog(event, "TransferRouted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1OrbitGatewayRouterTxToL2Iterator is returned from FilterTxToL2 and is used to iterate over the raw logs and unpacked data for TxToL2 events raised by the L1OrbitGatewayRouter contract.
type L1OrbitGatewayRouterTxToL2Iterator struct {
	Event *L1OrbitGatewayRouterTxToL2 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1OrbitGatewayRouterTxToL2Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1OrbitGatewayRouterTxToL2)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1OrbitGatewayRouterTxToL2)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1OrbitGatewayRouterTxToL2Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1OrbitGatewayRouterTxToL2Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1OrbitGatewayRouterTxToL2 represents a TxToL2 event raised by the L1OrbitGatewayRouter contract.
type L1OrbitGatewayRouterTxToL2 struct {
	From   common.Address
	To     common.Address
	SeqNum *big.Int
	Data   []byte
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterTxToL2 is a free log retrieval operation binding the contract event 0xc1d1490cf25c3b40d600dfb27c7680340ed1ab901b7e8f3551280968a3b372b0.
//
// Solidity: event TxToL2(address indexed _from, address indexed _to, uint256 indexed _seqNum, bytes _data)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterFilterer) FilterTxToL2(opts *bind.FilterOpts, _from []common.Address, _to []common.Address, _seqNum []*big.Int) (*L1OrbitGatewayRouterTxToL2Iterator, error) {

	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}
	var _seqNumRule []interface{}
	for _, _seqNumItem := range _seqNum {
		_seqNumRule = append(_seqNumRule, _seqNumItem)
	}

	logs, sub, err := _L1OrbitGatewayRouter.contract.FilterLogs(opts, "TxToL2", _fromRule, _toRule, _seqNumRule)
	if err != nil {
		return nil, err
	}
	return &L1OrbitGatewayRouterTxToL2Iterator{contract: _L1OrbitGatewayRouter.contract, event: "TxToL2", logs: logs, sub: sub}, nil
}

// WatchTxToL2 is a free log subscription operation binding the contract event 0xc1d1490cf25c3b40d600dfb27c7680340ed1ab901b7e8f3551280968a3b372b0.
//
// Solidity: event TxToL2(address indexed _from, address indexed _to, uint256 indexed _seqNum, bytes _data)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterFilterer) WatchTxToL2(opts *bind.WatchOpts, sink chan<- *L1OrbitGatewayRouterTxToL2, _from []common.Address, _to []common.Address, _seqNum []*big.Int) (event.Subscription, error) {

	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}
	var _seqNumRule []interface{}
	for _, _seqNumItem := range _seqNum {
		_seqNumRule = append(_seqNumRule, _seqNumItem)
	}

	logs, sub, err := _L1OrbitGatewayRouter.contract.WatchLogs(opts, "TxToL2", _fromRule, _toRule, _seqNumRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1OrbitGatewayRouterTxToL2)
				if err := _L1OrbitGatewayRouter.contract.UnpackLog(event, "TxToL2", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTxToL2 is a log parse operation binding the contract event 0xc1d1490cf25c3b40d600dfb27c7680340ed1ab901b7e8f3551280968a3b372b0.
//
// Solidity: event TxToL2(address indexed _from, address indexed _to, uint256 indexed _seqNum, bytes _data)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterFilterer) ParseTxToL2(log types.Log) (*L1OrbitGatewayRouterTxToL2, error) {
	event := new(L1OrbitGatewayRouterTxToL2)
	if err := _L1OrbitGatewayRouter.contract.UnpackLog(event, "TxToL2", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1OrbitGatewayRouterWhitelistSourceUpdatedIterator is returned from FilterWhitelistSourceUpdated and is used to iterate over the raw logs and unpacked data for WhitelistSourceUpdated events raised by the L1OrbitGatewayRouter contract.
type L1OrbitGatewayRouterWhitelistSourceUpdatedIterator struct {
	Event *L1OrbitGatewayRouterWhitelistSourceUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1OrbitGatewayRouterWhitelistSourceUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1OrbitGatewayRouterWhitelistSourceUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1OrbitGatewayRouterWhitelistSourceUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1OrbitGatewayRouterWhitelistSourceUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1OrbitGatewayRouterWhitelistSourceUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1OrbitGatewayRouterWhitelistSourceUpdated represents a WhitelistSourceUpdated event raised by the L1OrbitGatewayRouter contract.
type L1OrbitGatewayRouterWhitelistSourceUpdated struct {
	NewSource common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterWhitelistSourceUpdated is a free log retrieval operation binding the contract event 0x37389c47920d5cc3229678a0205d0455002c07541a4139ebdce91ac227465777.
//
// Solidity: event WhitelistSourceUpdated(address newSource)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterFilterer) FilterWhitelistSourceUpdated(opts *bind.FilterOpts) (*L1OrbitGatewayRouterWhitelistSourceUpdatedIterator, error) {

	logs, sub, err := _L1OrbitGatewayRouter.contract.FilterLogs(opts, "WhitelistSourceUpdated")
	if err != nil {
		return nil, err
	}
	return &L1OrbitGatewayRouterWhitelistSourceUpdatedIterator{contract: _L1OrbitGatewayRouter.contract, event: "WhitelistSourceUpdated", logs: logs, sub: sub}, nil
}

// WatchWhitelistSourceUpdated is a free log subscription operation binding the contract event 0x37389c47920d5cc3229678a0205d0455002c07541a4139ebdce91ac227465777.
//
// Solidity: event WhitelistSourceUpdated(address newSource)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterFilterer) WatchWhitelistSourceUpdated(opts *bind.WatchOpts, sink chan<- *L1OrbitGatewayRouterWhitelistSourceUpdated) (event.Subscription, error) {

	logs, sub, err := _L1OrbitGatewayRouter.contract.WatchLogs(opts, "WhitelistSourceUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1OrbitGatewayRouterWhitelistSourceUpdated)
				if err := _L1OrbitGatewayRouter.contract.UnpackLog(event, "WhitelistSourceUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWhitelistSourceUpdated is a log parse operation binding the contract event 0x37389c47920d5cc3229678a0205d0455002c07541a4139ebdce91ac227465777.
//
// Solidity: event WhitelistSourceUpdated(address newSource)
func (_L1OrbitGatewayRouter *L1OrbitGatewayRouterFilterer) ParseWhitelistSourceUpdated(log types.Log) (*L1OrbitGatewayRouterWhitelistSourceUpdated, error) {
	event := new(L1OrbitGatewayRouterWhitelistSourceUpdated)
	if err := _L1OrbitGatewayRouter.contract.UnpackLog(event, "WhitelistSourceUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

func CreateL1OrbitGatewayRouterDeploymentCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc string
	var gasLimit uint64
	var simulate bool
	var timeout uint

	cmd := &cobra.Command{
		Use:   "deploy",
		Short: "Deploy a new L1OrbitGatewayRouter contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified (this should be a path to an Ethereum account keystore file)")
			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			address, deploymentTransaction, _, deploymentErr := DeployL1OrbitGatewayRouter(
				transactionOpts,
				client,
			)
			if deploymentErr != nil {
				return deploymentErr
			}

			cmd.Printf("Transaction hash: %s\nContract address: %s\n", deploymentTransaction.Hash().Hex(), address.Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					Data: deploymentTransaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := deploymentTransaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")

	return cmd
}

func CreateGetGatewayCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var token common.Address
	var tokenRaw string

	var capture0 common.Address

	cmd := &cobra.Command{
		Use:   "get-gateway",
		Short: "Call the GetGateway view method on a L1OrbitGatewayRouter contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if tokenRaw == "" {
				return fmt.Errorf("--token argument not specified")
			} else if !common.IsHexAddress(tokenRaw) {
				return fmt.Errorf("--token argument is not a valid Ethereum address")
			}
			token = common.HexToAddress(tokenRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewL1OrbitGatewayRouter(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := L1OrbitGatewayRouterCallerSession{
				Contract: &contract.L1OrbitGatewayRouterCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.GetGateway(
				token,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.Hex())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&tokenRaw, "token", "", "token argument")

	return cmd
}
func CreateGetOutboundCalldataCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var token common.Address
	var tokenRaw string
	var _from0 common.Address
	var _from0Raw string
	var _to0 common.Address
	var _to0Raw string
	var amount *big.Int
	var amountRaw string
	var data []byte
	var dataRaw string

	var capture0 []byte

	cmd := &cobra.Command{
		Use:   "get-outbound-calldata",
		Short: "Call the GetOutboundCalldata view method on a L1OrbitGatewayRouter contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if tokenRaw == "" {
				return fmt.Errorf("--token argument not specified")
			} else if !common.IsHexAddress(tokenRaw) {
				return fmt.Errorf("--token argument is not a valid Ethereum address")
			}
			token = common.HexToAddress(tokenRaw)

			if _from0Raw == "" {
				return fmt.Errorf("---from-0 argument not specified")
			} else if !common.IsHexAddress(_from0Raw) {
				return fmt.Errorf("---from-0 argument is not a valid Ethereum address")
			}
			_from0 = common.HexToAddress(_from0Raw)

			if _to0Raw == "" {
				return fmt.Errorf("--to-0 argument not specified")
			} else if !common.IsHexAddress(_to0Raw) {
				return fmt.Errorf("--to-0 argument is not a valid Ethereum address")
			}
			_to0 = common.HexToAddress(_to0Raw)

			if amountRaw == "" {
				return fmt.Errorf("--amount argument not specified")
			}
			amount = new(big.Int)
			amount.SetString(amountRaw, 0)

			var hexDecodedataErr error

			data, hexDecodedataErr = hex.DecodeString(dataRaw)
			if hexDecodedataErr != nil {
				return hexDecodedataErr
			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewL1OrbitGatewayRouter(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := L1OrbitGatewayRouterCallerSession{
				Contract: &contract.L1OrbitGatewayRouterCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.GetOutboundCalldata(
				token,
				_from0,
				_to0,
				amount,
				data,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %v\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&tokenRaw, "token", "", "token argument")
	cmd.Flags().StringVar(&_from0Raw, "-from-0", "", "-from-0 argument")
	cmd.Flags().StringVar(&_to0Raw, "to-0", "", "to-0 argument")
	cmd.Flags().StringVar(&amountRaw, "amount", "", "amount argument")
	cmd.Flags().StringVar(&dataRaw, "data", "", "data argument")

	return cmd
}
func CreateInboxCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 common.Address

	cmd := &cobra.Command{
		Use:   "inbox",
		Short: "Call the Inbox view method on a L1OrbitGatewayRouter contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewL1OrbitGatewayRouter(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := L1OrbitGatewayRouterCallerSession{
				Contract: &contract.L1OrbitGatewayRouterCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.Inbox()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.Hex())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}
func CreateL1TokenToGatewayCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 common.Address
	var arg0Raw string

	var capture0 common.Address

	cmd := &cobra.Command{
		Use:   "l-1-token-to-gateway",
		Short: "Call the L1TokenToGateway view method on a L1OrbitGatewayRouter contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			} else if !common.IsHexAddress(arg0Raw) {
				return fmt.Errorf("--arg-0 argument is not a valid Ethereum address")
			}
			arg0 = common.HexToAddress(arg0Raw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewL1OrbitGatewayRouter(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := L1OrbitGatewayRouterCallerSession{
				Contract: &contract.L1OrbitGatewayRouterCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.L1TokenToGateway(
				arg0,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.Hex())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")

	return cmd
}
func CreateSupportsInterfaceCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var interfaceId [4]byte
	var interfaceIdRaw string

	var capture0 bool

	cmd := &cobra.Command{
		Use:   "supports-interface",
		Short: "Call the SupportsInterface view method on a L1OrbitGatewayRouter contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			var hexDecodeinterfaceIdErr error

			var intermediateinterfaceIdLeaf []byte
			intermediateinterfaceIdLeaf, hexDecodeinterfaceIdErr = hex.DecodeString(interfaceIdRaw)
			if hexDecodeinterfaceIdErr != nil {
				return hexDecodeinterfaceIdErr
			}
			interfaceId = [4]byte(intermediateinterfaceIdLeaf[:4])

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewL1OrbitGatewayRouter(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := L1OrbitGatewayRouterCallerSession{
				Contract: &contract.L1OrbitGatewayRouterCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.SupportsInterface(
				interfaceId,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %t\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&interfaceIdRaw, "interface-id", "", "interface-id argument")

	return cmd
}
func CreateCalculateL2TokenAddressCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var l1ERC20 common.Address
	var l1ERC20Raw string

	var capture0 common.Address

	cmd := &cobra.Command{
		Use:   "calculate-l-2-token-address",
		Short: "Call the CalculateL2TokenAddress view method on a L1OrbitGatewayRouter contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if l1ERC20Raw == "" {
				return fmt.Errorf("--l-1-erc-20 argument not specified")
			} else if !common.IsHexAddress(l1ERC20Raw) {
				return fmt.Errorf("--l-1-erc-20 argument is not a valid Ethereum address")
			}
			l1ERC20 = common.HexToAddress(l1ERC20Raw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewL1OrbitGatewayRouter(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := L1OrbitGatewayRouterCallerSession{
				Contract: &contract.L1OrbitGatewayRouterCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.CalculateL2TokenAddress(
				l1ERC20,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.Hex())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&l1ERC20Raw, "l-1-erc-20", "", "l-1-erc-20 argument")

	return cmd
}
func CreateCounterpartGatewayCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 common.Address

	cmd := &cobra.Command{
		Use:   "counterpart-gateway",
		Short: "Call the CounterpartGateway view method on a L1OrbitGatewayRouter contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewL1OrbitGatewayRouter(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := L1OrbitGatewayRouterCallerSession{
				Contract: &contract.L1OrbitGatewayRouterCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.CounterpartGateway()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.Hex())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}
func CreateRouterCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 common.Address

	cmd := &cobra.Command{
		Use:   "router",
		Short: "Call the Router view method on a L1OrbitGatewayRouter contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewL1OrbitGatewayRouter(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := L1OrbitGatewayRouterCallerSession{
				Contract: &contract.L1OrbitGatewayRouterCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.Router()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.Hex())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}
func CreateWhitelistCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 common.Address

	cmd := &cobra.Command{
		Use:   "whitelist",
		Short: "Call the Whitelist view method on a L1OrbitGatewayRouter contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewL1OrbitGatewayRouter(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := L1OrbitGatewayRouterCallerSession{
				Contract: &contract.L1OrbitGatewayRouterCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.Whitelist()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.Hex())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}
func CreateDefaultGatewayCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 common.Address

	cmd := &cobra.Command{
		Use:   "default-gateway",
		Short: "Call the DefaultGateway view method on a L1OrbitGatewayRouter contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewL1OrbitGatewayRouter(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := L1OrbitGatewayRouterCallerSession{
				Contract: &contract.L1OrbitGatewayRouterCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.DefaultGateway()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.Hex())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}
func CreateOwnerCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 common.Address

	cmd := &cobra.Command{
		Use:   "owner",
		Short: "Call the Owner view method on a L1OrbitGatewayRouter contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewL1OrbitGatewayRouter(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := L1OrbitGatewayRouterCallerSession{
				Contract: &contract.L1OrbitGatewayRouterCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.Owner()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.Hex())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}

func CreatePostUpgradeInitCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	cmd := &cobra.Command{
		Use:   "post-upgrade-init",
		Short: "Execute the PostUpgradeInit method on a L1OrbitGatewayRouter contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewL1OrbitGatewayRouter(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := L1OrbitGatewayRouterTransactorSession{
				Contract:     &contract.L1OrbitGatewayRouterTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.PostUpgradeInit()
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	return cmd
}
func CreateSetGateway1Command() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var gateway common.Address
	var gatewayRaw string
	var maxGas *big.Int
	var maxGasRaw string
	var gasPriceBid *big.Int
	var gasPriceBidRaw string
	var maxSubmissionCost *big.Int
	var maxSubmissionCostRaw string
	var feeAmount *big.Int
	var feeAmountRaw string

	cmd := &cobra.Command{
		Use:   "set-gateway-1",
		Short: "Execute the SetGateway1 method on a L1OrbitGatewayRouter contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if gatewayRaw == "" {
				return fmt.Errorf("--gateway argument not specified")
			} else if !common.IsHexAddress(gatewayRaw) {
				return fmt.Errorf("--gateway argument is not a valid Ethereum address")
			}
			gateway = common.HexToAddress(gatewayRaw)

			if maxGasRaw == "" {
				return fmt.Errorf("--max-gas argument not specified")
			}
			maxGas = new(big.Int)
			maxGas.SetString(maxGasRaw, 0)

			if gasPriceBidRaw == "" {
				return fmt.Errorf("--gas-price-bid argument not specified")
			}
			gasPriceBid = new(big.Int)
			gasPriceBid.SetString(gasPriceBidRaw, 0)

			if maxSubmissionCostRaw == "" {
				return fmt.Errorf("--max-submission-cost argument not specified")
			}
			maxSubmissionCost = new(big.Int)
			maxSubmissionCost.SetString(maxSubmissionCostRaw, 0)

			if feeAmountRaw == "" {
				return fmt.Errorf("--fee-amount argument not specified")
			}
			feeAmount = new(big.Int)
			feeAmount.SetString(feeAmountRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewL1OrbitGatewayRouter(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := L1OrbitGatewayRouterTransactorSession{
				Contract:     &contract.L1OrbitGatewayRouterTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.SetGateway1(
				gateway,
				maxGas,
				gasPriceBid,
				maxSubmissionCost,
				feeAmount,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&gatewayRaw, "gateway", "", "gateway argument")
	cmd.Flags().StringVar(&maxGasRaw, "max-gas", "", "max-gas argument")
	cmd.Flags().StringVar(&gasPriceBidRaw, "gas-price-bid", "", "gas-price-bid argument")
	cmd.Flags().StringVar(&maxSubmissionCostRaw, "max-submission-cost", "", "max-submission-cost argument")
	cmd.Flags().StringVar(&feeAmountRaw, "fee-amount", "", "fee-amount argument")

	return cmd
}
func CreateSetGateways0Command() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var arg0 []common.Address
	var arg0Raw string
	var arg1 []common.Address
	var arg1Raw string
	var arg2 *big.Int
	var arg2Raw string
	var arg3 *big.Int
	var arg3Raw string
	var arg4 *big.Int
	var arg4Raw string

	cmd := &cobra.Command{
		Use:   "set-gateways-0",
		Short: "Execute the SetGateways0 method on a L1OrbitGatewayRouter contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			} else if strings.HasPrefix(arg0Raw, "@") {
				filename := strings.TrimPrefix(arg0Raw, "@")
				contents, readErr := os.ReadFile(filename)
				if readErr != nil {
					return readErr
				}
				unmarshalErr := json.Unmarshal(contents, &arg0)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			} else {
				unmarshalErr := json.Unmarshal([]byte(arg0Raw), &arg0)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			}

			if arg1Raw == "" {
				return fmt.Errorf("--arg-1 argument not specified")
			} else if strings.HasPrefix(arg1Raw, "@") {
				filename := strings.TrimPrefix(arg1Raw, "@")
				contents, readErr := os.ReadFile(filename)
				if readErr != nil {
					return readErr
				}
				unmarshalErr := json.Unmarshal(contents, &arg1)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			} else {
				unmarshalErr := json.Unmarshal([]byte(arg1Raw), &arg1)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			}

			if arg2Raw == "" {
				return fmt.Errorf("--arg-2 argument not specified")
			}
			arg2 = new(big.Int)
			arg2.SetString(arg2Raw, 0)

			if arg3Raw == "" {
				return fmt.Errorf("--arg-3 argument not specified")
			}
			arg3 = new(big.Int)
			arg3.SetString(arg3Raw, 0)

			if arg4Raw == "" {
				return fmt.Errorf("--arg-4 argument not specified")
			}
			arg4 = new(big.Int)
			arg4.SetString(arg4Raw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewL1OrbitGatewayRouter(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := L1OrbitGatewayRouterTransactorSession{
				Contract:     &contract.L1OrbitGatewayRouterTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.SetGateways0(
				arg0,
				arg1,
				arg2,
				arg3,
				arg4,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")
	cmd.Flags().StringVar(&arg1Raw, "arg-1", "", "arg-1 argument")
	cmd.Flags().StringVar(&arg2Raw, "arg-2", "", "arg-2 argument")
	cmd.Flags().StringVar(&arg3Raw, "arg-3", "", "arg-3 argument")
	cmd.Flags().StringVar(&arg4Raw, "arg-4", "", "arg-4 argument")

	return cmd
}
func CreateUpdateWhitelistSourceCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var newSource common.Address
	var newSourceRaw string

	cmd := &cobra.Command{
		Use:   "update-whitelist-source",
		Short: "Execute the UpdateWhitelistSource method on a L1OrbitGatewayRouter contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if newSourceRaw == "" {
				return fmt.Errorf("--new-source argument not specified")
			} else if !common.IsHexAddress(newSourceRaw) {
				return fmt.Errorf("--new-source argument is not a valid Ethereum address")
			}
			newSource = common.HexToAddress(newSourceRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewL1OrbitGatewayRouter(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := L1OrbitGatewayRouterTransactorSession{
				Contract:     &contract.L1OrbitGatewayRouterTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.UpdateWhitelistSource(
				newSource,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&newSourceRaw, "new-source", "", "new-source argument")

	return cmd
}
func CreateInitializeCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var owner common.Address
	var ownerRaw string
	var defaultGateway common.Address
	var defaultGatewayRaw string
	var arg2 common.Address
	var arg2Raw string
	var counterpartGateway common.Address
	var counterpartGatewayRaw string
	var inbox common.Address
	var inboxRaw string

	cmd := &cobra.Command{
		Use:   "initialize",
		Short: "Execute the Initialize method on a L1OrbitGatewayRouter contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if ownerRaw == "" {
				return fmt.Errorf("--owner argument not specified")
			} else if !common.IsHexAddress(ownerRaw) {
				return fmt.Errorf("--owner argument is not a valid Ethereum address")
			}
			owner = common.HexToAddress(ownerRaw)

			if defaultGatewayRaw == "" {
				return fmt.Errorf("--default-gateway argument not specified")
			} else if !common.IsHexAddress(defaultGatewayRaw) {
				return fmt.Errorf("--default-gateway argument is not a valid Ethereum address")
			}
			defaultGateway = common.HexToAddress(defaultGatewayRaw)

			if arg2Raw == "" {
				return fmt.Errorf("--arg-2 argument not specified")
			} else if !common.IsHexAddress(arg2Raw) {
				return fmt.Errorf("--arg-2 argument is not a valid Ethereum address")
			}
			arg2 = common.HexToAddress(arg2Raw)

			if counterpartGatewayRaw == "" {
				return fmt.Errorf("--counterpart-gateway argument not specified")
			} else if !common.IsHexAddress(counterpartGatewayRaw) {
				return fmt.Errorf("--counterpart-gateway argument is not a valid Ethereum address")
			}
			counterpartGateway = common.HexToAddress(counterpartGatewayRaw)

			if inboxRaw == "" {
				return fmt.Errorf("--inbox argument not specified")
			} else if !common.IsHexAddress(inboxRaw) {
				return fmt.Errorf("--inbox argument is not a valid Ethereum address")
			}
			inbox = common.HexToAddress(inboxRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewL1OrbitGatewayRouter(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := L1OrbitGatewayRouterTransactorSession{
				Contract:     &contract.L1OrbitGatewayRouterTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.Initialize(
				owner,
				defaultGateway,
				arg2,
				counterpartGateway,
				inbox,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&ownerRaw, "owner", "", "owner argument")
	cmd.Flags().StringVar(&defaultGatewayRaw, "default-gateway", "", "default-gateway argument")
	cmd.Flags().StringVar(&arg2Raw, "arg-2", "", "arg-2 argument")
	cmd.Flags().StringVar(&counterpartGatewayRaw, "counterpart-gateway", "", "counterpart-gateway argument")
	cmd.Flags().StringVar(&inboxRaw, "inbox", "", "inbox argument")

	return cmd
}
func CreateOutboundTransferCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var token common.Address
	var tokenRaw string
	var _to0 common.Address
	var _to0Raw string
	var amount *big.Int
	var amountRaw string
	var maxGas *big.Int
	var maxGasRaw string
	var gasPriceBid *big.Int
	var gasPriceBidRaw string
	var data []byte
	var dataRaw string

	cmd := &cobra.Command{
		Use:   "outbound-transfer",
		Short: "Execute the OutboundTransfer method on a L1OrbitGatewayRouter contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if tokenRaw == "" {
				return fmt.Errorf("--token argument not specified")
			} else if !common.IsHexAddress(tokenRaw) {
				return fmt.Errorf("--token argument is not a valid Ethereum address")
			}
			token = common.HexToAddress(tokenRaw)

			if _to0Raw == "" {
				return fmt.Errorf("--to-0 argument not specified")
			} else if !common.IsHexAddress(_to0Raw) {
				return fmt.Errorf("--to-0 argument is not a valid Ethereum address")
			}
			_to0 = common.HexToAddress(_to0Raw)

			if amountRaw == "" {
				return fmt.Errorf("--amount argument not specified")
			}
			amount = new(big.Int)
			amount.SetString(amountRaw, 0)

			if maxGasRaw == "" {
				return fmt.Errorf("--max-gas argument not specified")
			}
			maxGas = new(big.Int)
			maxGas.SetString(maxGasRaw, 0)

			if gasPriceBidRaw == "" {
				return fmt.Errorf("--gas-price-bid argument not specified")
			}
			gasPriceBid = new(big.Int)
			gasPriceBid.SetString(gasPriceBidRaw, 0)

			var hexDecodedataErr error

			data, hexDecodedataErr = hex.DecodeString(dataRaw)
			if hexDecodedataErr != nil {
				return hexDecodedataErr
			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewL1OrbitGatewayRouter(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := L1OrbitGatewayRouterTransactorSession{
				Contract:     &contract.L1OrbitGatewayRouterTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.OutboundTransfer(
				token,
				_to0,
				amount,
				maxGas,
				gasPriceBid,
				data,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&tokenRaw, "token", "", "token argument")
	cmd.Flags().StringVar(&_to0Raw, "to-0", "", "to-0 argument")
	cmd.Flags().StringVar(&amountRaw, "amount", "", "amount argument")
	cmd.Flags().StringVar(&maxGasRaw, "max-gas", "", "max-gas argument")
	cmd.Flags().StringVar(&gasPriceBidRaw, "gas-price-bid", "", "gas-price-bid argument")
	cmd.Flags().StringVar(&dataRaw, "data", "", "data argument")

	return cmd
}
func CreateSetGateway2Command() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var arg0 common.Address
	var arg0Raw string
	var arg1 *big.Int
	var arg1Raw string
	var arg2 *big.Int
	var arg2Raw string
	var arg3 *big.Int
	var arg3Raw string

	cmd := &cobra.Command{
		Use:   "set-gateway-2",
		Short: "Execute the SetGateway2 method on a L1OrbitGatewayRouter contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			} else if !common.IsHexAddress(arg0Raw) {
				return fmt.Errorf("--arg-0 argument is not a valid Ethereum address")
			}
			arg0 = common.HexToAddress(arg0Raw)

			if arg1Raw == "" {
				return fmt.Errorf("--arg-1 argument not specified")
			}
			arg1 = new(big.Int)
			arg1.SetString(arg1Raw, 0)

			if arg2Raw == "" {
				return fmt.Errorf("--arg-2 argument not specified")
			}
			arg2 = new(big.Int)
			arg2.SetString(arg2Raw, 0)

			if arg3Raw == "" {
				return fmt.Errorf("--arg-3 argument not specified")
			}
			arg3 = new(big.Int)
			arg3.SetString(arg3Raw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewL1OrbitGatewayRouter(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := L1OrbitGatewayRouterTransactorSession{
				Contract:     &contract.L1OrbitGatewayRouterTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.SetGateway2(
				arg0,
				arg1,
				arg2,
				arg3,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")
	cmd.Flags().StringVar(&arg1Raw, "arg-1", "", "arg-1 argument")
	cmd.Flags().StringVar(&arg2Raw, "arg-2", "", "arg-2 argument")
	cmd.Flags().StringVar(&arg3Raw, "arg-3", "", "arg-3 argument")

	return cmd
}
func CreateSetGatewaysCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var token []common.Address
	var tokenRaw string
	var gateway []common.Address
	var gatewayRaw string
	var maxGas *big.Int
	var maxGasRaw string
	var gasPriceBid *big.Int
	var gasPriceBidRaw string
	var maxSubmissionCost *big.Int
	var maxSubmissionCostRaw string
	var feeAmount *big.Int
	var feeAmountRaw string

	cmd := &cobra.Command{
		Use:   "set-gateways",
		Short: "Execute the SetGateways method on a L1OrbitGatewayRouter contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if tokenRaw == "" {
				return fmt.Errorf("--token argument not specified")
			} else if strings.HasPrefix(tokenRaw, "@") {
				filename := strings.TrimPrefix(tokenRaw, "@")
				contents, readErr := os.ReadFile(filename)
				if readErr != nil {
					return readErr
				}
				unmarshalErr := json.Unmarshal(contents, &token)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			} else {
				unmarshalErr := json.Unmarshal([]byte(tokenRaw), &token)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			}

			if gatewayRaw == "" {
				return fmt.Errorf("--gateway argument not specified")
			} else if strings.HasPrefix(gatewayRaw, "@") {
				filename := strings.TrimPrefix(gatewayRaw, "@")
				contents, readErr := os.ReadFile(filename)
				if readErr != nil {
					return readErr
				}
				unmarshalErr := json.Unmarshal(contents, &gateway)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			} else {
				unmarshalErr := json.Unmarshal([]byte(gatewayRaw), &gateway)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			}

			if maxGasRaw == "" {
				return fmt.Errorf("--max-gas argument not specified")
			}
			maxGas = new(big.Int)
			maxGas.SetString(maxGasRaw, 0)

			if gasPriceBidRaw == "" {
				return fmt.Errorf("--gas-price-bid argument not specified")
			}
			gasPriceBid = new(big.Int)
			gasPriceBid.SetString(gasPriceBidRaw, 0)

			if maxSubmissionCostRaw == "" {
				return fmt.Errorf("--max-submission-cost argument not specified")
			}
			maxSubmissionCost = new(big.Int)
			maxSubmissionCost.SetString(maxSubmissionCostRaw, 0)

			if feeAmountRaw == "" {
				return fmt.Errorf("--fee-amount argument not specified")
			}
			feeAmount = new(big.Int)
			feeAmount.SetString(feeAmountRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewL1OrbitGatewayRouter(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := L1OrbitGatewayRouterTransactorSession{
				Contract:     &contract.L1OrbitGatewayRouterTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.SetGateways(
				token,
				gateway,
				maxGas,
				gasPriceBid,
				maxSubmissionCost,
				feeAmount,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&tokenRaw, "token", "", "token argument")
	cmd.Flags().StringVar(&gatewayRaw, "gateway", "", "gateway argument")
	cmd.Flags().StringVar(&maxGasRaw, "max-gas", "", "max-gas argument")
	cmd.Flags().StringVar(&gasPriceBidRaw, "gas-price-bid", "", "gas-price-bid argument")
	cmd.Flags().StringVar(&maxSubmissionCostRaw, "max-submission-cost", "", "max-submission-cost argument")
	cmd.Flags().StringVar(&feeAmountRaw, "fee-amount", "", "fee-amount argument")

	return cmd
}
func CreateOutboundTransferCustomRefundCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var token common.Address
	var tokenRaw string
	var refundTo common.Address
	var refundToRaw string
	var _to0 common.Address
	var _to0Raw string
	var amount *big.Int
	var amountRaw string
	var maxGas *big.Int
	var maxGasRaw string
	var gasPriceBid *big.Int
	var gasPriceBidRaw string
	var data []byte
	var dataRaw string

	cmd := &cobra.Command{
		Use:   "outbound-transfer-custom-refund",
		Short: "Execute the OutboundTransferCustomRefund method on a L1OrbitGatewayRouter contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if tokenRaw == "" {
				return fmt.Errorf("--token argument not specified")
			} else if !common.IsHexAddress(tokenRaw) {
				return fmt.Errorf("--token argument is not a valid Ethereum address")
			}
			token = common.HexToAddress(tokenRaw)

			if refundToRaw == "" {
				return fmt.Errorf("--refund-to argument not specified")
			} else if !common.IsHexAddress(refundToRaw) {
				return fmt.Errorf("--refund-to argument is not a valid Ethereum address")
			}
			refundTo = common.HexToAddress(refundToRaw)

			if _to0Raw == "" {
				return fmt.Errorf("--to-0 argument not specified")
			} else if !common.IsHexAddress(_to0Raw) {
				return fmt.Errorf("--to-0 argument is not a valid Ethereum address")
			}
			_to0 = common.HexToAddress(_to0Raw)

			if amountRaw == "" {
				return fmt.Errorf("--amount argument not specified")
			}
			amount = new(big.Int)
			amount.SetString(amountRaw, 0)

			if maxGasRaw == "" {
				return fmt.Errorf("--max-gas argument not specified")
			}
			maxGas = new(big.Int)
			maxGas.SetString(maxGasRaw, 0)

			if gasPriceBidRaw == "" {
				return fmt.Errorf("--gas-price-bid argument not specified")
			}
			gasPriceBid = new(big.Int)
			gasPriceBid.SetString(gasPriceBidRaw, 0)

			var hexDecodedataErr error

			data, hexDecodedataErr = hex.DecodeString(dataRaw)
			if hexDecodedataErr != nil {
				return hexDecodedataErr
			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewL1OrbitGatewayRouter(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := L1OrbitGatewayRouterTransactorSession{
				Contract:     &contract.L1OrbitGatewayRouterTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.OutboundTransferCustomRefund(
				token,
				refundTo,
				_to0,
				amount,
				maxGas,
				gasPriceBid,
				data,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&tokenRaw, "token", "", "token argument")
	cmd.Flags().StringVar(&refundToRaw, "refund-to", "", "refund-to argument")
	cmd.Flags().StringVar(&_to0Raw, "to-0", "", "to-0 argument")
	cmd.Flags().StringVar(&amountRaw, "amount", "", "amount argument")
	cmd.Flags().StringVar(&maxGasRaw, "max-gas", "", "max-gas argument")
	cmd.Flags().StringVar(&gasPriceBidRaw, "gas-price-bid", "", "gas-price-bid argument")
	cmd.Flags().StringVar(&dataRaw, "data", "", "data argument")

	return cmd
}
func CreateSetDefaultGatewayCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var arg0 common.Address
	var arg0Raw string
	var arg1 *big.Int
	var arg1Raw string
	var arg2 *big.Int
	var arg2Raw string
	var arg3 *big.Int
	var arg3Raw string

	cmd := &cobra.Command{
		Use:   "set-default-gateway",
		Short: "Execute the SetDefaultGateway method on a L1OrbitGatewayRouter contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			} else if !common.IsHexAddress(arg0Raw) {
				return fmt.Errorf("--arg-0 argument is not a valid Ethereum address")
			}
			arg0 = common.HexToAddress(arg0Raw)

			if arg1Raw == "" {
				return fmt.Errorf("--arg-1 argument not specified")
			}
			arg1 = new(big.Int)
			arg1.SetString(arg1Raw, 0)

			if arg2Raw == "" {
				return fmt.Errorf("--arg-2 argument not specified")
			}
			arg2 = new(big.Int)
			arg2.SetString(arg2Raw, 0)

			if arg3Raw == "" {
				return fmt.Errorf("--arg-3 argument not specified")
			}
			arg3 = new(big.Int)
			arg3.SetString(arg3Raw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewL1OrbitGatewayRouter(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := L1OrbitGatewayRouterTransactorSession{
				Contract:     &contract.L1OrbitGatewayRouterTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.SetDefaultGateway(
				arg0,
				arg1,
				arg2,
				arg3,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")
	cmd.Flags().StringVar(&arg1Raw, "arg-1", "", "arg-1 argument")
	cmd.Flags().StringVar(&arg2Raw, "arg-2", "", "arg-2 argument")
	cmd.Flags().StringVar(&arg3Raw, "arg-3", "", "arg-3 argument")

	return cmd
}
func CreateFinalizeInboundTransferCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var arg0 common.Address
	var arg0Raw string
	var arg1 common.Address
	var arg1Raw string
	var arg2 common.Address
	var arg2Raw string
	var arg3 *big.Int
	var arg3Raw string
	var arg4 []byte
	var arg4Raw string

	cmd := &cobra.Command{
		Use:   "finalize-inbound-transfer",
		Short: "Execute the FinalizeInboundTransfer method on a L1OrbitGatewayRouter contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			} else if !common.IsHexAddress(arg0Raw) {
				return fmt.Errorf("--arg-0 argument is not a valid Ethereum address")
			}
			arg0 = common.HexToAddress(arg0Raw)

			if arg1Raw == "" {
				return fmt.Errorf("--arg-1 argument not specified")
			} else if !common.IsHexAddress(arg1Raw) {
				return fmt.Errorf("--arg-1 argument is not a valid Ethereum address")
			}
			arg1 = common.HexToAddress(arg1Raw)

			if arg2Raw == "" {
				return fmt.Errorf("--arg-2 argument not specified")
			} else if !common.IsHexAddress(arg2Raw) {
				return fmt.Errorf("--arg-2 argument is not a valid Ethereum address")
			}
			arg2 = common.HexToAddress(arg2Raw)

			if arg3Raw == "" {
				return fmt.Errorf("--arg-3 argument not specified")
			}
			arg3 = new(big.Int)
			arg3.SetString(arg3Raw, 0)

			var hexDecodearg4Err error

			arg4, hexDecodearg4Err = hex.DecodeString(arg4Raw)
			if hexDecodearg4Err != nil {
				return hexDecodearg4Err
			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewL1OrbitGatewayRouter(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := L1OrbitGatewayRouterTransactorSession{
				Contract:     &contract.L1OrbitGatewayRouterTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.FinalizeInboundTransfer(
				arg0,
				arg1,
				arg2,
				arg3,
				arg4,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")
	cmd.Flags().StringVar(&arg1Raw, "arg-1", "", "arg-1 argument")
	cmd.Flags().StringVar(&arg2Raw, "arg-2", "", "arg-2 argument")
	cmd.Flags().StringVar(&arg3Raw, "arg-3", "", "arg-3 argument")
	cmd.Flags().StringVar(&arg4Raw, "arg-4", "", "arg-4 argument")

	return cmd
}
func CreateSetDefaultGateway0Command() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var newL1DefaultGateway common.Address
	var newL1DefaultGatewayRaw string
	var maxGas *big.Int
	var maxGasRaw string
	var gasPriceBid *big.Int
	var gasPriceBidRaw string
	var maxSubmissionCost *big.Int
	var maxSubmissionCostRaw string
	var feeAmount *big.Int
	var feeAmountRaw string

	cmd := &cobra.Command{
		Use:   "set-default-gateway-0",
		Short: "Execute the SetDefaultGateway0 method on a L1OrbitGatewayRouter contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if newL1DefaultGatewayRaw == "" {
				return fmt.Errorf("--new-l-1-default-gateway argument not specified")
			} else if !common.IsHexAddress(newL1DefaultGatewayRaw) {
				return fmt.Errorf("--new-l-1-default-gateway argument is not a valid Ethereum address")
			}
			newL1DefaultGateway = common.HexToAddress(newL1DefaultGatewayRaw)

			if maxGasRaw == "" {
				return fmt.Errorf("--max-gas argument not specified")
			}
			maxGas = new(big.Int)
			maxGas.SetString(maxGasRaw, 0)

			if gasPriceBidRaw == "" {
				return fmt.Errorf("--gas-price-bid argument not specified")
			}
			gasPriceBid = new(big.Int)
			gasPriceBid.SetString(gasPriceBidRaw, 0)

			if maxSubmissionCostRaw == "" {
				return fmt.Errorf("--max-submission-cost argument not specified")
			}
			maxSubmissionCost = new(big.Int)
			maxSubmissionCost.SetString(maxSubmissionCostRaw, 0)

			if feeAmountRaw == "" {
				return fmt.Errorf("--fee-amount argument not specified")
			}
			feeAmount = new(big.Int)
			feeAmount.SetString(feeAmountRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewL1OrbitGatewayRouter(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := L1OrbitGatewayRouterTransactorSession{
				Contract:     &contract.L1OrbitGatewayRouterTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.SetDefaultGateway0(
				newL1DefaultGateway,
				maxGas,
				gasPriceBid,
				maxSubmissionCost,
				feeAmount,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&newL1DefaultGatewayRaw, "new-l-1-default-gateway", "", "new-l-1-default-gateway argument")
	cmd.Flags().StringVar(&maxGasRaw, "max-gas", "", "max-gas argument")
	cmd.Flags().StringVar(&gasPriceBidRaw, "gas-price-bid", "", "gas-price-bid argument")
	cmd.Flags().StringVar(&maxSubmissionCostRaw, "max-submission-cost", "", "max-submission-cost argument")
	cmd.Flags().StringVar(&feeAmountRaw, "fee-amount", "", "fee-amount argument")

	return cmd
}
func CreateSetGatewayCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var arg0 common.Address
	var arg0Raw string
	var arg1 *big.Int
	var arg1Raw string
	var arg2 *big.Int
	var arg2Raw string
	var arg3 *big.Int
	var arg3Raw string
	var arg4 common.Address
	var arg4Raw string

	cmd := &cobra.Command{
		Use:   "set-gateway",
		Short: "Execute the SetGateway method on a L1OrbitGatewayRouter contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			} else if !common.IsHexAddress(arg0Raw) {
				return fmt.Errorf("--arg-0 argument is not a valid Ethereum address")
			}
			arg0 = common.HexToAddress(arg0Raw)

			if arg1Raw == "" {
				return fmt.Errorf("--arg-1 argument not specified")
			}
			arg1 = new(big.Int)
			arg1.SetString(arg1Raw, 0)

			if arg2Raw == "" {
				return fmt.Errorf("--arg-2 argument not specified")
			}
			arg2 = new(big.Int)
			arg2.SetString(arg2Raw, 0)

			if arg3Raw == "" {
				return fmt.Errorf("--arg-3 argument not specified")
			}
			arg3 = new(big.Int)
			arg3.SetString(arg3Raw, 0)

			if arg4Raw == "" {
				return fmt.Errorf("--arg-4 argument not specified")
			} else if !common.IsHexAddress(arg4Raw) {
				return fmt.Errorf("--arg-4 argument is not a valid Ethereum address")
			}
			arg4 = common.HexToAddress(arg4Raw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewL1OrbitGatewayRouter(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := L1OrbitGatewayRouterTransactorSession{
				Contract:     &contract.L1OrbitGatewayRouterTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.SetGateway(
				arg0,
				arg1,
				arg2,
				arg3,
				arg4,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")
	cmd.Flags().StringVar(&arg1Raw, "arg-1", "", "arg-1 argument")
	cmd.Flags().StringVar(&arg2Raw, "arg-2", "", "arg-2 argument")
	cmd.Flags().StringVar(&arg3Raw, "arg-3", "", "arg-3 argument")
	cmd.Flags().StringVar(&arg4Raw, "arg-4", "", "arg-4 argument")

	return cmd
}
func CreateSetGateway0Command() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var gateway common.Address
	var gatewayRaw string
	var maxGas *big.Int
	var maxGasRaw string
	var gasPriceBid *big.Int
	var gasPriceBidRaw string
	var maxSubmissionCost *big.Int
	var maxSubmissionCostRaw string
	var creditBackAddress common.Address
	var creditBackAddressRaw string
	var feeAmount *big.Int
	var feeAmountRaw string

	cmd := &cobra.Command{
		Use:   "set-gateway-0",
		Short: "Execute the SetGateway0 method on a L1OrbitGatewayRouter contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if gatewayRaw == "" {
				return fmt.Errorf("--gateway argument not specified")
			} else if !common.IsHexAddress(gatewayRaw) {
				return fmt.Errorf("--gateway argument is not a valid Ethereum address")
			}
			gateway = common.HexToAddress(gatewayRaw)

			if maxGasRaw == "" {
				return fmt.Errorf("--max-gas argument not specified")
			}
			maxGas = new(big.Int)
			maxGas.SetString(maxGasRaw, 0)

			if gasPriceBidRaw == "" {
				return fmt.Errorf("--gas-price-bid argument not specified")
			}
			gasPriceBid = new(big.Int)
			gasPriceBid.SetString(gasPriceBidRaw, 0)

			if maxSubmissionCostRaw == "" {
				return fmt.Errorf("--max-submission-cost argument not specified")
			}
			maxSubmissionCost = new(big.Int)
			maxSubmissionCost.SetString(maxSubmissionCostRaw, 0)

			if creditBackAddressRaw == "" {
				return fmt.Errorf("--credit-back-address argument not specified")
			} else if !common.IsHexAddress(creditBackAddressRaw) {
				return fmt.Errorf("--credit-back-address argument is not a valid Ethereum address")
			}
			creditBackAddress = common.HexToAddress(creditBackAddressRaw)

			if feeAmountRaw == "" {
				return fmt.Errorf("--fee-amount argument not specified")
			}
			feeAmount = new(big.Int)
			feeAmount.SetString(feeAmountRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewL1OrbitGatewayRouter(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := L1OrbitGatewayRouterTransactorSession{
				Contract:     &contract.L1OrbitGatewayRouterTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.SetGateway0(
				gateway,
				maxGas,
				gasPriceBid,
				maxSubmissionCost,
				creditBackAddress,
				feeAmount,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&gatewayRaw, "gateway", "", "gateway argument")
	cmd.Flags().StringVar(&maxGasRaw, "max-gas", "", "max-gas argument")
	cmd.Flags().StringVar(&gasPriceBidRaw, "gas-price-bid", "", "gas-price-bid argument")
	cmd.Flags().StringVar(&maxSubmissionCostRaw, "max-submission-cost", "", "max-submission-cost argument")
	cmd.Flags().StringVar(&creditBackAddressRaw, "credit-back-address", "", "credit-back-address argument")
	cmd.Flags().StringVar(&feeAmountRaw, "fee-amount", "", "fee-amount argument")

	return cmd
}
func CreateSetOwnerCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var newOwner common.Address
	var newOwnerRaw string

	cmd := &cobra.Command{
		Use:   "set-owner",
		Short: "Execute the SetOwner method on a L1OrbitGatewayRouter contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if newOwnerRaw == "" {
				return fmt.Errorf("--new-owner argument not specified")
			} else if !common.IsHexAddress(newOwnerRaw) {
				return fmt.Errorf("--new-owner argument is not a valid Ethereum address")
			}
			newOwner = common.HexToAddress(newOwnerRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewL1OrbitGatewayRouter(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := L1OrbitGatewayRouterTransactorSession{
				Contract:     &contract.L1OrbitGatewayRouterTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.SetOwner(
				newOwner,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&newOwnerRaw, "new-owner", "", "new-owner argument")

	return cmd
}

var ErrNoRPCURL error = errors.New("no RPC URL provided -- please pass an RPC URL from the command line or set the L_1_ORBIT_GATEWAY_ROUTER_RPC_URL environment variable")

// Generates an Ethereum client to the JSONRPC API at the given URL. If rpcURL is empty, then it
// attempts to read the RPC URL from the L_1_ORBIT_GATEWAY_ROUTER_RPC_URL environment variable. If that is empty,
// too, then it returns an error.
func NewClient(rpcURL string) (*ethclient.Client, error) {
	if rpcURL == "" {
		rpcURL = os.Getenv("L_1_ORBIT_GATEWAY_ROUTER_RPC_URL")
	}

	if rpcURL == "" {
		return nil, ErrNoRPCURL
	}

	client, err := ethclient.Dial(rpcURL)
	return client, err
}

// Creates a new context to be used when interacting with the chain client.
func NewChainContext(timeout uint) (context.Context, context.CancelFunc) {
	baseCtx := context.Background()
	parsedTimeout := time.Duration(timeout) * time.Second
	ctx, cancel := context.WithTimeout(baseCtx, parsedTimeout)
	return ctx, cancel
}

// Unlocks a key from a keystore (byte contents of a keystore file) with the given password.
func UnlockKeystore(keystoreData []byte, password string) (*keystore.Key, error) {
	key, err := keystore.DecryptKey(keystoreData, password)
	return key, err
}

// Loads a key from file, prompting the user for the password if it is not provided as a function argument.
func KeyFromFile(keystoreFile string, password string) (*keystore.Key, error) {
	var emptyKey *keystore.Key
	keystoreContent, readErr := os.ReadFile(keystoreFile)
	if readErr != nil {
		return emptyKey, readErr
	}

	// If password is "", prompt user for password.
	if password == "" {
		fmt.Printf("Please provide a password for keystore (%s): ", keystoreFile)
		passwordRaw, inputErr := term.ReadPassword(int(os.Stdin.Fd()))
		if inputErr != nil {
			return emptyKey, fmt.Errorf("error reading password: %s", inputErr.Error())
		}
		fmt.Print("\n")
		password = string(passwordRaw)
	}

	key, err := UnlockKeystore(keystoreContent, password)
	return key, err
}

// This method is used to set the parameters on a view call from command line arguments (represented mostly as
// strings).
func SetCallParametersFromArgs(opts *bind.CallOpts, pending bool, fromAddress, blockNumber string) {
	if pending {
		opts.Pending = true
	}

	if fromAddress != "" {
		opts.From = common.HexToAddress(fromAddress)
	}

	if blockNumber != "" {
		opts.BlockNumber = new(big.Int)
		opts.BlockNumber.SetString(blockNumber, 0)
	}
}

// This method is used to set the parameters on a transaction from command line arguments (represented mostly as
// strings).
func SetTransactionParametersFromArgs(opts *bind.TransactOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas string, gasLimit uint64, noSend bool) {
	if nonce != "" {
		opts.Nonce = new(big.Int)
		opts.Nonce.SetString(nonce, 0)
	}

	if value != "" {
		opts.Value = new(big.Int)
		opts.Value.SetString(value, 0)
	}

	if gasPrice != "" {
		opts.GasPrice = new(big.Int)
		opts.GasPrice.SetString(gasPrice, 0)
	}

	if maxFeePerGas != "" {
		opts.GasFeeCap = new(big.Int)
		opts.GasFeeCap.SetString(maxFeePerGas, 0)
	}

	if maxPriorityFeePerGas != "" {
		opts.GasTipCap = new(big.Int)
		opts.GasTipCap.SetString(maxPriorityFeePerGas, 0)
	}

	if gasLimit != 0 {
		opts.GasLimit = gasLimit
	}

	opts.NoSend = noSend
}

func CreateL1OrbitGatewayRouterCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "l-1-orbit-gateway-router",
		Short: "Interact with the L1OrbitGatewayRouter contract",
		Run: func(cmd *cobra.Command, args []string) {
			cmd.Help()
		},
	}

	cmd.SetOut(os.Stdout)

	DeployGroup := &cobra.Group{
		ID: "deploy", Title: "Commands which deploy contracts",
	}
	cmd.AddGroup(DeployGroup)
	ViewGroup := &cobra.Group{
		ID: "view", Title: "Commands which view contract state",
	}
	TransactGroup := &cobra.Group{
		ID: "transact", Title: "Commands which submit transactions",
	}
	cmd.AddGroup(ViewGroup, TransactGroup)

	cmdDeployL1OrbitGatewayRouter := CreateL1OrbitGatewayRouterDeploymentCommand()
	cmdDeployL1OrbitGatewayRouter.GroupID = DeployGroup.ID
	cmd.AddCommand(cmdDeployL1OrbitGatewayRouter)

	cmdViewGetGateway := CreateGetGatewayCommand()
	cmdViewGetGateway.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewGetGateway)
	cmdViewGetOutboundCalldata := CreateGetOutboundCalldataCommand()
	cmdViewGetOutboundCalldata.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewGetOutboundCalldata)
	cmdViewInbox := CreateInboxCommand()
	cmdViewInbox.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewInbox)
	cmdViewL1TokenToGateway := CreateL1TokenToGatewayCommand()
	cmdViewL1TokenToGateway.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewL1TokenToGateway)
	cmdViewSupportsInterface := CreateSupportsInterfaceCommand()
	cmdViewSupportsInterface.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewSupportsInterface)
	cmdViewCalculateL2TokenAddress := CreateCalculateL2TokenAddressCommand()
	cmdViewCalculateL2TokenAddress.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewCalculateL2TokenAddress)
	cmdViewCounterpartGateway := CreateCounterpartGatewayCommand()
	cmdViewCounterpartGateway.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewCounterpartGateway)
	cmdViewRouter := CreateRouterCommand()
	cmdViewRouter.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewRouter)
	cmdViewWhitelist := CreateWhitelistCommand()
	cmdViewWhitelist.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewWhitelist)
	cmdViewDefaultGateway := CreateDefaultGatewayCommand()
	cmdViewDefaultGateway.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewDefaultGateway)
	cmdViewOwner := CreateOwnerCommand()
	cmdViewOwner.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewOwner)

	cmdTransactPostUpgradeInit := CreatePostUpgradeInitCommand()
	cmdTransactPostUpgradeInit.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactPostUpgradeInit)
	cmdTransactSetGateway1 := CreateSetGateway1Command()
	cmdTransactSetGateway1.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactSetGateway1)
	cmdTransactSetGateways0 := CreateSetGateways0Command()
	cmdTransactSetGateways0.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactSetGateways0)
	cmdTransactUpdateWhitelistSource := CreateUpdateWhitelistSourceCommand()
	cmdTransactUpdateWhitelistSource.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactUpdateWhitelistSource)
	cmdTransactInitialize := CreateInitializeCommand()
	cmdTransactInitialize.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactInitialize)
	cmdTransactOutboundTransfer := CreateOutboundTransferCommand()
	cmdTransactOutboundTransfer.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactOutboundTransfer)
	cmdTransactSetGateway2 := CreateSetGateway2Command()
	cmdTransactSetGateway2.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactSetGateway2)
	cmdTransactSetGateways := CreateSetGatewaysCommand()
	cmdTransactSetGateways.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactSetGateways)
	cmdTransactOutboundTransferCustomRefund := CreateOutboundTransferCustomRefundCommand()
	cmdTransactOutboundTransferCustomRefund.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactOutboundTransferCustomRefund)
	cmdTransactSetDefaultGateway := CreateSetDefaultGatewayCommand()
	cmdTransactSetDefaultGateway.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactSetDefaultGateway)
	cmdTransactFinalizeInboundTransfer := CreateFinalizeInboundTransferCommand()
	cmdTransactFinalizeInboundTransfer.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactFinalizeInboundTransfer)
	cmdTransactSetDefaultGateway0 := CreateSetDefaultGateway0Command()
	cmdTransactSetDefaultGateway0.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactSetDefaultGateway0)
	cmdTransactSetGateway := CreateSetGatewayCommand()
	cmdTransactSetGateway.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactSetGateway)
	cmdTransactSetGateway0 := CreateSetGateway0Command()
	cmdTransactSetGateway0.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactSetGateway0)
	cmdTransactSetOwner := CreateSetOwnerCommand()
	cmdTransactSetOwner.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactSetOwner)

	return cmd
}

