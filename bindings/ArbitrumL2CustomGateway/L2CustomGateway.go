// This file was generated by seer: https://github.com/G7DAO/seer.
// seer version: 0.1.3
// seer command: seer evm generate --package ArbitrumL2CustomGateway --cli --struct L2CustomGateway
// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ArbitrumL2CustomGateway

import (
	"errors"
	"math/big"
	"strings"

	"context"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"

	// Reference imports to suppress errors if they are not otherwise used.
	"encoding/hex"
	"encoding/json"
	"fmt"
	"os"
	"time"

	"github.com/ethereum/go-ethereum/accounts/keystore"
	"github.com/ethereum/go-ethereum/ethclient"
	"github.com/spf13/cobra"
	"golang.org/x/term"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// L2CustomGatewayMetaData contains all meta data concerning the L2CustomGateway contract.
var L2CustomGatewayMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"DepositFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"l1Address\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"l2Address\",\"type\":\"address\"}],\"name\":\"TokenSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"TxToL1\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_l2ToL1Id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_exitNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawalInitiated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l1ERC20\",\"type\":\"address\"}],\"name\":\"calculateL2TokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counterpartGateway\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exitNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"finalizeInboundTransfer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"getOutboundCalldata\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"outboundCalldata\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1Counterpart\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"l1ToL2Token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"outboundTransfer\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"outboundTransfer\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"res\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postUpgradeInit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"l1Address\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"l2Address\",\"type\":\"address[]\"}],\"name\":\"registerTokenFromL1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "",
}

// L2CustomGatewayABI is the input ABI used to generate the binding from.
// Deprecated: Use L2CustomGatewayMetaData.ABI instead.
var L2CustomGatewayABI = L2CustomGatewayMetaData.ABI

// L2CustomGatewayBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use L2CustomGatewayMetaData.Bin instead.
var L2CustomGatewayBin = L2CustomGatewayMetaData.Bin

// DeployL2CustomGateway deploys a new Ethereum contract, binding an instance of L2CustomGateway to it.
func DeployL2CustomGateway(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *L2CustomGateway, error) {
	parsed, err := L2CustomGatewayMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(L2CustomGatewayBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &L2CustomGateway{L2CustomGatewayCaller: L2CustomGatewayCaller{contract: contract}, L2CustomGatewayTransactor: L2CustomGatewayTransactor{contract: contract}, L2CustomGatewayFilterer: L2CustomGatewayFilterer{contract: contract}}, nil
}

// L2CustomGateway is an auto generated Go binding around an Ethereum contract.
type L2CustomGateway struct {
	L2CustomGatewayCaller     // Read-only binding to the contract
	L2CustomGatewayTransactor // Write-only binding to the contract
	L2CustomGatewayFilterer   // Log filterer for contract events
}

// L2CustomGatewayCaller is an auto generated read-only Go binding around an Ethereum contract.
type L2CustomGatewayCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// L2CustomGatewayTransactor is an auto generated write-only Go binding around an Ethereum contract.
type L2CustomGatewayTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// L2CustomGatewayFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type L2CustomGatewayFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// L2CustomGatewaySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type L2CustomGatewaySession struct {
	Contract     *L2CustomGateway  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// L2CustomGatewayCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type L2CustomGatewayCallerSession struct {
	Contract *L2CustomGatewayCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// L2CustomGatewayTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type L2CustomGatewayTransactorSession struct {
	Contract     *L2CustomGatewayTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// L2CustomGatewayRaw is an auto generated low-level Go binding around an Ethereum contract.
type L2CustomGatewayRaw struct {
	Contract *L2CustomGateway // Generic contract binding to access the raw methods on
}

// L2CustomGatewayCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type L2CustomGatewayCallerRaw struct {
	Contract *L2CustomGatewayCaller // Generic read-only contract binding to access the raw methods on
}

// L2CustomGatewayTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type L2CustomGatewayTransactorRaw struct {
	Contract *L2CustomGatewayTransactor // Generic write-only contract binding to access the raw methods on
}

// NewL2CustomGateway creates a new instance of L2CustomGateway, bound to a specific deployed contract.
func NewL2CustomGateway(address common.Address, backend bind.ContractBackend) (*L2CustomGateway, error) {
	contract, err := bindL2CustomGateway(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &L2CustomGateway{L2CustomGatewayCaller: L2CustomGatewayCaller{contract: contract}, L2CustomGatewayTransactor: L2CustomGatewayTransactor{contract: contract}, L2CustomGatewayFilterer: L2CustomGatewayFilterer{contract: contract}}, nil
}

// NewL2CustomGatewayCaller creates a new read-only instance of L2CustomGateway, bound to a specific deployed contract.
func NewL2CustomGatewayCaller(address common.Address, caller bind.ContractCaller) (*L2CustomGatewayCaller, error) {
	contract, err := bindL2CustomGateway(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &L2CustomGatewayCaller{contract: contract}, nil
}

// NewL2CustomGatewayTransactor creates a new write-only instance of L2CustomGateway, bound to a specific deployed contract.
func NewL2CustomGatewayTransactor(address common.Address, transactor bind.ContractTransactor) (*L2CustomGatewayTransactor, error) {
	contract, err := bindL2CustomGateway(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &L2CustomGatewayTransactor{contract: contract}, nil
}

// NewL2CustomGatewayFilterer creates a new log filterer instance of L2CustomGateway, bound to a specific deployed contract.
func NewL2CustomGatewayFilterer(address common.Address, filterer bind.ContractFilterer) (*L2CustomGatewayFilterer, error) {
	contract, err := bindL2CustomGateway(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &L2CustomGatewayFilterer{contract: contract}, nil
}

// bindL2CustomGateway binds a generic wrapper to an already deployed contract.
func bindL2CustomGateway(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := L2CustomGatewayMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_L2CustomGateway *L2CustomGatewayRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _L2CustomGateway.Contract.L2CustomGatewayCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_L2CustomGateway *L2CustomGatewayRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _L2CustomGateway.Contract.L2CustomGatewayTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_L2CustomGateway *L2CustomGatewayRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _L2CustomGateway.Contract.L2CustomGatewayTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_L2CustomGateway *L2CustomGatewayCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _L2CustomGateway.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_L2CustomGateway *L2CustomGatewayTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _L2CustomGateway.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_L2CustomGateway *L2CustomGatewayTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _L2CustomGateway.Contract.contract.Transact(opts, method, params...)
}

// CalculateL2TokenAddress is a free data retrieval call binding the contract method 0xa7e28d48.
//
// Solidity: function calculateL2TokenAddress(address l1ERC20) view returns(address)
func (_L2CustomGateway *L2CustomGatewayCaller) CalculateL2TokenAddress(opts *bind.CallOpts, l1ERC20 common.Address) (common.Address, error) {
	var out []interface{}
	err := _L2CustomGateway.contract.Call(opts, &out, "calculateL2TokenAddress", l1ERC20)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// CalculateL2TokenAddress is a free data retrieval call binding the contract method 0xa7e28d48.
//
// Solidity: function calculateL2TokenAddress(address l1ERC20) view returns(address)
func (_L2CustomGateway *L2CustomGatewaySession) CalculateL2TokenAddress(l1ERC20 common.Address) (common.Address, error) {
	return _L2CustomGateway.Contract.CalculateL2TokenAddress(&_L2CustomGateway.CallOpts, l1ERC20)
}

// CalculateL2TokenAddress is a free data retrieval call binding the contract method 0xa7e28d48.
//
// Solidity: function calculateL2TokenAddress(address l1ERC20) view returns(address)
func (_L2CustomGateway *L2CustomGatewayCallerSession) CalculateL2TokenAddress(l1ERC20 common.Address) (common.Address, error) {
	return _L2CustomGateway.Contract.CalculateL2TokenAddress(&_L2CustomGateway.CallOpts, l1ERC20)
}

// CounterpartGateway is a free data retrieval call binding the contract method 0x2db09c1c.
//
// Solidity: function counterpartGateway() view returns(address)
func (_L2CustomGateway *L2CustomGatewayCaller) CounterpartGateway(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _L2CustomGateway.contract.Call(opts, &out, "counterpartGateway")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// CounterpartGateway is a free data retrieval call binding the contract method 0x2db09c1c.
//
// Solidity: function counterpartGateway() view returns(address)
func (_L2CustomGateway *L2CustomGatewaySession) CounterpartGateway() (common.Address, error) {
	return _L2CustomGateway.Contract.CounterpartGateway(&_L2CustomGateway.CallOpts)
}

// CounterpartGateway is a free data retrieval call binding the contract method 0x2db09c1c.
//
// Solidity: function counterpartGateway() view returns(address)
func (_L2CustomGateway *L2CustomGatewayCallerSession) CounterpartGateway() (common.Address, error) {
	return _L2CustomGateway.Contract.CounterpartGateway(&_L2CustomGateway.CallOpts)
}

// ExitNum is a free data retrieval call binding the contract method 0x015234ab.
//
// Solidity: function exitNum() view returns(uint256)
func (_L2CustomGateway *L2CustomGatewayCaller) ExitNum(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _L2CustomGateway.contract.Call(opts, &out, "exitNum")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ExitNum is a free data retrieval call binding the contract method 0x015234ab.
//
// Solidity: function exitNum() view returns(uint256)
func (_L2CustomGateway *L2CustomGatewaySession) ExitNum() (*big.Int, error) {
	return _L2CustomGateway.Contract.ExitNum(&_L2CustomGateway.CallOpts)
}

// ExitNum is a free data retrieval call binding the contract method 0x015234ab.
//
// Solidity: function exitNum() view returns(uint256)
func (_L2CustomGateway *L2CustomGatewayCallerSession) ExitNum() (*big.Int, error) {
	return _L2CustomGateway.Contract.ExitNum(&_L2CustomGateway.CallOpts)
}

// GetOutboundCalldata is a free data retrieval call binding the contract method 0xa0c76a96.
//
// Solidity: function getOutboundCalldata(address _token, address _from, address _to, uint256 _amount, bytes _data) view returns(bytes outboundCalldata)
func (_L2CustomGateway *L2CustomGatewayCaller) GetOutboundCalldata(opts *bind.CallOpts, _token common.Address, _from common.Address, _to common.Address, _amount *big.Int, _data []byte) ([]byte, error) {
	var out []interface{}
	err := _L2CustomGateway.contract.Call(opts, &out, "getOutboundCalldata", _token, _from, _to, _amount, _data)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GetOutboundCalldata is a free data retrieval call binding the contract method 0xa0c76a96.
//
// Solidity: function getOutboundCalldata(address _token, address _from, address _to, uint256 _amount, bytes _data) view returns(bytes outboundCalldata)
func (_L2CustomGateway *L2CustomGatewaySession) GetOutboundCalldata(_token common.Address, _from common.Address, _to common.Address, _amount *big.Int, _data []byte) ([]byte, error) {
	return _L2CustomGateway.Contract.GetOutboundCalldata(&_L2CustomGateway.CallOpts, _token, _from, _to, _amount, _data)
}

// GetOutboundCalldata is a free data retrieval call binding the contract method 0xa0c76a96.
//
// Solidity: function getOutboundCalldata(address _token, address _from, address _to, uint256 _amount, bytes _data) view returns(bytes outboundCalldata)
func (_L2CustomGateway *L2CustomGatewayCallerSession) GetOutboundCalldata(_token common.Address, _from common.Address, _to common.Address, _amount *big.Int, _data []byte) ([]byte, error) {
	return _L2CustomGateway.Contract.GetOutboundCalldata(&_L2CustomGateway.CallOpts, _token, _from, _to, _amount, _data)
}

// L1ToL2Token is a free data retrieval call binding the contract method 0x8a2dc014.
//
// Solidity: function l1ToL2Token(address ) view returns(address)
func (_L2CustomGateway *L2CustomGatewayCaller) L1ToL2Token(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var out []interface{}
	err := _L2CustomGateway.contract.Call(opts, &out, "l1ToL2Token", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// L1ToL2Token is a free data retrieval call binding the contract method 0x8a2dc014.
//
// Solidity: function l1ToL2Token(address ) view returns(address)
func (_L2CustomGateway *L2CustomGatewaySession) L1ToL2Token(arg0 common.Address) (common.Address, error) {
	return _L2CustomGateway.Contract.L1ToL2Token(&_L2CustomGateway.CallOpts, arg0)
}

// L1ToL2Token is a free data retrieval call binding the contract method 0x8a2dc014.
//
// Solidity: function l1ToL2Token(address ) view returns(address)
func (_L2CustomGateway *L2CustomGatewayCallerSession) L1ToL2Token(arg0 common.Address) (common.Address, error) {
	return _L2CustomGateway.Contract.L1ToL2Token(&_L2CustomGateway.CallOpts, arg0)
}

// Router is a free data retrieval call binding the contract method 0xf887ea40.
//
// Solidity: function router() view returns(address)
func (_L2CustomGateway *L2CustomGatewayCaller) Router(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _L2CustomGateway.contract.Call(opts, &out, "router")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Router is a free data retrieval call binding the contract method 0xf887ea40.
//
// Solidity: function router() view returns(address)
func (_L2CustomGateway *L2CustomGatewaySession) Router() (common.Address, error) {
	return _L2CustomGateway.Contract.Router(&_L2CustomGateway.CallOpts)
}

// Router is a free data retrieval call binding the contract method 0xf887ea40.
//
// Solidity: function router() view returns(address)
func (_L2CustomGateway *L2CustomGatewayCallerSession) Router() (common.Address, error) {
	return _L2CustomGateway.Contract.Router(&_L2CustomGateway.CallOpts)
}

// FinalizeInboundTransfer is a paid mutator transaction binding the contract method 0x2e567b36.
//
// Solidity: function finalizeInboundTransfer(address _token, address _from, address _to, uint256 _amount, bytes _data) payable returns()
func (_L2CustomGateway *L2CustomGatewayTransactor) FinalizeInboundTransfer(opts *bind.TransactOpts, _token common.Address, _from common.Address, _to common.Address, _amount *big.Int, _data []byte) (*types.Transaction, error) {
	return _L2CustomGateway.contract.Transact(opts, "finalizeInboundTransfer", _token, _from, _to, _amount, _data)
}

// FinalizeInboundTransfer is a paid mutator transaction binding the contract method 0x2e567b36.
//
// Solidity: function finalizeInboundTransfer(address _token, address _from, address _to, uint256 _amount, bytes _data) payable returns()
func (_L2CustomGateway *L2CustomGatewaySession) FinalizeInboundTransfer(_token common.Address, _from common.Address, _to common.Address, _amount *big.Int, _data []byte) (*types.Transaction, error) {
	return _L2CustomGateway.Contract.FinalizeInboundTransfer(&_L2CustomGateway.TransactOpts, _token, _from, _to, _amount, _data)
}

// FinalizeInboundTransfer is a paid mutator transaction binding the contract method 0x2e567b36.
//
// Solidity: function finalizeInboundTransfer(address _token, address _from, address _to, uint256 _amount, bytes _data) payable returns()
func (_L2CustomGateway *L2CustomGatewayTransactorSession) FinalizeInboundTransfer(_token common.Address, _from common.Address, _to common.Address, _amount *big.Int, _data []byte) (*types.Transaction, error) {
	return _L2CustomGateway.Contract.FinalizeInboundTransfer(&_L2CustomGateway.TransactOpts, _token, _from, _to, _amount, _data)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address _l1Counterpart, address _router) returns()
func (_L2CustomGateway *L2CustomGatewayTransactor) Initialize(opts *bind.TransactOpts, _l1Counterpart common.Address, _router common.Address) (*types.Transaction, error) {
	return _L2CustomGateway.contract.Transact(opts, "initialize", _l1Counterpart, _router)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address _l1Counterpart, address _router) returns()
func (_L2CustomGateway *L2CustomGatewaySession) Initialize(_l1Counterpart common.Address, _router common.Address) (*types.Transaction, error) {
	return _L2CustomGateway.Contract.Initialize(&_L2CustomGateway.TransactOpts, _l1Counterpart, _router)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address _l1Counterpart, address _router) returns()
func (_L2CustomGateway *L2CustomGatewayTransactorSession) Initialize(_l1Counterpart common.Address, _router common.Address) (*types.Transaction, error) {
	return _L2CustomGateway.Contract.Initialize(&_L2CustomGateway.TransactOpts, _l1Counterpart, _router)
}

// OutboundTransfer is a paid mutator transaction binding the contract method 0x7b3a3c8b.
//
// Solidity: function outboundTransfer(address _l1Token, address _to, uint256 _amount, bytes _data) payable returns(bytes)
func (_L2CustomGateway *L2CustomGatewayTransactor) OutboundTransfer(opts *bind.TransactOpts, _l1Token common.Address, _to common.Address, _amount *big.Int, _data []byte) (*types.Transaction, error) {
	return _L2CustomGateway.contract.Transact(opts, "outboundTransfer", _l1Token, _to, _amount, _data)
}

// OutboundTransfer is a paid mutator transaction binding the contract method 0x7b3a3c8b.
//
// Solidity: function outboundTransfer(address _l1Token, address _to, uint256 _amount, bytes _data) payable returns(bytes)
func (_L2CustomGateway *L2CustomGatewaySession) OutboundTransfer(_l1Token common.Address, _to common.Address, _amount *big.Int, _data []byte) (*types.Transaction, error) {
	return _L2CustomGateway.Contract.OutboundTransfer(&_L2CustomGateway.TransactOpts, _l1Token, _to, _amount, _data)
}

// OutboundTransfer is a paid mutator transaction binding the contract method 0x7b3a3c8b.
//
// Solidity: function outboundTransfer(address _l1Token, address _to, uint256 _amount, bytes _data) payable returns(bytes)
func (_L2CustomGateway *L2CustomGatewayTransactorSession) OutboundTransfer(_l1Token common.Address, _to common.Address, _amount *big.Int, _data []byte) (*types.Transaction, error) {
	return _L2CustomGateway.Contract.OutboundTransfer(&_L2CustomGateway.TransactOpts, _l1Token, _to, _amount, _data)
}

// OutboundTransfer0 is a paid mutator transaction binding the contract method 0xd2ce7d65.
//
// Solidity: function outboundTransfer(address _l1Token, address _to, uint256 _amount, uint256 , uint256 , bytes _data) payable returns(bytes res)
func (_L2CustomGateway *L2CustomGatewayTransactor) OutboundTransfer0(opts *bind.TransactOpts, _l1Token common.Address, _to common.Address, _amount *big.Int, arg3 *big.Int, arg4 *big.Int, _data []byte) (*types.Transaction, error) {
	return _L2CustomGateway.contract.Transact(opts, "outboundTransfer0", _l1Token, _to, _amount, arg3, arg4, _data)
}

// OutboundTransfer0 is a paid mutator transaction binding the contract method 0xd2ce7d65.
//
// Solidity: function outboundTransfer(address _l1Token, address _to, uint256 _amount, uint256 , uint256 , bytes _data) payable returns(bytes res)
func (_L2CustomGateway *L2CustomGatewaySession) OutboundTransfer0(_l1Token common.Address, _to common.Address, _amount *big.Int, arg3 *big.Int, arg4 *big.Int, _data []byte) (*types.Transaction, error) {
	return _L2CustomGateway.Contract.OutboundTransfer0(&_L2CustomGateway.TransactOpts, _l1Token, _to, _amount, arg3, arg4, _data)
}

// OutboundTransfer0 is a paid mutator transaction binding the contract method 0xd2ce7d65.
//
// Solidity: function outboundTransfer(address _l1Token, address _to, uint256 _amount, uint256 , uint256 , bytes _data) payable returns(bytes res)
func (_L2CustomGateway *L2CustomGatewayTransactorSession) OutboundTransfer0(_l1Token common.Address, _to common.Address, _amount *big.Int, arg3 *big.Int, arg4 *big.Int, _data []byte) (*types.Transaction, error) {
	return _L2CustomGateway.Contract.OutboundTransfer0(&_L2CustomGateway.TransactOpts, _l1Token, _to, _amount, arg3, arg4, _data)
}

// PostUpgradeInit is a paid mutator transaction binding the contract method 0x95fcea78.
//
// Solidity: function postUpgradeInit() returns()
func (_L2CustomGateway *L2CustomGatewayTransactor) PostUpgradeInit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _L2CustomGateway.contract.Transact(opts, "postUpgradeInit")
}

// PostUpgradeInit is a paid mutator transaction binding the contract method 0x95fcea78.
//
// Solidity: function postUpgradeInit() returns()
func (_L2CustomGateway *L2CustomGatewaySession) PostUpgradeInit() (*types.Transaction, error) {
	return _L2CustomGateway.Contract.PostUpgradeInit(&_L2CustomGateway.TransactOpts)
}

// PostUpgradeInit is a paid mutator transaction binding the contract method 0x95fcea78.
//
// Solidity: function postUpgradeInit() returns()
func (_L2CustomGateway *L2CustomGatewayTransactorSession) PostUpgradeInit() (*types.Transaction, error) {
	return _L2CustomGateway.Contract.PostUpgradeInit(&_L2CustomGateway.TransactOpts)
}

// RegisterTokenFromL1 is a paid mutator transaction binding the contract method 0xd4f5532f.
//
// Solidity: function registerTokenFromL1(address[] l1Address, address[] l2Address) returns()
func (_L2CustomGateway *L2CustomGatewayTransactor) RegisterTokenFromL1(opts *bind.TransactOpts, l1Address []common.Address, l2Address []common.Address) (*types.Transaction, error) {
	return _L2CustomGateway.contract.Transact(opts, "registerTokenFromL1", l1Address, l2Address)
}

// RegisterTokenFromL1 is a paid mutator transaction binding the contract method 0xd4f5532f.
//
// Solidity: function registerTokenFromL1(address[] l1Address, address[] l2Address) returns()
func (_L2CustomGateway *L2CustomGatewaySession) RegisterTokenFromL1(l1Address []common.Address, l2Address []common.Address) (*types.Transaction, error) {
	return _L2CustomGateway.Contract.RegisterTokenFromL1(&_L2CustomGateway.TransactOpts, l1Address, l2Address)
}

// RegisterTokenFromL1 is a paid mutator transaction binding the contract method 0xd4f5532f.
//
// Solidity: function registerTokenFromL1(address[] l1Address, address[] l2Address) returns()
func (_L2CustomGateway *L2CustomGatewayTransactorSession) RegisterTokenFromL1(l1Address []common.Address, l2Address []common.Address) (*types.Transaction, error) {
	return _L2CustomGateway.Contract.RegisterTokenFromL1(&_L2CustomGateway.TransactOpts, l1Address, l2Address)
}

// L2CustomGatewayDepositFinalizedIterator is returned from FilterDepositFinalized and is used to iterate over the raw logs and unpacked data for DepositFinalized events raised by the L2CustomGateway contract.
type L2CustomGatewayDepositFinalizedIterator struct {
	Event *L2CustomGatewayDepositFinalized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L2CustomGatewayDepositFinalizedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L2CustomGatewayDepositFinalized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L2CustomGatewayDepositFinalized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L2CustomGatewayDepositFinalizedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L2CustomGatewayDepositFinalizedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L2CustomGatewayDepositFinalized represents a DepositFinalized event raised by the L2CustomGateway contract.
type L2CustomGatewayDepositFinalized struct {
	L1Token common.Address
	From    common.Address
	To      common.Address
	Amount  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterDepositFinalized is a free log retrieval operation binding the contract event 0xc7f2e9c55c40a50fbc217dfc70cd39a222940dfa62145aa0ca49eb9535d4fcb2.
//
// Solidity: event DepositFinalized(address indexed l1Token, address indexed _from, address indexed _to, uint256 _amount)
func (_L2CustomGateway *L2CustomGatewayFilterer) FilterDepositFinalized(opts *bind.FilterOpts, l1Token []common.Address, _from []common.Address, _to []common.Address) (*L2CustomGatewayDepositFinalizedIterator, error) {

	var l1TokenRule []interface{}
	for _, l1TokenItem := range l1Token {
		l1TokenRule = append(l1TokenRule, l1TokenItem)
	}
	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}

	logs, sub, err := _L2CustomGateway.contract.FilterLogs(opts, "DepositFinalized", l1TokenRule, _fromRule, _toRule)
	if err != nil {
		return nil, err
	}
	return &L2CustomGatewayDepositFinalizedIterator{contract: _L2CustomGateway.contract, event: "DepositFinalized", logs: logs, sub: sub}, nil
}

// WatchDepositFinalized is a free log subscription operation binding the contract event 0xc7f2e9c55c40a50fbc217dfc70cd39a222940dfa62145aa0ca49eb9535d4fcb2.
//
// Solidity: event DepositFinalized(address indexed l1Token, address indexed _from, address indexed _to, uint256 _amount)
func (_L2CustomGateway *L2CustomGatewayFilterer) WatchDepositFinalized(opts *bind.WatchOpts, sink chan<- *L2CustomGatewayDepositFinalized, l1Token []common.Address, _from []common.Address, _to []common.Address) (event.Subscription, error) {

	var l1TokenRule []interface{}
	for _, l1TokenItem := range l1Token {
		l1TokenRule = append(l1TokenRule, l1TokenItem)
	}
	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}

	logs, sub, err := _L2CustomGateway.contract.WatchLogs(opts, "DepositFinalized", l1TokenRule, _fromRule, _toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L2CustomGatewayDepositFinalized)
				if err := _L2CustomGateway.contract.UnpackLog(event, "DepositFinalized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDepositFinalized is a log parse operation binding the contract event 0xc7f2e9c55c40a50fbc217dfc70cd39a222940dfa62145aa0ca49eb9535d4fcb2.
//
// Solidity: event DepositFinalized(address indexed l1Token, address indexed _from, address indexed _to, uint256 _amount)
func (_L2CustomGateway *L2CustomGatewayFilterer) ParseDepositFinalized(log types.Log) (*L2CustomGatewayDepositFinalized, error) {
	event := new(L2CustomGatewayDepositFinalized)
	if err := _L2CustomGateway.contract.UnpackLog(event, "DepositFinalized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L2CustomGatewayTokenSetIterator is returned from FilterTokenSet and is used to iterate over the raw logs and unpacked data for TokenSet events raised by the L2CustomGateway contract.
type L2CustomGatewayTokenSetIterator struct {
	Event *L2CustomGatewayTokenSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L2CustomGatewayTokenSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L2CustomGatewayTokenSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L2CustomGatewayTokenSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L2CustomGatewayTokenSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L2CustomGatewayTokenSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L2CustomGatewayTokenSet represents a TokenSet event raised by the L2CustomGateway contract.
type L2CustomGatewayTokenSet struct {
	L1Address common.Address
	L2Address common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterTokenSet is a free log retrieval operation binding the contract event 0x0dd664a155dd89526bb019e22b00291bb7ca9d07ba3ec4a1a76b410da9797ceb.
//
// Solidity: event TokenSet(address indexed l1Address, address indexed l2Address)
func (_L2CustomGateway *L2CustomGatewayFilterer) FilterTokenSet(opts *bind.FilterOpts, l1Address []common.Address, l2Address []common.Address) (*L2CustomGatewayTokenSetIterator, error) {

	var l1AddressRule []interface{}
	for _, l1AddressItem := range l1Address {
		l1AddressRule = append(l1AddressRule, l1AddressItem)
	}
	var l2AddressRule []interface{}
	for _, l2AddressItem := range l2Address {
		l2AddressRule = append(l2AddressRule, l2AddressItem)
	}

	logs, sub, err := _L2CustomGateway.contract.FilterLogs(opts, "TokenSet", l1AddressRule, l2AddressRule)
	if err != nil {
		return nil, err
	}
	return &L2CustomGatewayTokenSetIterator{contract: _L2CustomGateway.contract, event: "TokenSet", logs: logs, sub: sub}, nil
}

// WatchTokenSet is a free log subscription operation binding the contract event 0x0dd664a155dd89526bb019e22b00291bb7ca9d07ba3ec4a1a76b410da9797ceb.
//
// Solidity: event TokenSet(address indexed l1Address, address indexed l2Address)
func (_L2CustomGateway *L2CustomGatewayFilterer) WatchTokenSet(opts *bind.WatchOpts, sink chan<- *L2CustomGatewayTokenSet, l1Address []common.Address, l2Address []common.Address) (event.Subscription, error) {

	var l1AddressRule []interface{}
	for _, l1AddressItem := range l1Address {
		l1AddressRule = append(l1AddressRule, l1AddressItem)
	}
	var l2AddressRule []interface{}
	for _, l2AddressItem := range l2Address {
		l2AddressRule = append(l2AddressRule, l2AddressItem)
	}

	logs, sub, err := _L2CustomGateway.contract.WatchLogs(opts, "TokenSet", l1AddressRule, l2AddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L2CustomGatewayTokenSet)
				if err := _L2CustomGateway.contract.UnpackLog(event, "TokenSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTokenSet is a log parse operation binding the contract event 0x0dd664a155dd89526bb019e22b00291bb7ca9d07ba3ec4a1a76b410da9797ceb.
//
// Solidity: event TokenSet(address indexed l1Address, address indexed l2Address)
func (_L2CustomGateway *L2CustomGatewayFilterer) ParseTokenSet(log types.Log) (*L2CustomGatewayTokenSet, error) {
	event := new(L2CustomGatewayTokenSet)
	if err := _L2CustomGateway.contract.UnpackLog(event, "TokenSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L2CustomGatewayTxToL1Iterator is returned from FilterTxToL1 and is used to iterate over the raw logs and unpacked data for TxToL1 events raised by the L2CustomGateway contract.
type L2CustomGatewayTxToL1Iterator struct {
	Event *L2CustomGatewayTxToL1 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L2CustomGatewayTxToL1Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L2CustomGatewayTxToL1)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L2CustomGatewayTxToL1)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L2CustomGatewayTxToL1Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L2CustomGatewayTxToL1Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L2CustomGatewayTxToL1 represents a TxToL1 event raised by the L2CustomGateway contract.
type L2CustomGatewayTxToL1 struct {
	From common.Address
	To   common.Address
	Id   *big.Int
	Data []byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterTxToL1 is a free log retrieval operation binding the contract event 0x2b986d32a0536b7e19baa48ab949fec7b903b7fad7730820b20632d100cc3a68.
//
// Solidity: event TxToL1(address indexed _from, address indexed _to, uint256 indexed _id, bytes _data)
func (_L2CustomGateway *L2CustomGatewayFilterer) FilterTxToL1(opts *bind.FilterOpts, _from []common.Address, _to []common.Address, _id []*big.Int) (*L2CustomGatewayTxToL1Iterator, error) {

	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}
	var _idRule []interface{}
	for _, _idItem := range _id {
		_idRule = append(_idRule, _idItem)
	}

	logs, sub, err := _L2CustomGateway.contract.FilterLogs(opts, "TxToL1", _fromRule, _toRule, _idRule)
	if err != nil {
		return nil, err
	}
	return &L2CustomGatewayTxToL1Iterator{contract: _L2CustomGateway.contract, event: "TxToL1", logs: logs, sub: sub}, nil
}

// WatchTxToL1 is a free log subscription operation binding the contract event 0x2b986d32a0536b7e19baa48ab949fec7b903b7fad7730820b20632d100cc3a68.
//
// Solidity: event TxToL1(address indexed _from, address indexed _to, uint256 indexed _id, bytes _data)
func (_L2CustomGateway *L2CustomGatewayFilterer) WatchTxToL1(opts *bind.WatchOpts, sink chan<- *L2CustomGatewayTxToL1, _from []common.Address, _to []common.Address, _id []*big.Int) (event.Subscription, error) {

	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}
	var _idRule []interface{}
	for _, _idItem := range _id {
		_idRule = append(_idRule, _idItem)
	}

	logs, sub, err := _L2CustomGateway.contract.WatchLogs(opts, "TxToL1", _fromRule, _toRule, _idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L2CustomGatewayTxToL1)
				if err := _L2CustomGateway.contract.UnpackLog(event, "TxToL1", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTxToL1 is a log parse operation binding the contract event 0x2b986d32a0536b7e19baa48ab949fec7b903b7fad7730820b20632d100cc3a68.
//
// Solidity: event TxToL1(address indexed _from, address indexed _to, uint256 indexed _id, bytes _data)
func (_L2CustomGateway *L2CustomGatewayFilterer) ParseTxToL1(log types.Log) (*L2CustomGatewayTxToL1, error) {
	event := new(L2CustomGatewayTxToL1)
	if err := _L2CustomGateway.contract.UnpackLog(event, "TxToL1", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L2CustomGatewayWithdrawalInitiatedIterator is returned from FilterWithdrawalInitiated and is used to iterate over the raw logs and unpacked data for WithdrawalInitiated events raised by the L2CustomGateway contract.
type L2CustomGatewayWithdrawalInitiatedIterator struct {
	Event *L2CustomGatewayWithdrawalInitiated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L2CustomGatewayWithdrawalInitiatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L2CustomGatewayWithdrawalInitiated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L2CustomGatewayWithdrawalInitiated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L2CustomGatewayWithdrawalInitiatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L2CustomGatewayWithdrawalInitiatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L2CustomGatewayWithdrawalInitiated represents a WithdrawalInitiated event raised by the L2CustomGateway contract.
type L2CustomGatewayWithdrawalInitiated struct {
	L1Token  common.Address
	From     common.Address
	To       common.Address
	L2ToL1Id *big.Int
	ExitNum  *big.Int
	Amount   *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterWithdrawalInitiated is a free log retrieval operation binding the contract event 0x3073a74ecb728d10be779fe19a74a1428e20468f5b4d167bf9c73d9067847d73.
//
// Solidity: event WithdrawalInitiated(address l1Token, address indexed _from, address indexed _to, uint256 indexed _l2ToL1Id, uint256 _exitNum, uint256 _amount)
func (_L2CustomGateway *L2CustomGatewayFilterer) FilterWithdrawalInitiated(opts *bind.FilterOpts, _from []common.Address, _to []common.Address, _l2ToL1Id []*big.Int) (*L2CustomGatewayWithdrawalInitiatedIterator, error) {

	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}
	var _l2ToL1IdRule []interface{}
	for _, _l2ToL1IdItem := range _l2ToL1Id {
		_l2ToL1IdRule = append(_l2ToL1IdRule, _l2ToL1IdItem)
	}

	logs, sub, err := _L2CustomGateway.contract.FilterLogs(opts, "WithdrawalInitiated", _fromRule, _toRule, _l2ToL1IdRule)
	if err != nil {
		return nil, err
	}
	return &L2CustomGatewayWithdrawalInitiatedIterator{contract: _L2CustomGateway.contract, event: "WithdrawalInitiated", logs: logs, sub: sub}, nil
}

// WatchWithdrawalInitiated is a free log subscription operation binding the contract event 0x3073a74ecb728d10be779fe19a74a1428e20468f5b4d167bf9c73d9067847d73.
//
// Solidity: event WithdrawalInitiated(address l1Token, address indexed _from, address indexed _to, uint256 indexed _l2ToL1Id, uint256 _exitNum, uint256 _amount)
func (_L2CustomGateway *L2CustomGatewayFilterer) WatchWithdrawalInitiated(opts *bind.WatchOpts, sink chan<- *L2CustomGatewayWithdrawalInitiated, _from []common.Address, _to []common.Address, _l2ToL1Id []*big.Int) (event.Subscription, error) {

	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}
	var _l2ToL1IdRule []interface{}
	for _, _l2ToL1IdItem := range _l2ToL1Id {
		_l2ToL1IdRule = append(_l2ToL1IdRule, _l2ToL1IdItem)
	}

	logs, sub, err := _L2CustomGateway.contract.WatchLogs(opts, "WithdrawalInitiated", _fromRule, _toRule, _l2ToL1IdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L2CustomGatewayWithdrawalInitiated)
				if err := _L2CustomGateway.contract.UnpackLog(event, "WithdrawalInitiated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawalInitiated is a log parse operation binding the contract event 0x3073a74ecb728d10be779fe19a74a1428e20468f5b4d167bf9c73d9067847d73.
//
// Solidity: event WithdrawalInitiated(address l1Token, address indexed _from, address indexed _to, uint256 indexed _l2ToL1Id, uint256 _exitNum, uint256 _amount)
func (_L2CustomGateway *L2CustomGatewayFilterer) ParseWithdrawalInitiated(log types.Log) (*L2CustomGatewayWithdrawalInitiated, error) {
	event := new(L2CustomGatewayWithdrawalInitiated)
	if err := _L2CustomGateway.contract.UnpackLog(event, "WithdrawalInitiated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

func CreateL2CustomGatewayDeploymentCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc string
	var gasLimit uint64
	var simulate bool
	var timeout uint

	cmd := &cobra.Command{
		Use:   "deploy",
		Short: "Deploy a new L2CustomGateway contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified (this should be a path to an Ethereum account keystore file)")
			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			address, deploymentTransaction, _, deploymentErr := DeployL2CustomGateway(
				transactionOpts,
				client,
			)
			if deploymentErr != nil {
				return deploymentErr
			}

			cmd.Printf("Transaction hash: %s\nContract address: %s\n", deploymentTransaction.Hash().Hex(), address.Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					Data: deploymentTransaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := deploymentTransaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")

	return cmd
}

func CreateRouterCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 common.Address

	cmd := &cobra.Command{
		Use:   "router",
		Short: "Call the Router view method on a L2CustomGateway contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewL2CustomGateway(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := L2CustomGatewayCallerSession{
				Contract: &contract.L2CustomGatewayCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.Router()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.Hex())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}
func CreateCalculateL2TokenAddressCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var l1ERC20 common.Address
	var l1ERC20Raw string

	var capture0 common.Address

	cmd := &cobra.Command{
		Use:   "calculate-l-2-token-address",
		Short: "Call the CalculateL2TokenAddress view method on a L2CustomGateway contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if l1ERC20Raw == "" {
				return fmt.Errorf("--l-1-erc-20 argument not specified")
			} else if !common.IsHexAddress(l1ERC20Raw) {
				return fmt.Errorf("--l-1-erc-20 argument is not a valid Ethereum address")
			}
			l1ERC20 = common.HexToAddress(l1ERC20Raw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewL2CustomGateway(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := L2CustomGatewayCallerSession{
				Contract: &contract.L2CustomGatewayCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.CalculateL2TokenAddress(
				l1ERC20,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.Hex())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&l1ERC20Raw, "l-1-erc-20", "", "l-1-erc-20 argument")

	return cmd
}
func CreateCounterpartGatewayCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 common.Address

	cmd := &cobra.Command{
		Use:   "counterpart-gateway",
		Short: "Call the CounterpartGateway view method on a L2CustomGateway contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewL2CustomGateway(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := L2CustomGatewayCallerSession{
				Contract: &contract.L2CustomGatewayCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.CounterpartGateway()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.Hex())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}
func CreateExitNumCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "exit-num",
		Short: "Call the ExitNum view method on a L2CustomGateway contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewL2CustomGateway(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := L2CustomGatewayCallerSession{
				Contract: &contract.L2CustomGatewayCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.ExitNum()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}
func CreateGetOutboundCalldataCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var token common.Address
	var tokenRaw string
	var _from0 common.Address
	var _from0Raw string
	var _to0 common.Address
	var _to0Raw string
	var amount *big.Int
	var amountRaw string
	var data []byte
	var dataRaw string

	var capture0 []byte

	cmd := &cobra.Command{
		Use:   "get-outbound-calldata",
		Short: "Call the GetOutboundCalldata view method on a L2CustomGateway contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if tokenRaw == "" {
				return fmt.Errorf("--token argument not specified")
			} else if !common.IsHexAddress(tokenRaw) {
				return fmt.Errorf("--token argument is not a valid Ethereum address")
			}
			token = common.HexToAddress(tokenRaw)

			if _from0Raw == "" {
				return fmt.Errorf("---from-0 argument not specified")
			} else if !common.IsHexAddress(_from0Raw) {
				return fmt.Errorf("---from-0 argument is not a valid Ethereum address")
			}
			_from0 = common.HexToAddress(_from0Raw)

			if _to0Raw == "" {
				return fmt.Errorf("---to-0 argument not specified")
			} else if !common.IsHexAddress(_to0Raw) {
				return fmt.Errorf("---to-0 argument is not a valid Ethereum address")
			}
			_to0 = common.HexToAddress(_to0Raw)

			if amountRaw == "" {
				return fmt.Errorf("--amount argument not specified")
			}
			amount = new(big.Int)
			amount.SetString(amountRaw, 0)

			var hexDecodedataErr error

			data, hexDecodedataErr = hex.DecodeString(dataRaw)
			if hexDecodedataErr != nil {
				return hexDecodedataErr
			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewL2CustomGateway(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := L2CustomGatewayCallerSession{
				Contract: &contract.L2CustomGatewayCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.GetOutboundCalldata(
				token,
				_from0,
				_to0,
				amount,
				data,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %v\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&tokenRaw, "token", "", "token argument")
	cmd.Flags().StringVar(&_from0Raw, "-from-0", "", "-from-0 argument")
	cmd.Flags().StringVar(&_to0Raw, "-to-0", "", "-to-0 argument")
	cmd.Flags().StringVar(&amountRaw, "amount", "", "amount argument")
	cmd.Flags().StringVar(&dataRaw, "data", "", "data argument")

	return cmd
}
func CreateL1ToL2TokenCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 common.Address
	var arg0Raw string

	var capture0 common.Address

	cmd := &cobra.Command{
		Use:   "l-1-to-l-2-token",
		Short: "Call the L1ToL2Token view method on a L2CustomGateway contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			} else if !common.IsHexAddress(arg0Raw) {
				return fmt.Errorf("--arg-0 argument is not a valid Ethereum address")
			}
			arg0 = common.HexToAddress(arg0Raw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewL2CustomGateway(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := L2CustomGatewayCallerSession{
				Contract: &contract.L2CustomGatewayCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.L1ToL2Token(
				arg0,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.Hex())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")

	return cmd
}

func CreateFinalizeInboundTransferCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var token common.Address
	var tokenRaw string
	var _from0 common.Address
	var _from0Raw string
	var _to0 common.Address
	var _to0Raw string
	var amount *big.Int
	var amountRaw string
	var data []byte
	var dataRaw string

	cmd := &cobra.Command{
		Use:   "finalize-inbound-transfer",
		Short: "Execute the FinalizeInboundTransfer method on a L2CustomGateway contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if tokenRaw == "" {
				return fmt.Errorf("--token argument not specified")
			} else if !common.IsHexAddress(tokenRaw) {
				return fmt.Errorf("--token argument is not a valid Ethereum address")
			}
			token = common.HexToAddress(tokenRaw)

			if _from0Raw == "" {
				return fmt.Errorf("---from-0 argument not specified")
			} else if !common.IsHexAddress(_from0Raw) {
				return fmt.Errorf("---from-0 argument is not a valid Ethereum address")
			}
			_from0 = common.HexToAddress(_from0Raw)

			if _to0Raw == "" {
				return fmt.Errorf("---to-0 argument not specified")
			} else if !common.IsHexAddress(_to0Raw) {
				return fmt.Errorf("---to-0 argument is not a valid Ethereum address")
			}
			_to0 = common.HexToAddress(_to0Raw)

			if amountRaw == "" {
				return fmt.Errorf("--amount argument not specified")
			}
			amount = new(big.Int)
			amount.SetString(amountRaw, 0)

			var hexDecodedataErr error

			data, hexDecodedataErr = hex.DecodeString(dataRaw)
			if hexDecodedataErr != nil {
				return hexDecodedataErr
			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewL2CustomGateway(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := L2CustomGatewayTransactorSession{
				Contract:     &contract.L2CustomGatewayTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.FinalizeInboundTransfer(
				token,
				_from0,
				_to0,
				amount,
				data,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&tokenRaw, "token", "", "token argument")
	cmd.Flags().StringVar(&_from0Raw, "-from-0", "", "-from-0 argument")
	cmd.Flags().StringVar(&_to0Raw, "-to-0", "", "-to-0 argument")
	cmd.Flags().StringVar(&amountRaw, "amount", "", "amount argument")
	cmd.Flags().StringVar(&dataRaw, "data", "", "data argument")

	return cmd
}
func CreateInitializeCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var l1Counterpart common.Address
	var l1CounterpartRaw string
	var router common.Address
	var routerRaw string

	cmd := &cobra.Command{
		Use:   "initialize",
		Short: "Execute the Initialize method on a L2CustomGateway contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if l1CounterpartRaw == "" {
				return fmt.Errorf("--l-1-counterpart argument not specified")
			} else if !common.IsHexAddress(l1CounterpartRaw) {
				return fmt.Errorf("--l-1-counterpart argument is not a valid Ethereum address")
			}
			l1Counterpart = common.HexToAddress(l1CounterpartRaw)

			if routerRaw == "" {
				return fmt.Errorf("--router argument not specified")
			} else if !common.IsHexAddress(routerRaw) {
				return fmt.Errorf("--router argument is not a valid Ethereum address")
			}
			router = common.HexToAddress(routerRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewL2CustomGateway(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := L2CustomGatewayTransactorSession{
				Contract:     &contract.L2CustomGatewayTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.Initialize(
				l1Counterpart,
				router,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&l1CounterpartRaw, "l-1-counterpart", "", "l-1-counterpart argument")
	cmd.Flags().StringVar(&routerRaw, "router", "", "router argument")

	return cmd
}
func CreateOutboundTransferCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var l1Token common.Address
	var l1TokenRaw string
	var _to0 common.Address
	var _to0Raw string
	var amount *big.Int
	var amountRaw string
	var data []byte
	var dataRaw string

	cmd := &cobra.Command{
		Use:   "outbound-transfer",
		Short: "Execute the OutboundTransfer method on a L2CustomGateway contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if l1TokenRaw == "" {
				return fmt.Errorf("--l-1-token argument not specified")
			} else if !common.IsHexAddress(l1TokenRaw) {
				return fmt.Errorf("--l-1-token argument is not a valid Ethereum address")
			}
			l1Token = common.HexToAddress(l1TokenRaw)

			if _to0Raw == "" {
				return fmt.Errorf("---to-0 argument not specified")
			} else if !common.IsHexAddress(_to0Raw) {
				return fmt.Errorf("---to-0 argument is not a valid Ethereum address")
			}
			_to0 = common.HexToAddress(_to0Raw)

			if amountRaw == "" {
				return fmt.Errorf("--amount argument not specified")
			}
			amount = new(big.Int)
			amount.SetString(amountRaw, 0)

			var hexDecodedataErr error

			data, hexDecodedataErr = hex.DecodeString(dataRaw)
			if hexDecodedataErr != nil {
				return hexDecodedataErr
			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewL2CustomGateway(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := L2CustomGatewayTransactorSession{
				Contract:     &contract.L2CustomGatewayTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.OutboundTransfer(
				l1Token,
				_to0,
				amount,
				data,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&l1TokenRaw, "l-1-token", "", "l-1-token argument")
	cmd.Flags().StringVar(&_to0Raw, "-to-0", "", "-to-0 argument")
	cmd.Flags().StringVar(&amountRaw, "amount", "", "amount argument")
	cmd.Flags().StringVar(&dataRaw, "data", "", "data argument")

	return cmd
}
func CreateOutboundTransfer0Command() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var l1Token common.Address
	var l1TokenRaw string
	var _to0 common.Address
	var _to0Raw string
	var amount *big.Int
	var amountRaw string
	var arg3 *big.Int
	var arg3Raw string
	var arg4 *big.Int
	var arg4Raw string
	var data []byte
	var dataRaw string

	cmd := &cobra.Command{
		Use:   "outbound-transfer-0",
		Short: "Execute the OutboundTransfer0 method on a L2CustomGateway contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if l1TokenRaw == "" {
				return fmt.Errorf("--l-1-token argument not specified")
			} else if !common.IsHexAddress(l1TokenRaw) {
				return fmt.Errorf("--l-1-token argument is not a valid Ethereum address")
			}
			l1Token = common.HexToAddress(l1TokenRaw)

			if _to0Raw == "" {
				return fmt.Errorf("---to-0 argument not specified")
			} else if !common.IsHexAddress(_to0Raw) {
				return fmt.Errorf("---to-0 argument is not a valid Ethereum address")
			}
			_to0 = common.HexToAddress(_to0Raw)

			if amountRaw == "" {
				return fmt.Errorf("--amount argument not specified")
			}
			amount = new(big.Int)
			amount.SetString(amountRaw, 0)

			if arg3Raw == "" {
				return fmt.Errorf("--arg-3 argument not specified")
			}
			arg3 = new(big.Int)
			arg3.SetString(arg3Raw, 0)

			if arg4Raw == "" {
				return fmt.Errorf("--arg-4 argument not specified")
			}
			arg4 = new(big.Int)
			arg4.SetString(arg4Raw, 0)

			var hexDecodedataErr error

			data, hexDecodedataErr = hex.DecodeString(dataRaw)
			if hexDecodedataErr != nil {
				return hexDecodedataErr
			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewL2CustomGateway(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := L2CustomGatewayTransactorSession{
				Contract:     &contract.L2CustomGatewayTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.OutboundTransfer0(
				l1Token,
				_to0,
				amount,
				arg3,
				arg4,
				data,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&l1TokenRaw, "l-1-token", "", "l-1-token argument")
	cmd.Flags().StringVar(&_to0Raw, "-to-0", "", "-to-0 argument")
	cmd.Flags().StringVar(&amountRaw, "amount", "", "amount argument")
	cmd.Flags().StringVar(&arg3Raw, "arg-3", "", "arg-3 argument")
	cmd.Flags().StringVar(&arg4Raw, "arg-4", "", "arg-4 argument")
	cmd.Flags().StringVar(&dataRaw, "data", "", "data argument")

	return cmd
}
func CreatePostUpgradeInitCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	cmd := &cobra.Command{
		Use:   "post-upgrade-init",
		Short: "Execute the PostUpgradeInit method on a L2CustomGateway contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewL2CustomGateway(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := L2CustomGatewayTransactorSession{
				Contract:     &contract.L2CustomGatewayTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.PostUpgradeInit()
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	return cmd
}
func CreateRegisterTokenFromL1Command() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address

	var l1Address []common.Address
	var l1AddressRaw string
	var l2Address []common.Address
	var l2AddressRaw string

	cmd := &cobra.Command{
		Use:   "register-token-from-l-1",
		Short: "Execute the RegisterTokenFromL1 method on a L2CustomGateway contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if l1AddressRaw == "" {
				return fmt.Errorf("--l-1-address argument not specified")
			} else if strings.HasPrefix(l1AddressRaw, "@") {
				filename := strings.TrimPrefix(l1AddressRaw, "@")
				contents, readErr := os.ReadFile(filename)
				if readErr != nil {
					return readErr
				}
				unmarshalErr := json.Unmarshal(contents, &l1Address)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			} else {
				unmarshalErr := json.Unmarshal([]byte(l1AddressRaw), &l1Address)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			}

			if l2AddressRaw == "" {
				return fmt.Errorf("--l-2-address argument not specified")
			} else if strings.HasPrefix(l2AddressRaw, "@") {
				filename := strings.TrimPrefix(l2AddressRaw, "@")
				contents, readErr := os.ReadFile(filename)
				if readErr != nil {
					return readErr
				}
				unmarshalErr := json.Unmarshal(contents, &l2Address)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			} else {
				unmarshalErr := json.Unmarshal([]byte(l2AddressRaw), &l2Address)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewL2CustomGateway(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := L2CustomGatewayTransactorSession{
				Contract:     &contract.L2CustomGatewayTransactor,
				TransactOpts: *transactionOpts,
			}

			transaction, transactionErr := session.RegisterTokenFromL1(
				l1Address,
				l2Address,
			)
			if transactionErr != nil {
				return transactionErr
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")

	cmd.Flags().StringVar(&l1AddressRaw, "l-1-address", "", "l-1-address argument")
	cmd.Flags().StringVar(&l2AddressRaw, "l-2-address", "", "l-2-address argument")

	return cmd
}

var ErrNoRPCURL error = errors.New("no RPC URL provided -- please pass an RPC URL from the command line or set the L_2_CUSTOM_GATEWAY_RPC_URL environment variable")

// Generates an Ethereum client to the JSONRPC API at the given URL. If rpcURL is empty, then it
// attempts to read the RPC URL from the L_2_CUSTOM_GATEWAY_RPC_URL environment variable. If that is empty,
// too, then it returns an error.
func NewClient(rpcURL string) (*ethclient.Client, error) {
	if rpcURL == "" {
		rpcURL = os.Getenv("L_2_CUSTOM_GATEWAY_RPC_URL")
	}

	if rpcURL == "" {
		return nil, ErrNoRPCURL
	}

	client, err := ethclient.Dial(rpcURL)
	return client, err
}

// Creates a new context to be used when interacting with the chain client.
func NewChainContext(timeout uint) (context.Context, context.CancelFunc) {
	baseCtx := context.Background()
	parsedTimeout := time.Duration(timeout) * time.Second
	ctx, cancel := context.WithTimeout(baseCtx, parsedTimeout)
	return ctx, cancel
}

// Unlocks a key from a keystore (byte contents of a keystore file) with the given password.
func UnlockKeystore(keystoreData []byte, password string) (*keystore.Key, error) {
	key, err := keystore.DecryptKey(keystoreData, password)
	return key, err
}

// Loads a key from file, prompting the user for the password if it is not provided as a function argument.
func KeyFromFile(keystoreFile string, password string) (*keystore.Key, error) {
	var emptyKey *keystore.Key
	keystoreContent, readErr := os.ReadFile(keystoreFile)
	if readErr != nil {
		return emptyKey, readErr
	}

	// If password is "", prompt user for password.
	if password == "" {
		fmt.Printf("Please provide a password for keystore (%s): ", keystoreFile)
		passwordRaw, inputErr := term.ReadPassword(int(os.Stdin.Fd()))
		if inputErr != nil {
			return emptyKey, fmt.Errorf("error reading password: %s", inputErr.Error())
		}
		fmt.Print("\n")
		password = string(passwordRaw)
	}

	key, err := UnlockKeystore(keystoreContent, password)
	return key, err
}

// This method is used to set the parameters on a view call from command line arguments (represented mostly as
// strings).
func SetCallParametersFromArgs(opts *bind.CallOpts, pending bool, fromAddress, blockNumber string) {
	if pending {
		opts.Pending = true
	}

	if fromAddress != "" {
		opts.From = common.HexToAddress(fromAddress)
	}

	if blockNumber != "" {
		opts.BlockNumber = new(big.Int)
		opts.BlockNumber.SetString(blockNumber, 0)
	}
}

// This method is used to set the parameters on a transaction from command line arguments (represented mostly as
// strings).
func SetTransactionParametersFromArgs(opts *bind.TransactOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas string, gasLimit uint64, noSend bool) {
	if nonce != "" {
		opts.Nonce = new(big.Int)
		opts.Nonce.SetString(nonce, 0)
	}

	if value != "" {
		opts.Value = new(big.Int)
		opts.Value.SetString(value, 0)
	}

	if gasPrice != "" {
		opts.GasPrice = new(big.Int)
		opts.GasPrice.SetString(gasPrice, 0)
	}

	if maxFeePerGas != "" {
		opts.GasFeeCap = new(big.Int)
		opts.GasFeeCap.SetString(maxFeePerGas, 0)
	}

	if maxPriorityFeePerGas != "" {
		opts.GasTipCap = new(big.Int)
		opts.GasTipCap.SetString(maxPriorityFeePerGas, 0)
	}

	if gasLimit != 0 {
		opts.GasLimit = gasLimit
	}

	opts.NoSend = noSend
}

func CreateL2CustomGatewayCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "l-2-custom-gateway",
		Short: "Interact with the L2CustomGateway contract",
		Run: func(cmd *cobra.Command, args []string) {
			cmd.Help()
		},
	}

	cmd.SetOut(os.Stdout)

	DeployGroup := &cobra.Group{
		ID: "deploy", Title: "Commands which deploy contracts",
	}
	cmd.AddGroup(DeployGroup)
	ViewGroup := &cobra.Group{
		ID: "view", Title: "Commands which view contract state",
	}
	TransactGroup := &cobra.Group{
		ID: "transact", Title: "Commands which submit transactions",
	}
	cmd.AddGroup(ViewGroup, TransactGroup)

	cmdDeployL2CustomGateway := CreateL2CustomGatewayDeploymentCommand()
	cmdDeployL2CustomGateway.GroupID = DeployGroup.ID
	cmd.AddCommand(cmdDeployL2CustomGateway)

	cmdViewRouter := CreateRouterCommand()
	cmdViewRouter.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewRouter)
	cmdViewCalculateL2TokenAddress := CreateCalculateL2TokenAddressCommand()
	cmdViewCalculateL2TokenAddress.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewCalculateL2TokenAddress)
	cmdViewCounterpartGateway := CreateCounterpartGatewayCommand()
	cmdViewCounterpartGateway.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewCounterpartGateway)
	cmdViewExitNum := CreateExitNumCommand()
	cmdViewExitNum.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewExitNum)
	cmdViewGetOutboundCalldata := CreateGetOutboundCalldataCommand()
	cmdViewGetOutboundCalldata.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewGetOutboundCalldata)
	cmdViewL1ToL2Token := CreateL1ToL2TokenCommand()
	cmdViewL1ToL2Token.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewL1ToL2Token)

	cmdTransactFinalizeInboundTransfer := CreateFinalizeInboundTransferCommand()
	cmdTransactFinalizeInboundTransfer.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactFinalizeInboundTransfer)
	cmdTransactInitialize := CreateInitializeCommand()
	cmdTransactInitialize.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactInitialize)
	cmdTransactOutboundTransfer := CreateOutboundTransferCommand()
	cmdTransactOutboundTransfer.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactOutboundTransfer)
	cmdTransactOutboundTransfer0 := CreateOutboundTransfer0Command()
	cmdTransactOutboundTransfer0.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactOutboundTransfer0)
	cmdTransactPostUpgradeInit := CreatePostUpgradeInitCommand()
	cmdTransactPostUpgradeInit.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactPostUpgradeInit)
	cmdTransactRegisterTokenFromL1 := CreateRegisterTokenFromL1Command()
	cmdTransactRegisterTokenFromL1.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactRegisterTokenFromL1)

	return cmd
}

